{
    "name": "radarr",
    "displayName": "radarr",
    "description": "A Pulumi package for creating and managing a radarr application.",
    "keywords": [
        "pulumi",
        "radarr",
        "category/infrastructure"
    ],
    "homepage": "https://github.com/MaienM/pulumi-radarr",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`radarr` Terraform Provider](https://github.com/devopsarr/terraform-provider-radarr).",
    "repository": "https://github.com/MaienM/pulumi-radarr",
    "logoUrl": "https://raw.githubusercontent.com/MaienM/pulumi-radarr/main/docs/radarr.png",
    "pluginDownloadURL": "github://api.github.com/MaienM/pulumi-radarr",
    "publisher": "MaienM",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "MaienM"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/MaienM/pulumi-radarr/sdk/go/radarr"
        },
        "java": {
            "basePackage": "com.maienm",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": ""
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing a radarr application.",
            "packageName": "@maienm/pulumi-radarr",
            "pluginName": "",
            "pluginVersion": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/devopsarr/terraform-provider-radarr)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-radarr` repo](https://github.com/MaienM/pulumi-radarr/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-radarr` repo](https://github.com/devopsarr/terraform-provider-radarr/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumi_radarr",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/devopsarr/terraform-provider-radarr)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-radarr` repo](https://github.com/MaienM/pulumi-radarr/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-radarr` repo](https://github.com/devopsarr/terraform-provider-radarr/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "API key for Radarr authentication. Can be specified via the `RADARR_API_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "Full Radarr URL with protocol and port (e.g. `https://test.radarr.tv:7878`). You should **NOT** supply any path\n(`/api`), the SDK will use the appropriate paths. Can be specified via the `RADARR_URL` environment variable.\n"
            }
        }
    },
    "types": {
        "radarr:DownloadClient/getDownloadClientsDownloadClient:getDownloadClientsDownloadClient": {
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "API URL.\n"
                },
                "appId": {
                    "type": "string",
                    "description": "App ID.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App Token.\n",
                    "secret": true
                },
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "DownloadClient configuration template.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "destinationDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Download Client ID.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "DownloadClient implementation name.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "olderPriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "recentPriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "startOnAdd": {
                    "type": "boolean",
                    "description": "Start on add flag.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "type": "object",
            "required": [
                "addPaused",
                "addStopped",
                "additionalTags",
                "apiKey",
                "apiUrl",
                "appId",
                "appToken",
                "category",
                "configContract",
                "destination",
                "destinationDirectory",
                "enable",
                "fieldTags",
                "firstAndLast",
                "host",
                "id",
                "implementation",
                "initialState",
                "intialState",
                "magnetFileExtension",
                "movieCategory",
                "movieDirectory",
                "movieImportedCategory",
                "name",
                "nzbFolder",
                "olderMoviePriority",
                "olderPriority",
                "password",
                "port",
                "postImportTags",
                "priority",
                "protocol",
                "readOnly",
                "recentMoviePriority",
                "recentPriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "rpcPath",
                "saveMagnetFiles",
                "secretToken",
                "sequentialOrder",
                "startOnAdd",
                "strmFolder",
                "tags",
                "torrentFolder",
                "urlBase",
                "useSsl",
                "username",
                "watchFolder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:DownloadClient/getRemotePathMappingsRemotePathMapping:getRemotePathMappingsRemotePathMapping": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Download Client host.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "RemotePathMapping ID.\n"
                },
                "localPath": {
                    "type": "string",
                    "description": "Local path.\n"
                },
                "remotePath": {
                    "type": "string",
                    "description": "Download Client remote path.\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "id",
                "localPath",
                "remotePath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:ImportLists/getImportListExclusionsImportListExclusion:getImportListExclusionsImportListExclusion": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Import List Exclusion ID.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Movie to be excluded.\n"
                },
                "tmdbId": {
                    "type": "integer",
                    "description": "Movie TMDB ID.\n"
                },
                "year": {
                    "type": "integer",
                    "description": "Year.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "title",
                "tmdbId",
                "year"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:ImportLists/getImportListsImportList:getImportListsImportList": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accountId": {
                    "type": "string",
                    "description": "Account ID.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "cast": {
                    "type": "boolean",
                    "description": "Include cast.\n"
                },
                "castDirector": {
                    "type": "boolean",
                    "description": "Include cast director.\n"
                },
                "castProducer": {
                    "type": "boolean",
                    "description": "Include cast producer.\n"
                },
                "castSound": {
                    "type": "boolean",
                    "description": "Include cast sound.\n"
                },
                "castWriting": {
                    "type": "boolean",
                    "description": "Include cast writing.\n"
                },
                "certification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "companyId": {
                    "type": "string",
                    "description": "Company ID.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "ImportList configuration template.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "excludeGenreIds": {
                    "type": "string",
                    "description": "Exclude genre IDs.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "genres": {
                    "type": "string",
                    "description": "Genres.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Import List ID.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "ImportList implementation name.\n"
                },
                "includeGenreIds": {
                    "type": "string",
                    "description": "Include genre IDs.\n"
                },
                "keywordId": {
                    "type": "string",
                    "description": "Keyword ID.\n"
                },
                "languageCode": {
                    "type": "integer",
                    "description": "Language code.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "limit.\n"
                },
                "link": {
                    "type": "string",
                    "description": "Link.\n"
                },
                "listId": {
                    "type": "string",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "listType": {
                    "type": "string",
                    "description": "List type.\n"
                },
                "listname": {
                    "type": "string",
                    "description": "List name.\n"
                },
                "minScore": {
                    "type": "integer",
                    "description": "Min score.\n"
                },
                "minVoteAverage": {
                    "type": "string",
                    "description": "Min vote average.\n"
                },
                "minVotes": {
                    "type": "string",
                    "description": "Min votes.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "onlyActive": {
                    "type": "boolean",
                    "description": "Only active.\n"
                },
                "personId": {
                    "type": "string",
                    "description": "Person ID.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rating": {
                    "type": "string",
                    "description": "Rating.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "source": {
                    "type": "integer",
                    "description": "Source.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "tmdbCertification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "tmdbListType": {
                    "type": "integer",
                    "description": "TMDB list type.\n"
                },
                "traktAdditionalParameters": {
                    "type": "string",
                    "description": "Trakt additional parameters.\n"
                },
                "traktListType": {
                    "type": "integer",
                    "description": "Trakt list type.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "userListType": {
                    "type": "integer",
                    "description": "User list type.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "years": {
                    "type": "string",
                    "description": "Years.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "accountId",
                "apiKey",
                "authUser",
                "baseUrl",
                "cast",
                "castDirector",
                "castProducer",
                "castSound",
                "castWriting",
                "certification",
                "companyId",
                "configContract",
                "enableAuto",
                "enabled",
                "excludeGenreIds",
                "expires",
                "genres",
                "id",
                "implementation",
                "includeGenreIds",
                "keywordId",
                "languageCode",
                "limit",
                "link",
                "listId",
                "listOrder",
                "listType",
                "listname",
                "minScore",
                "minVoteAverage",
                "minVotes",
                "minimumAvailability",
                "monitor",
                "name",
                "onlyActive",
                "personId",
                "port",
                "profileIds",
                "qualityProfileId",
                "rating",
                "refreshToken",
                "rootFolderPath",
                "searchOnAdd",
                "source",
                "tagIds",
                "tags",
                "tmdbCertification",
                "tmdbListType",
                "traktAdditionalParameters",
                "traktListType",
                "url",
                "urlBase",
                "userListType",
                "username",
                "years"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Indexers/getIndexersIndexer:getIndexersIndexer": {
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "apiUser": {
                    "type": "string",
                    "description": "API User.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "captchaToken": {
                    "type": "string",
                    "description": "Captcha token.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "codecs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Codecs.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Indexer configuration template.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "delay": {
                    "type": "integer",
                    "description": "Delay before grabbing.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Indexer ID.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Indexer implementation name.\n"
                },
                "mediums": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Mediumd.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Language list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Indexer name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "rankedOnly": {
                    "type": "boolean",
                    "description": "Allow ranked only.\n"
                },
                "removeYear": {
                    "type": "boolean",
                    "description": "Remove year.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Computed flags.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "type": "object",
            "required": [
                "additionalParameters",
                "allowZeroSize",
                "apiKey",
                "apiPath",
                "apiUser",
                "baseUrl",
                "captchaToken",
                "categories",
                "codecs",
                "configContract",
                "cookie",
                "delay",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "id",
                "implementation",
                "mediums",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "passkey",
                "priority",
                "protocol",
                "rankedOnly",
                "removeYear",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags",
                "user",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Indexers/getRestrictionsRestriction:getRestrictionsRestriction": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Restriction ID.\n"
                },
                "ignored": {
                    "type": "string",
                    "description": "Ignored.\n"
                },
                "required": {
                    "type": "string",
                    "description": "Required.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "ignored",
                "required",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:MediaManagement/RootFolderUnmappedFolder:RootFolderUnmappedFolder": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of unmapped folder.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path of unmapped folder.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "path"
                    ]
                }
            }
        },
        "radarr:MediaManagement/getRootFolderUnmappedFolder:getRootFolderUnmappedFolder": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of unmapped folder.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path of unmapped folder.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:MediaManagement/getRootFoldersRootFolder:getRootFoldersRootFolder": {
            "properties": {
                "accessible": {
                    "type": "boolean",
                    "description": "Access flag.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Root Folder ID.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Root Folder absolute path.\n"
                },
                "unmappedFolders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:MediaManagement/getRootFoldersRootFolderUnmappedFolder:getRootFoldersRootFolderUnmappedFolder"
                    },
                    "description": "List of folders with no associated series.\n"
                }
            },
            "type": "object",
            "required": [
                "accessible",
                "id",
                "path",
                "unmappedFolders"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:MediaManagement/getRootFoldersRootFolderUnmappedFolder:getRootFoldersRootFolderUnmappedFolder": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Metadata/getMetadataConsumersMetadataConsumer:getMetadataConsumersMetadataConsumer": {
            "properties": {
                "addCollectionName": {
                    "type": "boolean",
                    "description": "Add collection name flag.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Metadata configuration template.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Metadata ID.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Metadata implementation name.\n"
                },
                "movieImages": {
                    "type": "boolean",
                    "description": "Movie images flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metafata flag.\n"
                },
                "movieMetadataLanguage": {
                    "type": "integer",
                    "description": "Movie metadata language.\n"
                },
                "movieMetadataUrl": {
                    "type": "boolean",
                    "description": "Movie metadata URL flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useMovieNfo": {
                    "type": "boolean",
                    "description": "Use movie nfo flag.\n"
                }
            },
            "type": "object",
            "required": [
                "addCollectionName",
                "configContract",
                "enable",
                "id",
                "implementation",
                "movieImages",
                "movieMetadata",
                "movieMetadataLanguage",
                "movieMetadataUrl",
                "name",
                "tags",
                "useMovieNfo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Movies/MovieOriginalLanguage:MovieOriginalLanguage": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "radarr:Movies/getMovieOriginalLanguage:getMovieOriginalLanguage": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Movies/getMoviesMovie:getMoviesMovie": {
            "properties": {
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List genres.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Movie ID.\n"
                },
                "imdbId": {
                    "type": "string",
                    "description": "IMDB ID.\n"
                },
                "isAvailable": {
                    "type": "boolean",
                    "description": "Availability flag.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\nAllowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.\n"
                },
                "monitored": {
                    "type": "boolean",
                    "description": "Monitored flag.\n"
                },
                "originalLanguage": {
                    "$ref": "#/types/radarr:Movies/getMoviesMovieOriginalLanguage:getMoviesMovieOriginalLanguage",
                    "description": "Origina language.\n"
                },
                "originalTitle": {
                    "type": "string",
                    "description": "Movie original title.\n"
                },
                "overview": {
                    "type": "string",
                    "description": "Overview.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Full movie path.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Movie status.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Movie title.\n"
                },
                "tmdbId": {
                    "type": "integer",
                    "description": "TMDB ID.\n"
                },
                "website": {
                    "type": "string",
                    "description": "Website.\n"
                },
                "year": {
                    "type": "integer",
                    "description": "Year.\n"
                },
                "youtubeTrailerId": {
                    "type": "string",
                    "description": "Youtube trailer ID.\n"
                }
            },
            "type": "object",
            "required": [
                "genres",
                "id",
                "imdbId",
                "isAvailable",
                "minimumAvailability",
                "monitored",
                "originalLanguage",
                "originalTitle",
                "overview",
                "path",
                "qualityProfileId",
                "status",
                "tags",
                "title",
                "tmdbId",
                "website",
                "year",
                "youtubeTrailerId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Movies/getMoviesMovieOriginalLanguage:getMoviesMovieOriginalLanguage": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Notifications/getNotificationsNotification:getNotificationsNotification": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n"
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n"
                },
                "alwaysUpdate": {
                    "type": "boolean",
                    "description": "Always update flag.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App token.\n"
                },
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Auth token.\n"
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Author.\n"
                },
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Channel tags.\n"
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "cleanLibrary": {
                    "type": "boolean",
                    "description": "Clean library flag.\n"
                },
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Notification configuration template.\n"
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer key.\n"
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer secret.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Device IDs.\n"
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "displayTime": {
                    "type": "integer",
                    "description": "Display time.\n"
                },
                "event": {
                    "type": "string",
                    "description": "Event.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specific tags.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "grabFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Notification ID.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Notification implementation name.\n"
                },
                "importFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n"
                },
                "mapFrom": {
                    "type": "string",
                    "description": "Map From.\n"
                },
                "mapTo": {
                    "type": "string",
                    "description": "Map To.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notify flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "password.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n"
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Add silently flag.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "server": {
                    "type": "string",
                    "description": "server.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server url.\n"
                },
                "signIn": {
                    "type": "string",
                    "description": "Sign in.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Topics.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook url.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "accessTokenSecret",
                "alwaysUpdate",
                "apiKey",
                "appToken",
                "arguments",
                "authToken",
                "authUser",
                "author",
                "avatar",
                "bccs",
                "botToken",
                "ccs",
                "channel",
                "channelTags",
                "chatId",
                "cleanLibrary",
                "clickUrl",
                "configContract",
                "consumerKey",
                "consumerSecret",
                "deviceIds",
                "deviceNames",
                "devices",
                "directMessage",
                "displayTime",
                "event",
                "expire",
                "expires",
                "fieldTags",
                "from",
                "grabFields",
                "host",
                "icon",
                "id",
                "implementation",
                "importFields",
                "includeHealthWarnings",
                "instanceName",
                "key",
                "mapFrom",
                "mapTo",
                "mention",
                "method",
                "name",
                "notify",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "password",
                "path",
                "port",
                "priority",
                "recipients",
                "refreshToken",
                "requireEncryption",
                "retry",
                "sendSilently",
                "senderDomain",
                "senderId",
                "server",
                "serverUrl",
                "signIn",
                "sound",
                "tags",
                "tos",
                "token",
                "topics",
                "updateLibrary",
                "url",
                "useEuEndpoint",
                "useSsl",
                "userKey",
                "username",
                "webHookUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/CustomFormatSpecification:CustomFormatSpecification": {
            "properties": {
                "implementation": {
                    "type": "string",
                    "description": "Implementation.\n"
                },
                "max": {
                    "type": "integer",
                    "description": "Max.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "Min.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specification name.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "Negate flag.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Required flag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "implementation",
                        "max",
                        "min",
                        "name",
                        "negate",
                        "required",
                        "value"
                    ]
                }
            }
        },
        "radarr:Profiles/QualityProfileFormatItem:QualityProfileFormatItem": {
            "properties": {
                "format": {
                    "type": "integer",
                    "description": "Format.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name.\n"
                },
                "score": {
                    "type": "integer",
                    "description": "Score.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "format",
                        "name",
                        "score"
                    ]
                }
            }
        },
        "radarr:Profiles/QualityProfileLanguage:QualityProfileLanguage": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name.\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "radarr:Profiles/QualityProfileQualityGroup:QualityProfileQualityGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality group ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality group name.\n"
                },
                "qualities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/QualityProfileQualityGroupQuality:QualityProfileQualityGroupQuality"
                    },
                    "description": "Qualities in group.\n"
                }
            },
            "type": "object",
            "required": [
                "qualities"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "qualities"
                    ]
                }
            }
        },
        "radarr:Profiles/QualityProfileQualityGroupQuality:QualityProfileQualityGroupQuality": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality Profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                },
                "resolution": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "resolution",
                        "source"
                    ]
                }
            }
        },
        "radarr:Profiles/getCustomFormatSpecification:getCustomFormatSpecification": {
            "properties": {
                "implementation": {
                    "type": "string",
                    "description": "Implementation.\n"
                },
                "max": {
                    "type": "integer",
                    "description": "Max.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "Min.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specification name.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "Negate flag.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Computed flag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value.\n"
                }
            },
            "type": "object",
            "required": [
                "implementation",
                "max",
                "min",
                "name",
                "negate",
                "required",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getCustomFormatsCustomFormat:getCustomFormatsCustomFormat": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Custom Format ID.\n"
                },
                "includeCustomFormatWhenRenaming": {
                    "type": "boolean",
                    "description": "Include custom format when renaming flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Custom Format name.\n"
                },
                "specifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/getCustomFormatsCustomFormatSpecification:getCustomFormatsCustomFormatSpecification"
                    },
                    "description": "Specifications.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "includeCustomFormatWhenRenaming",
                "name",
                "specifications"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getCustomFormatsCustomFormatSpecification:getCustomFormatsCustomFormatSpecification": {
            "properties": {
                "implementation": {
                    "type": "string"
                },
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "negate": {
                    "type": "boolean"
                },
                "required": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "implementation",
                "max",
                "min",
                "name",
                "negate",
                "required",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getDelayProfilesDelayProfile:getDelayProfilesDelayProfile": {
            "properties": {
                "bypassIfHighestQuality": {
                    "type": "boolean",
                    "description": "Bypass for highest quality Flag.\n"
                },
                "enableTorrent": {
                    "type": "boolean",
                    "description": "Torrent allowed Flag.\n"
                },
                "enableUsenet": {
                    "type": "boolean",
                    "description": "Usenet allowed Flag.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Delay Profile ID.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order.\n"
                },
                "preferredProtocol": {
                    "type": "string",
                    "description": "Preferred protocol.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentDelay": {
                    "type": "integer",
                    "description": "Torrent Delay.\n"
                },
                "usenetDelay": {
                    "type": "integer",
                    "description": "Usenet delay.\n"
                }
            },
            "type": "object",
            "required": [
                "bypassIfHighestQuality",
                "enableTorrent",
                "enableUsenet",
                "id",
                "order",
                "preferredProtocol",
                "tags",
                "torrentDelay",
                "usenetDelay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getLanguagesLanguage:getLanguagesLanguage": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Language ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Language.\n"
                },
                "nameLower": {
                    "type": "string",
                    "description": "Language in lowercase.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "nameLower"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityDefinitionsQualityDefinition:getQualityDefinitionsQualityDefinition": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality Definition ID.\n"
                },
                "maxSize": {
                    "type": "number",
                    "description": "Maximum size MB/min.\n"
                },
                "minSize": {
                    "type": "number",
                    "description": "Minimum size MB/min.\n"
                },
                "preferredSize": {
                    "type": "number",
                    "description": "Preferred size MB/min.\n"
                },
                "qualityId": {
                    "type": "integer",
                    "description": "Quality ID.\n"
                },
                "qualityName": {
                    "type": "string",
                    "description": "Quality Name.\n"
                },
                "resolution": {
                    "type": "integer",
                    "description": "Quality Resolution.\n"
                },
                "source": {
                    "type": "string",
                    "description": "Quality source.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Quality Definition Title.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "maxSize",
                "minSize",
                "preferredSize",
                "qualityId",
                "qualityName",
                "resolution",
                "source",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityProfileFormatItem:getQualityProfileFormatItem": {
            "properties": {
                "format": {
                    "type": "integer",
                    "description": "Format.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name.\n"
                },
                "score": {
                    "type": "integer",
                    "description": "Score.\n"
                }
            },
            "type": "object",
            "required": [
                "format",
                "name",
                "score"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityProfileLanguage:getQualityProfileLanguage": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityProfileQualityGroup:getQualityProfileQualityGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality group ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality group name.\n"
                },
                "qualities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/getQualityProfileQualityGroupQuality:getQualityProfileQualityGroupQuality"
                    },
                    "description": "Qualities in group.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "qualities"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityProfileQualityGroupQuality:getQualityProfileQualityGroupQuality": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality Profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                },
                "resolution": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "resolution",
                "source"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityProfilesQualityProfile:getQualityProfilesQualityProfile": {
            "properties": {
                "cutoff": {
                    "type": "integer",
                    "description": "Quality ID to which cutoff.\n"
                },
                "cutoffFormatScore": {
                    "type": "integer",
                    "description": "Cutoff format score.\n"
                },
                "formatItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/getQualityProfilesQualityProfileFormatItem:getQualityProfilesQualityProfileFormatItem"
                    },
                    "description": "Format items.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Quality Profile ID.\n"
                },
                "language": {
                    "$ref": "#/types/radarr:Profiles/getQualityProfilesQualityProfileLanguage:getQualityProfilesQualityProfileLanguage",
                    "description": "Language.\n"
                },
                "minFormatScore": {
                    "type": "integer",
                    "description": "Min format score.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                },
                "qualityGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/getQualityProfilesQualityProfileQualityGroup:getQualityProfilesQualityProfileQualityGroup"
                    },
                    "description": "Quality groups.\n"
                },
                "upgradeAllowed": {
                    "type": "boolean",
                    "description": "Upgrade allowed flag.\n"
                }
            },
            "type": "object",
            "required": [
                "cutoff",
                "cutoffFormatScore",
                "formatItems",
                "id",
                "language",
                "minFormatScore",
                "name",
                "qualityGroups",
                "upgradeAllowed"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityProfilesQualityProfileFormatItem:getQualityProfilesQualityProfileFormatItem": {
            "properties": {
                "format": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "format",
                "name",
                "score"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityProfilesQualityProfileLanguage:getQualityProfilesQualityProfileLanguage": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityProfilesQualityProfileQualityGroup:getQualityProfilesQualityProfileQualityGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "qualities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/getQualityProfilesQualityProfileQualityGroupQuality:getQualityProfilesQualityProfileQualityGroupQuality"
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "qualities"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Profiles/getQualityProfilesQualityProfileQualityGroupQuality:getQualityProfilesQualityProfileQualityGroupQuality": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "resolution": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "resolution",
                "source"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "radarr:Tags/getTagsTag:getTagsTag": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Tag ID.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Tag label.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the radarr package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "description": "API key for Radarr authentication. Can be specified via the `RADARR_API_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "Full Radarr URL with protocol and port (e.g. `https://test.radarr.tv:7878`). You should **NOT** supply any path\n(`/api`), the SDK will use the appropriate paths. Can be specified via the `RADARR_URL` environment variable.\n"
            }
        },
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "API key for Radarr authentication. Can be specified via the `RADARR_API_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "Full Radarr URL with protocol and port (e.g. `https://test.radarr.tv:7878`). You should **NOT** supply any path\n(`/api`), the SDK will use the appropriate paths. Can be specified via the `RADARR_URL` environment variable.\n"
            }
        }
    },
    "resources": {
        "radarr:DownloadClient/downloadClient:DownloadClient": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eGeneric Download Client resource. When possible use a specific resource instead.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClient(\"example\", {\n    configContract: \"TransmissionSettings\",\n    enable: true,\n    host: \"transmission\",\n    implementation: \"Transmission\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    protocol: \"torrent\",\n    urlBase: \"/transmission/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClient(\"example\",\n    config_contract=\"TransmissionSettings\",\n    enable=True,\n    host=\"transmission\",\n    implementation=\"Transmission\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    protocol=\"torrent\",\n    url_base=\"/transmission/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClient(\"example\", new()\n    {\n        ConfigContract = \"TransmissionSettings\",\n        Enable = true,\n        Host = \"transmission\",\n        Implementation = \"Transmission\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        Protocol = \"torrent\",\n        UrlBase = \"/transmission/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClient(ctx, \"example\", \u0026DownloadClient.DownloadClientArgs{\n\t\t\tConfigContract: pulumi.String(\"TransmissionSettings\"),\n\t\t\tEnable:         pulumi.Bool(true),\n\t\t\tHost:           pulumi.String(\"transmission\"),\n\t\t\tImplementation: pulumi.String(\"Transmission\"),\n\t\t\tName:           pulumi.String(\"Example\"),\n\t\t\tPort:           pulumi.Int(9091),\n\t\t\tPriority:       pulumi.Int(1),\n\t\t\tProtocol:       pulumi.String(\"torrent\"),\n\t\t\tUrlBase:        pulumi.String(\"/transmission/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClient;\nimport com.pulumi.radarr.DownloadClient.DownloadClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClient(\"example\", DownloadClientArgs.builder()        \n            .configContract(\"TransmissionSettings\")\n            .enable(true)\n            .host(\"transmission\")\n            .implementation(\"Transmission\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .protocol(\"torrent\")\n            .urlBase(\"/transmission/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClient\n    properties:\n      configContract: TransmissionSettings\n      enable: true\n      host: transmission\n      implementation: Transmission\n      name: Example\n      port: 9091\n      priority: 1\n      protocol: torrent\n      urlBase: /transmission/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClient:DownloadClient example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "API URL.\n"
                },
                "appId": {
                    "type": "string",
                    "description": "App ID.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App Token.\n",
                    "secret": true
                },
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "DownloadClient configuration template.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "destinationDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "DownloadClient implementation name.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "olderPriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "recentPriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "startOnAdd": {
                    "type": "boolean",
                    "description": "Start on add flag.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "required": [
                "addPaused",
                "addStopped",
                "additionalTags",
                "apiKey",
                "apiUrl",
                "appId",
                "appToken",
                "category",
                "configContract",
                "destination",
                "destinationDirectory",
                "enable",
                "fieldTags",
                "firstAndLast",
                "host",
                "implementation",
                "initialState",
                "intialState",
                "magnetFileExtension",
                "movieCategory",
                "movieDirectory",
                "movieImportedCategory",
                "name",
                "nzbFolder",
                "olderMoviePriority",
                "olderPriority",
                "password",
                "port",
                "postImportTags",
                "priority",
                "protocol",
                "readOnly",
                "recentMoviePriority",
                "recentPriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "rpcPath",
                "saveMagnetFiles",
                "secretToken",
                "sequentialOrder",
                "startOnAdd",
                "strmFolder",
                "tags",
                "torrentFolder",
                "urlBase",
                "useSsl",
                "username",
                "watchFolder"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "API URL.\n"
                },
                "appId": {
                    "type": "string",
                    "description": "App ID.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App Token.\n",
                    "secret": true
                },
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "DownloadClient configuration template.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "destinationDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "DownloadClient implementation name.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "olderPriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "recentPriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "startOnAdd": {
                    "type": "boolean",
                    "description": "Start on add flag.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "requiredInputs": [
                "configContract",
                "implementation",
                "name",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClient resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "addStopped": {
                        "type": "boolean",
                        "description": "Add stopped flag.\n"
                    },
                    "additionalTags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "apiUrl": {
                        "type": "string",
                        "description": "API URL.\n"
                    },
                    "appId": {
                        "type": "string",
                        "description": "App ID.\n"
                    },
                    "appToken": {
                        "type": "string",
                        "description": "App Token.\n",
                        "secret": true
                    },
                    "category": {
                        "type": "string",
                        "description": "Category.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "DownloadClient configuration template.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Destination.\n"
                    },
                    "destinationDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Field tags.\n"
                    },
                    "firstAndLast": {
                        "type": "boolean",
                        "description": "First and last flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "DownloadClient implementation name.\n"
                    },
                    "initialState": {
                        "type": "integer",
                        "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                    },
                    "intialState": {
                        "type": "integer",
                        "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                    },
                    "magnetFileExtension": {
                        "type": "string",
                        "description": "Magnet file extension.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "movieImportedCategory": {
                        "type": "string",
                        "description": "Movie imported category.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "nzbFolder": {
                        "type": "string",
                        "description": "NZB folder.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "olderPriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "postImportTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Post import tags.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read only flag.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "recentPriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "rpcPath": {
                        "type": "string",
                        "description": "RPC path.\n"
                    },
                    "saveMagnetFiles": {
                        "type": "boolean",
                        "description": "Save magnet files flag.\n"
                    },
                    "secretToken": {
                        "type": "string",
                        "description": "Secret token.\n"
                    },
                    "sequentialOrder": {
                        "type": "boolean",
                        "description": "Sequential order flag.\n"
                    },
                    "startOnAdd": {
                        "type": "boolean",
                        "description": "Start on add flag.\n"
                    },
                    "strmFolder": {
                        "type": "string",
                        "description": "STRM folder.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentFolder": {
                        "type": "string",
                        "description": "Torrent folder.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "watchFolder": {
                        "type": "string",
                        "description": "Watch folder flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientAria2:DownloadClientAria2": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Aria2 resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Aria2](https://wiki.servarr.com/radarr/supported#aria2).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientAria2(\"example\", {\n    enable: true,\n    host: \"aria2\",\n    name: \"Example\",\n    port: 6800,\n    priority: 1,\n    rpcPath: \"/aria2/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientAria2(\"example\",\n    enable=True,\n    host=\"aria2\",\n    name=\"Example\",\n    port=6800,\n    priority=1,\n    rpc_path=\"/aria2/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientAria2(\"example\", new()\n    {\n        Enable = true,\n        Host = \"aria2\",\n        Name = \"Example\",\n        Port = 6800,\n        Priority = 1,\n        RpcPath = \"/aria2/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientAria2(ctx, \"example\", \u0026DownloadClient.DownloadClientAria2Args{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"aria2\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(6800),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tRpcPath:  pulumi.String(\"/aria2/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientAria2;\nimport com.pulumi.radarr.DownloadClient.DownloadClientAria2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientAria2(\"example\", DownloadClientAria2Args.builder()        \n            .enable(true)\n            .host(\"aria2\")\n            .name(\"Example\")\n            .port(6800)\n            .priority(1)\n            .rpcPath(\"/aria2/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientAria2\n    properties:\n      enable: true\n      host: aria2\n      name: Example\n      port: 6800\n      priority: 1\n      rpcPath: /aria2/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientAria2:DownloadClientAria2 example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "required": [
                "enable",
                "host",
                "name",
                "port",
                "priority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "rpcPath",
                "secretToken",
                "tags",
                "useSsl"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientAria2 resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "rpcPath": {
                        "type": "string",
                        "description": "RPC path.\n"
                    },
                    "secretToken": {
                        "type": "string",
                        "description": "Secret token.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientConfig:DownloadClientConfig": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Config resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#completed-download-handling) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientConfig(\"example\", {\n    autoRedownloadFailed: false,\n    checkForFinishedDownloadInterval: 1,\n    enableCompletedDownloadHandling: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientConfig(\"example\",\n    auto_redownload_failed=False,\n    check_for_finished_download_interval=1,\n    enable_completed_download_handling=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientConfig(\"example\", new()\n    {\n        AutoRedownloadFailed = false,\n        CheckForFinishedDownloadInterval = 1,\n        EnableCompletedDownloadHandling = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientConfig(ctx, \"example\", \u0026DownloadClient.DownloadClientConfigArgs{\n\t\t\tAutoRedownloadFailed:             pulumi.Bool(false),\n\t\t\tCheckForFinishedDownloadInterval: pulumi.Int(1),\n\t\t\tEnableCompletedDownloadHandling:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientConfig;\nimport com.pulumi.radarr.DownloadClient.DownloadClientConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientConfig(\"example\", DownloadClientConfigArgs.builder()        \n            .autoRedownloadFailed(false)\n            .checkForFinishedDownloadInterval(1)\n            .enableCompletedDownloadHandling(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientConfig\n    properties:\n      autoRedownloadFailed: false\n      checkForFinishedDownloadInterval: 1\n      enableCompletedDownloadHandling: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientConfig:DownloadClientConfig example\n```\n\n ",
            "properties": {
                "autoRedownloadFailed": {
                    "type": "boolean",
                    "description": "Auto Redownload Failed flag.\n"
                },
                "checkForFinishedDownloadInterval": {
                    "type": "integer",
                    "description": "Check for finished download interval.\n"
                },
                "downloadClientWorkingFolders": {
                    "type": "string",
                    "description": "Download Client Working Folders.\n"
                },
                "enableCompletedDownloadHandling": {
                    "type": "boolean",
                    "description": "Enable Completed Download Handling flag.\n"
                }
            },
            "required": [
                "autoRedownloadFailed",
                "checkForFinishedDownloadInterval",
                "downloadClientWorkingFolders",
                "enableCompletedDownloadHandling"
            ],
            "inputProperties": {
                "autoRedownloadFailed": {
                    "type": "boolean",
                    "description": "Auto Redownload Failed flag.\n"
                },
                "checkForFinishedDownloadInterval": {
                    "type": "integer",
                    "description": "Check for finished download interval.\n"
                },
                "enableCompletedDownloadHandling": {
                    "type": "boolean",
                    "description": "Enable Completed Download Handling flag.\n"
                }
            },
            "requiredInputs": [
                "autoRedownloadFailed",
                "checkForFinishedDownloadInterval",
                "enableCompletedDownloadHandling"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientConfig resources.\n",
                "properties": {
                    "autoRedownloadFailed": {
                        "type": "boolean",
                        "description": "Auto Redownload Failed flag.\n"
                    },
                    "checkForFinishedDownloadInterval": {
                        "type": "integer",
                        "description": "Check for finished download interval.\n"
                    },
                    "downloadClientWorkingFolders": {
                        "type": "string",
                        "description": "Download Client Working Folders.\n"
                    },
                    "enableCompletedDownloadHandling": {
                        "type": "boolean",
                        "description": "Enable Completed Download Handling flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientDeluge:DownloadClientDeluge": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Deluge resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Deluge](https://wiki.servarr.com/radarr/supported#deluge).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientDeluge(\"example\", {\n    enable: true,\n    host: \"deluge\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/deluge/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientDeluge(\"example\",\n    enable=True,\n    host=\"deluge\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/deluge/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientDeluge(\"example\", new()\n    {\n        Enable = true,\n        Host = \"deluge\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/deluge/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientDeluge(ctx, \"example\", \u0026DownloadClient.DownloadClientDelugeArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"deluge\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/deluge/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientDeluge;\nimport com.pulumi.radarr.DownloadClient.DownloadClientDelugeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientDeluge(\"example\", DownloadClientDelugeArgs.builder()        \n            .enable(true)\n            .host(\"deluge\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/deluge/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientDeluge\n    properties:\n      enable: true\n      host: deluge\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /deluge/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientDeluge:DownloadClientDeluge example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addPaused",
                "enable",
                "host",
                "movieCategory",
                "movieDirectory",
                "movieImportedCategory",
                "name",
                "olderMoviePriority",
                "password",
                "port",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientDeluge resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "movieImportedCategory": {
                        "type": "string",
                        "description": "Movie imported category.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientFlood:DownloadClientFlood": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Flood resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Flood](https://wiki.servarr.com/radarr/supported#flood).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientFlood(\"example\", {\n    addPaused: true,\n    additionalTags: [\n        0,\n        1,\n    ],\n    enable: true,\n    fieldTags: [\"radarr\"],\n    host: \"flood\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/flood/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientFlood(\"example\",\n    add_paused=True,\n    additional_tags=[\n        0,\n        1,\n    ],\n    enable=True,\n    field_tags=[\"radarr\"],\n    host=\"flood\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/flood/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientFlood(\"example\", new()\n    {\n        AddPaused = true,\n        AdditionalTags = new[]\n        {\n            0,\n            1,\n        },\n        Enable = true,\n        FieldTags = new[]\n        {\n            \"radarr\",\n        },\n        Host = \"flood\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/flood/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientFlood(ctx, \"example\", \u0026DownloadClient.DownloadClientFloodArgs{\n\t\t\tAddPaused: pulumi.Bool(true),\n\t\t\tAdditionalTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(0),\n\t\t\t\tpulumi.Int(1),\n\t\t\t},\n\t\t\tEnable: pulumi.Bool(true),\n\t\t\tFieldTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"radarr\"),\n\t\t\t},\n\t\t\tHost:     pulumi.String(\"flood\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/flood/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientFlood;\nimport com.pulumi.radarr.DownloadClient.DownloadClientFloodArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientFlood(\"example\", DownloadClientFloodArgs.builder()        \n            .addPaused(true)\n            .additionalTags(            \n                0,\n                1)\n            .enable(true)\n            .fieldTags(\"radarr\")\n            .host(\"flood\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/flood/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientFlood\n    properties:\n      addPaused: true\n      additionalTags:\n        - 0\n        - 1\n      enable: true\n      fieldTags:\n        - radarr\n      host: flood\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /flood/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientFlood:DownloadClientFlood example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addPaused",
                "additionalTags",
                "destination",
                "enable",
                "fieldTags",
                "host",
                "movieCategory",
                "movieDirectory",
                "name",
                "olderMoviePriority",
                "password",
                "port",
                "postImportTags",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientFlood resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "additionalTags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Destination.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Field tags.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "postImportTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Post import tags.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientFreebox:DownloadClientFreebox": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Freebox resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Freebox](https://wiki.servarr.com/radarr/supported#torrentfreeboxdownload).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientFreebox(\"example\", {\n    apiUrl: \"/api/v1/\",\n    appId: \"freebox\",\n    appToken: \"Token123\",\n    enable: true,\n    host: \"mafreebox.freebox.fr\",\n    name: \"Example\",\n    port: 443,\n    priority: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientFreebox(\"example\",\n    api_url=\"/api/v1/\",\n    app_id=\"freebox\",\n    app_token=\"Token123\",\n    enable=True,\n    host=\"mafreebox.freebox.fr\",\n    name=\"Example\",\n    port=443,\n    priority=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientFreebox(\"example\", new()\n    {\n        ApiUrl = \"/api/v1/\",\n        AppId = \"freebox\",\n        AppToken = \"Token123\",\n        Enable = true,\n        Host = \"mafreebox.freebox.fr\",\n        Name = \"Example\",\n        Port = 443,\n        Priority = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientFreebox(ctx, \"example\", \u0026DownloadClient.DownloadClientFreeboxArgs{\n\t\t\tApiUrl:   pulumi.String(\"/api/v1/\"),\n\t\t\tAppId:    pulumi.String(\"freebox\"),\n\t\t\tAppToken: pulumi.String(\"Token123\"),\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"mafreebox.freebox.fr\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(443),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientFreebox;\nimport com.pulumi.radarr.DownloadClient.DownloadClientFreeboxArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientFreebox(\"example\", DownloadClientFreeboxArgs.builder()        \n            .apiUrl(\"/api/v1/\")\n            .appId(\"freebox\")\n            .appToken(\"Token123\")\n            .enable(true)\n            .host(\"mafreebox.freebox.fr\")\n            .name(\"Example\")\n            .port(443)\n            .priority(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientFreebox\n    properties:\n      apiUrl: /api/v1/\n      appId: freebox\n      appToken: Token123\n      enable: true\n      host: mafreebox.freebox.fr\n      name: Example\n      port: 443\n      priority: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientFreebox:DownloadClientFreebox example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "API URL.\n"
                },
                "appId": {
                    "type": "string",
                    "description": "App ID.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App Token.\n",
                    "secret": true
                },
                "category": {
                    "type": "string",
                    "description": "category.\n"
                },
                "destinationDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderPriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentPriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "required": [
                "addPaused",
                "apiUrl",
                "appId",
                "appToken",
                "category",
                "destinationDirectory",
                "enable",
                "host",
                "name",
                "olderPriority",
                "port",
                "priority",
                "recentPriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "useSsl"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "API URL.\n"
                },
                "appId": {
                    "type": "string",
                    "description": "App ID.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App Token.\n",
                    "secret": true
                },
                "category": {
                    "type": "string",
                    "description": "category.\n"
                },
                "destinationDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderPriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentPriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "requiredInputs": [
                "apiUrl",
                "appId",
                "appToken",
                "host",
                "name",
                "port"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientFreebox resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "apiUrl": {
                        "type": "string",
                        "description": "API URL.\n"
                    },
                    "appId": {
                        "type": "string",
                        "description": "App ID.\n"
                    },
                    "appToken": {
                        "type": "string",
                        "description": "App Token.\n",
                        "secret": true
                    },
                    "category": {
                        "type": "string",
                        "description": "category.\n"
                    },
                    "destinationDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderPriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentPriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientHadouken:DownloadClientHadouken": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Hadouken resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Hadouken](https://wiki.servarr.com/radarr/supported#hadouken).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientHadouken(\"example\", {\n    enable: true,\n    host: \"hadouken\",\n    name: \"Example\",\n    password: \"password\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/hadouken/\",\n    username: \"username\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientHadouken(\"example\",\n    enable=True,\n    host=\"hadouken\",\n    name=\"Example\",\n    password=\"password\",\n    port=9091,\n    priority=1,\n    url_base=\"/hadouken/\",\n    username=\"username\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientHadouken(\"example\", new()\n    {\n        Enable = true,\n        Host = \"hadouken\",\n        Name = \"Example\",\n        Password = \"password\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/hadouken/\",\n        Username = \"username\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientHadouken(ctx, \"example\", \u0026DownloadClient.DownloadClientHadoukenArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"hadouken\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/hadouken/\"),\n\t\t\tUsername: pulumi.String(\"username\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientHadouken;\nimport com.pulumi.radarr.DownloadClient.DownloadClientHadoukenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientHadouken(\"example\", DownloadClientHadoukenArgs.builder()        \n            .enable(true)\n            .host(\"hadouken\")\n            .name(\"Example\")\n            .password(\"password\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/hadouken/\")\n            .username(\"username\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientHadouken\n    properties:\n      enable: true\n      host: hadouken\n      name: Example\n      password: password\n      port: 9091\n      priority: 1\n      urlBase: /hadouken/\n      username: username\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientHadouken:DownloadClientHadouken example 1\n```\n\n ",
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "category",
                "enable",
                "host",
                "name",
                "password",
                "port",
                "priority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientHadouken resources.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Category.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientNzbget:DownloadClientNzbget": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client NZBGet resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [NZBGet](https://wiki.servarr.com/radarr/supported#nzbget).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientNzbget(\"example\", {\n    enable: true,\n    host: \"nzbget\",\n    name: \"Example\",\n    port: 6789,\n    priority: 1,\n    urlBase: \"/nzbget/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientNzbget(\"example\",\n    enable=True,\n    host=\"nzbget\",\n    name=\"Example\",\n    port=6789,\n    priority=1,\n    url_base=\"/nzbget/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientNzbget(\"example\", new()\n    {\n        Enable = true,\n        Host = \"nzbget\",\n        Name = \"Example\",\n        Port = 6789,\n        Priority = 1,\n        UrlBase = \"/nzbget/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientNzbget(ctx, \"example\", \u0026DownloadClient.DownloadClientNzbgetArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"nzbget\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(6789),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/nzbget/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientNzbget;\nimport com.pulumi.radarr.DownloadClient.DownloadClientNzbgetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientNzbget(\"example\", DownloadClientNzbgetArgs.builder()        \n            .enable(true)\n            .host(\"nzbget\")\n            .name(\"Example\")\n            .port(6789)\n            .priority(1)\n            .urlBase(\"/nzbget/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientNzbget\n    properties:\n      enable: true\n      host: nzbget\n      name: Example\n      port: 6789\n      priority: 1\n      urlBase: /nzbget/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientNzbget:DownloadClientNzbget example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addPaused",
                "enable",
                "host",
                "movieCategory",
                "name",
                "olderMoviePriority",
                "password",
                "port",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientNzbget resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientNzbvortex:DownloadClientNzbvortex": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Nzbvortex resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Nzbvortex](https://wiki.servarr.com/radarr/supported#nzbvortex).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientNzbvortex(\"example\", {\n    enable: true,\n    host: \"nzbvortex\",\n    name: \"Example\",\n    port: 6789,\n    priority: 1,\n    urlBase: \"/nzbvortex/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientNzbvortex(\"example\",\n    enable=True,\n    host=\"nzbvortex\",\n    name=\"Example\",\n    port=6789,\n    priority=1,\n    url_base=\"/nzbvortex/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientNzbvortex(\"example\", new()\n    {\n        Enable = true,\n        Host = \"nzbvortex\",\n        Name = \"Example\",\n        Port = 6789,\n        Priority = 1,\n        UrlBase = \"/nzbvortex/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientNzbvortex(ctx, \"example\", \u0026DownloadClient.DownloadClientNzbvortexArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"nzbvortex\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(6789),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/nzbvortex/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientNzbvortex;\nimport com.pulumi.radarr.DownloadClient.DownloadClientNzbvortexArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientNzbvortex(\"example\", DownloadClientNzbvortexArgs.builder()        \n            .enable(true)\n            .host(\"nzbvortex\")\n            .name(\"Example\")\n            .port(6789)\n            .priority(1)\n            .urlBase(\"/nzbvortex/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientNzbvortex\n    properties:\n      enable: true\n      host: nzbvortex\n      name: Example\n      port: 6789\n      priority: 1\n      urlBase: /nzbvortex/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientNzbvortex:DownloadClientNzbvortex example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `-1` Low, `0` Normal, `1` High.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `-1` Low, `0` Normal, `1` High.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "required": [
                "apiKey",
                "enable",
                "host",
                "movieCategory",
                "name",
                "olderMoviePriority",
                "port",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `-1` Low, `0` Normal, `1` High.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `-1` Low, `0` Normal, `1` High.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientNzbvortex resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `-1` Low, `0` Normal, `1` High.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `-1` Low, `0` Normal, `1` High.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientPneumatic:DownloadClientPneumatic": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Pneumatic resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Pneumatic](https://wiki.servarr.com/radarr/supported#pneumatic).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientPneumatic(\"example\", {\n    enable: true,\n    name: \"Example\",\n    nzbFolder: \"/nzb/\",\n    priority: 1,\n    strmFolder: \"/strm/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientPneumatic(\"example\",\n    enable=True,\n    name=\"Example\",\n    nzb_folder=\"/nzb/\",\n    priority=1,\n    strm_folder=\"/strm/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientPneumatic(\"example\", new()\n    {\n        Enable = true,\n        Name = \"Example\",\n        NzbFolder = \"/nzb/\",\n        Priority = 1,\n        StrmFolder = \"/strm/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientPneumatic(ctx, \"example\", \u0026DownloadClient.DownloadClientPneumaticArgs{\n\t\t\tEnable:     pulumi.Bool(true),\n\t\t\tName:       pulumi.String(\"Example\"),\n\t\t\tNzbFolder:  pulumi.String(\"/nzb/\"),\n\t\t\tPriority:   pulumi.Int(1),\n\t\t\tStrmFolder: pulumi.String(\"/strm/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientPneumatic;\nimport com.pulumi.radarr.DownloadClient.DownloadClientPneumaticArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientPneumatic(\"example\", DownloadClientPneumaticArgs.builder()        \n            .enable(true)\n            .name(\"Example\")\n            .nzbFolder(\"/nzb/\")\n            .priority(1)\n            .strmFolder(\"/strm/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientPneumatic\n    properties:\n      enable: true\n      name: Example\n      nzbFolder: /nzb/\n      priority: 1\n      strmFolder: /strm/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientPneumatic:DownloadClientPneumatic example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enable",
                "name",
                "nzbFolder",
                "priority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "strmFolder",
                "tags"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "name",
                "nzbFolder",
                "strmFolder"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientPneumatic resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "nzbFolder": {
                        "type": "string",
                        "description": "NZB folder.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "strmFolder": {
                        "type": "string",
                        "description": "STRM folder.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientQbittorrent:DownloadClientQbittorrent": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client qBittorrent resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [qBittorrent](https://wiki.servarr.com/radarr/supported#qbittorrent).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientQbittorrent(\"example\", {\n    enable: true,\n    firstAndLast: true,\n    host: \"qbittorrent\",\n    movieCategory: \"tv-radarr\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/qbittorrent/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientQbittorrent(\"example\",\n    enable=True,\n    first_and_last=True,\n    host=\"qbittorrent\",\n    movie_category=\"tv-radarr\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/qbittorrent/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientQbittorrent(\"example\", new()\n    {\n        Enable = true,\n        FirstAndLast = true,\n        Host = \"qbittorrent\",\n        MovieCategory = \"tv-radarr\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/qbittorrent/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientQbittorrent(ctx, \"example\", \u0026DownloadClient.DownloadClientQbittorrentArgs{\n\t\t\tEnable:        pulumi.Bool(true),\n\t\t\tFirstAndLast:  pulumi.Bool(true),\n\t\t\tHost:          pulumi.String(\"qbittorrent\"),\n\t\t\tMovieCategory: pulumi.String(\"tv-radarr\"),\n\t\t\tName:          pulumi.String(\"Example\"),\n\t\t\tPort:          pulumi.Int(9091),\n\t\t\tPriority:      pulumi.Int(1),\n\t\t\tUrlBase:       pulumi.String(\"/qbittorrent/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientQbittorrent;\nimport com.pulumi.radarr.DownloadClient.DownloadClientQbittorrentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientQbittorrent(\"example\", DownloadClientQbittorrentArgs.builder()        \n            .enable(true)\n            .firstAndLast(true)\n            .host(\"qbittorrent\")\n            .movieCategory(\"tv-radarr\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/qbittorrent/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientQbittorrent\n    properties:\n      enable: true\n      firstAndLast: true\n      host: qbittorrent\n      movieCategory: tv-radarr\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /qbittorrent/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientQbittorrent:DownloadClientQbittorrent example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "enable",
                "firstAndLast",
                "host",
                "initialState",
                "movieCategory",
                "movieDirectory",
                "movieImportedCategory",
                "name",
                "olderMoviePriority",
                "password",
                "port",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "sequentialOrder",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientQbittorrent resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "firstAndLast": {
                        "type": "boolean",
                        "description": "First and last flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "initialState": {
                        "type": "integer",
                        "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "movieImportedCategory": {
                        "type": "string",
                        "description": "Movie imported category.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "sequentialOrder": {
                        "type": "boolean",
                        "description": "Sequential order flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientRtorrent:DownloadClientRtorrent": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client RTorrent resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [RTorrent](https://wiki.servarr.com/radarr/supported#rtorrent).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientRtorrent(\"example\", {\n    enable: true,\n    host: \"rtorrent\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/rtorrent/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientRtorrent(\"example\",\n    enable=True,\n    host=\"rtorrent\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/rtorrent/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientRtorrent(\"example\", new()\n    {\n        Enable = true,\n        Host = \"rtorrent\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/rtorrent/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientRtorrent(ctx, \"example\", \u0026DownloadClient.DownloadClientRtorrentArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"rtorrent\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/rtorrent/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientRtorrent;\nimport com.pulumi.radarr.DownloadClient.DownloadClientRtorrentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientRtorrent(\"example\", DownloadClientRtorrentArgs.builder()        \n            .enable(true)\n            .host(\"rtorrent\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/rtorrent/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientRtorrent\n    properties:\n      enable: true\n      host: rtorrent\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /rtorrent/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientRtorrent:DownloadClientRtorrent example 1\n```\n\n ",
            "properties": {
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addStopped",
                "enable",
                "host",
                "movieCategory",
                "movieDirectory",
                "movieImportedCategory",
                "name",
                "olderMoviePriority",
                "password",
                "port",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientRtorrent resources.\n",
                "properties": {
                    "addStopped": {
                        "type": "boolean",
                        "description": "Add stopped flag.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "movieImportedCategory": {
                        "type": "string",
                        "description": "Movie imported category.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientSabnzbd:DownloadClientSabnzbd": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Sabnzbd resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Sabnzbd](https://wiki.servarr.com/radarr/supported#sabnzbd).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientSabnzbd(\"example\", {\n    apiKey: \"test\",\n    enable: true,\n    host: \"sabnzbd\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/sabnzbd/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientSabnzbd(\"example\",\n    api_key=\"test\",\n    enable=True,\n    host=\"sabnzbd\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/sabnzbd/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientSabnzbd(\"example\", new()\n    {\n        ApiKey = \"test\",\n        Enable = true,\n        Host = \"sabnzbd\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/sabnzbd/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientSabnzbd(ctx, \"example\", \u0026DownloadClient.DownloadClientSabnzbdArgs{\n\t\t\tApiKey:   pulumi.String(\"test\"),\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"sabnzbd\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/sabnzbd/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientSabnzbd;\nimport com.pulumi.radarr.DownloadClient.DownloadClientSabnzbdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientSabnzbd(\"example\", DownloadClientSabnzbdArgs.builder()        \n            .apiKey(\"test\")\n            .enable(true)\n            .host(\"sabnzbd\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/sabnzbd/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientSabnzbd\n    properties:\n      apiKey: test\n      enable: true\n      host: sabnzbd\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /sabnzbd/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientSabnzbd:DownloadClientSabnzbd example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "apiKey",
                "enable",
                "host",
                "movieCategory",
                "name",
                "olderMoviePriority",
                "password",
                "port",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientSabnzbd resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientTorrentBlackhole:DownloadClientTorrentBlackhole": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Torrent Blackhole resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [TorrentBlackhole](https://wiki.servarr.com/radarr/supported#torrentblackhole).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientTorrentBlackhole(\"example\", {\n    enable: true,\n    magnetFileExtension: \".magnet\",\n    name: \"Example\",\n    priority: 1,\n    torrentFolder: \"/torrent/\",\n    watchFolder: \"/watch/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientTorrentBlackhole(\"example\",\n    enable=True,\n    magnet_file_extension=\".magnet\",\n    name=\"Example\",\n    priority=1,\n    torrent_folder=\"/torrent/\",\n    watch_folder=\"/watch/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientTorrentBlackhole(\"example\", new()\n    {\n        Enable = true,\n        MagnetFileExtension = \".magnet\",\n        Name = \"Example\",\n        Priority = 1,\n        TorrentFolder = \"/torrent/\",\n        WatchFolder = \"/watch/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientTorrentBlackhole(ctx, \"example\", \u0026DownloadClient.DownloadClientTorrentBlackholeArgs{\n\t\t\tEnable:              pulumi.Bool(true),\n\t\t\tMagnetFileExtension: pulumi.String(\".magnet\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tPriority:            pulumi.Int(1),\n\t\t\tTorrentFolder:       pulumi.String(\"/torrent/\"),\n\t\t\tWatchFolder:         pulumi.String(\"/watch/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientTorrentBlackhole;\nimport com.pulumi.radarr.DownloadClient.DownloadClientTorrentBlackholeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientTorrentBlackhole(\"example\", DownloadClientTorrentBlackholeArgs.builder()        \n            .enable(true)\n            .magnetFileExtension(\".magnet\")\n            .name(\"Example\")\n            .priority(1)\n            .torrentFolder(\"/torrent/\")\n            .watchFolder(\"/watch/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientTorrentBlackhole\n    properties:\n      enable: true\n      magnetFileExtension: .magnet\n      name: Example\n      priority: 1\n      torrentFolder: /torrent/\n      watchFolder: /watch/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientTorrentBlackhole:DownloadClientTorrentBlackhole example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "required": [
                "enable",
                "magnetFileExtension",
                "name",
                "priority",
                "readOnly",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "saveMagnetFiles",
                "tags",
                "torrentFolder",
                "watchFolder"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "requiredInputs": [
                "name",
                "torrentFolder",
                "watchFolder"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientTorrentBlackhole resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "magnetFileExtension": {
                        "type": "string",
                        "description": "Magnet file extension.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read only flag.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "saveMagnetFiles": {
                        "type": "boolean",
                        "description": "Save magnet files flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentFolder": {
                        "type": "string",
                        "description": "Torrent folder.\n"
                    },
                    "watchFolder": {
                        "type": "string",
                        "description": "Watch folder flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientTorrentDownloadStation:DownloadClientTorrentDownloadStation": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client TorrentDownloadStation resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [TorrentDownloadStation](https://wiki.servarr.com/radarr/supported#torrentdownloadstation).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientTorrentDownloadStation(\"example\", {\n    enable: true,\n    host: \"downloadstation\",\n    name: \"Example\",\n    port: 5000,\n    priority: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientTorrentDownloadStation(\"example\",\n    enable=True,\n    host=\"downloadstation\",\n    name=\"Example\",\n    port=5000,\n    priority=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientTorrentDownloadStation(\"example\", new()\n    {\n        Enable = true,\n        Host = \"downloadstation\",\n        Name = \"Example\",\n        Port = 5000,\n        Priority = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientTorrentDownloadStation(ctx, \"example\", \u0026DownloadClient.DownloadClientTorrentDownloadStationArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"downloadstation\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(5000),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientTorrentDownloadStation;\nimport com.pulumi.radarr.DownloadClient.DownloadClientTorrentDownloadStationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientTorrentDownloadStation(\"example\", DownloadClientTorrentDownloadStationArgs.builder()        \n            .enable(true)\n            .host(\"downloadstation\")\n            .name(\"Example\")\n            .port(5000)\n            .priority(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientTorrentDownloadStation\n    properties:\n      enable: true\n      host: downloadstation\n      name: Example\n      port: 5000\n      priority: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientTorrentDownloadStation:DownloadClientTorrentDownloadStation example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "enable",
                "host",
                "movieCategory",
                "movieDirectory",
                "name",
                "password",
                "port",
                "priority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientTorrentDownloadStation resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientTransmission:DownloadClientTransmission": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Transmission resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Transmission](https://wiki.servarr.com/radarr/supported#transmission).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientTransmission(\"example\", {\n    enable: true,\n    host: \"transmission\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/transmission/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientTransmission(\"example\",\n    enable=True,\n    host=\"transmission\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/transmission/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientTransmission(\"example\", new()\n    {\n        Enable = true,\n        Host = \"transmission\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/transmission/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientTransmission(ctx, \"example\", \u0026DownloadClient.DownloadClientTransmissionArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"transmission\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/transmission/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientTransmission;\nimport com.pulumi.radarr.DownloadClient.DownloadClientTransmissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientTransmission(\"example\", DownloadClientTransmissionArgs.builder()        \n            .enable(true)\n            .host(\"transmission\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/transmission/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientTransmission\n    properties:\n      enable: true\n      host: transmission\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /transmission/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientTransmission:DownloadClientTransmission example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addPaused",
                "enable",
                "host",
                "movieCategory",
                "movieDirectory",
                "name",
                "olderMoviePriority",
                "password",
                "port",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientTransmission resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientUsenetBlackhole:DownloadClientUsenetBlackhole": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Usenet Blackhole resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [UsenetBlackhole](https://wiki.servarr.com/radarr/supported#usenetblackhole).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientUsenetBlackhole(\"example\", {\n    enable: true,\n    name: \"Example\",\n    nzbFolder: \"/nzb/\",\n    priority: 1,\n    watchFolder: \"/watch/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientUsenetBlackhole(\"example\",\n    enable=True,\n    name=\"Example\",\n    nzb_folder=\"/nzb/\",\n    priority=1,\n    watch_folder=\"/watch/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientUsenetBlackhole(\"example\", new()\n    {\n        Enable = true,\n        Name = \"Example\",\n        NzbFolder = \"/nzb/\",\n        Priority = 1,\n        WatchFolder = \"/watch/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientUsenetBlackhole(ctx, \"example\", \u0026DownloadClient.DownloadClientUsenetBlackholeArgs{\n\t\t\tEnable:      pulumi.Bool(true),\n\t\t\tName:        pulumi.String(\"Example\"),\n\t\t\tNzbFolder:   pulumi.String(\"/nzb/\"),\n\t\t\tPriority:    pulumi.Int(1),\n\t\t\tWatchFolder: pulumi.String(\"/watch/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientUsenetBlackhole;\nimport com.pulumi.radarr.DownloadClient.DownloadClientUsenetBlackholeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientUsenetBlackhole(\"example\", DownloadClientUsenetBlackholeArgs.builder()        \n            .enable(true)\n            .name(\"Example\")\n            .nzbFolder(\"/nzb/\")\n            .priority(1)\n            .watchFolder(\"/watch/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientUsenetBlackhole\n    properties:\n      enable: true\n      name: Example\n      nzbFolder: /nzb/\n      priority: 1\n      watchFolder: /watch/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientUsenetBlackhole:DownloadClientUsenetBlackhole example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "Usenet folder.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "required": [
                "enable",
                "name",
                "nzbFolder",
                "priority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "watchFolder"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "Usenet folder.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "requiredInputs": [
                "name",
                "nzbFolder",
                "watchFolder"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientUsenetBlackhole resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "nzbFolder": {
                        "type": "string",
                        "description": "Usenet folder.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "watchFolder": {
                        "type": "string",
                        "description": "Watch folder flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientUsenetDownloadStation:DownloadClientUsenetDownloadStation": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client UsenetDownloadStation resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [UsenetDownloadStation](https://wiki.servarr.com/radarr/supported#usenetdownloadstation).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientUsenetDownloadStation(\"example\", {\n    enable: true,\n    host: \"downloadstation\",\n    name: \"Example\",\n    port: 5000,\n    priority: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientUsenetDownloadStation(\"example\",\n    enable=True,\n    host=\"downloadstation\",\n    name=\"Example\",\n    port=5000,\n    priority=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientUsenetDownloadStation(\"example\", new()\n    {\n        Enable = true,\n        Host = \"downloadstation\",\n        Name = \"Example\",\n        Port = 5000,\n        Priority = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientUsenetDownloadStation(ctx, \"example\", \u0026DownloadClient.DownloadClientUsenetDownloadStationArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"downloadstation\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(5000),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientUsenetDownloadStation;\nimport com.pulumi.radarr.DownloadClient.DownloadClientUsenetDownloadStationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientUsenetDownloadStation(\"example\", DownloadClientUsenetDownloadStationArgs.builder()        \n            .enable(true)\n            .host(\"downloadstation\")\n            .name(\"Example\")\n            .port(5000)\n            .priority(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientUsenetDownloadStation\n    properties:\n      enable: true\n      host: downloadstation\n      name: Example\n      port: 5000\n      priority: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientUsenetDownloadStation:DownloadClientUsenetDownloadStation example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "enable",
                "host",
                "movieCategory",
                "movieDirectory",
                "name",
                "password",
                "port",
                "priority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientUsenetDownloadStation resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientUtorrent:DownloadClientUtorrent": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client uTorrent resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [uTorrent](https://wiki.servarr.com/radarr/supported#utorrent).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientUtorrent(\"example\", {\n    enable: true,\n    host: \"utorrent\",\n    movieCategory: \"tv-radarr\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/utorrent/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientUtorrent(\"example\",\n    enable=True,\n    host=\"utorrent\",\n    movie_category=\"tv-radarr\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/utorrent/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientUtorrent(\"example\", new()\n    {\n        Enable = true,\n        Host = \"utorrent\",\n        MovieCategory = \"tv-radarr\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/utorrent/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientUtorrent(ctx, \"example\", \u0026DownloadClient.DownloadClientUtorrentArgs{\n\t\t\tEnable:        pulumi.Bool(true),\n\t\t\tHost:          pulumi.String(\"utorrent\"),\n\t\t\tMovieCategory: pulumi.String(\"tv-radarr\"),\n\t\t\tName:          pulumi.String(\"Example\"),\n\t\t\tPort:          pulumi.Int(9091),\n\t\t\tPriority:      pulumi.Int(1),\n\t\t\tUrlBase:       pulumi.String(\"/utorrent/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientUtorrent;\nimport com.pulumi.radarr.DownloadClient.DownloadClientUtorrentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientUtorrent(\"example\", DownloadClientUtorrentArgs.builder()        \n            .enable(true)\n            .host(\"utorrent\")\n            .movieCategory(\"tv-radarr\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/utorrent/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientUtorrent\n    properties:\n      enable: true\n      host: utorrent\n      movieCategory: tv-radarr\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /utorrent/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientUtorrent:DownloadClientUtorrent example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "enable",
                "host",
                "intialState",
                "movieCategory",
                "movieDirectory",
                "movieImportedCategory",
                "name",
                "olderMoviePriority",
                "password",
                "port",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "movieImportedCategory": {
                    "type": "string",
                    "description": "Movie imported category.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientUtorrent resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "intialState": {
                        "type": "integer",
                        "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "movieImportedCategory": {
                        "type": "string",
                        "description": "Movie imported category.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/downloadClientVuze:DownloadClientVuze": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Vuze resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/radarr/settings#download-clients) and [Vuze](https://wiki.servarr.com/radarr/supported#vuze).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.DownloadClientVuze(\"example\", {\n    enable: true,\n    host: \"vuze\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/vuze/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.DownloadClientVuze(\"example\",\n    enable=True,\n    host=\"vuze\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/vuze/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.DownloadClientVuze(\"example\", new()\n    {\n        Enable = true,\n        Host = \"vuze\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/vuze/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewDownloadClientVuze(ctx, \"example\", \u0026DownloadClient.DownloadClientVuzeArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"vuze\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/vuze/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientVuze;\nimport com.pulumi.radarr.DownloadClient.DownloadClientVuzeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientVuze(\"example\", DownloadClientVuzeArgs.builder()        \n            .enable(true)\n            .host(\"vuze\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/vuze/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:DownloadClientVuze\n    properties:\n      enable: true\n      host: vuze\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /vuze/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/downloadClientVuze:DownloadClientVuze example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addPaused",
                "enable",
                "host",
                "movieCategory",
                "movieDirectory",
                "name",
                "olderMoviePriority",
                "password",
                "port",
                "priority",
                "recentMoviePriority",
                "removeCompletedDownloads",
                "removeFailedDownloads",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "movieCategory": {
                    "type": "string",
                    "description": "Movie category.\n"
                },
                "movieDirectory": {
                    "type": "string",
                    "description": "Movie directory.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderMoviePriority": {
                    "type": "integer",
                    "description": "Older Movie priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentMoviePriority": {
                    "type": "integer",
                    "description": "Recent Movie priority. `0` Last, `1` First.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientVuze resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:DownloadClient/remotePathMapping:RemotePathMapping": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eRemote Path Mapping resource.\nFor more information refer to [Remote Path Mapping](https://wiki.servarr.com/radarr/settings#remote-path-mappings) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.downloadclient.RemotePathMapping(\"example\", {\n    host: \"www.transmission.com\",\n    localPath: \"/transmission-download/\",\n    remotePath: \"/download/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.download_client.RemotePathMapping(\"example\",\n    host=\"www.transmission.com\",\n    local_path=\"/transmission-download/\",\n    remote_path=\"/download/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.DownloadClient.RemotePathMapping(\"example\", new()\n    {\n        Host = \"www.transmission.com\",\n        LocalPath = \"/transmission-download/\",\n        RemotePath = \"/download/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.NewRemotePathMapping(ctx, \"example\", \u0026DownloadClient.RemotePathMappingArgs{\n\t\t\tHost:       pulumi.String(\"www.transmission.com\"),\n\t\t\tLocalPath:  pulumi.String(\"/transmission-download/\"),\n\t\t\tRemotePath: pulumi.String(\"/download/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.RemotePathMapping;\nimport com.pulumi.radarr.DownloadClient.RemotePathMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RemotePathMapping(\"example\", RemotePathMappingArgs.builder()        \n            .host(\"www.transmission.com\")\n            .localPath(\"/transmission-download/\")\n            .remotePath(\"/download/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:DownloadClient:RemotePathMapping\n    properties:\n      host: www.transmission.com\n      localPath: /transmission-download/\n      remotePath: /download/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:DownloadClient/remotePathMapping:RemotePathMapping example 10\n```\n\n ",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Download Client host.\n"
                },
                "localPath": {
                    "type": "string",
                    "description": "Local path.\n"
                },
                "remotePath": {
                    "type": "string",
                    "description": "Download Client remote path.\n"
                }
            },
            "required": [
                "host",
                "localPath",
                "remotePath"
            ],
            "inputProperties": {
                "host": {
                    "type": "string",
                    "description": "Download Client host.\n"
                },
                "localPath": {
                    "type": "string",
                    "description": "Local path.\n"
                },
                "remotePath": {
                    "type": "string",
                    "description": "Download Client remote path.\n"
                }
            },
            "requiredInputs": [
                "host",
                "localPath",
                "remotePath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemotePathMapping resources.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "Download Client host.\n"
                    },
                    "localPath": {
                        "type": "string",
                        "description": "Local path.\n"
                    },
                    "remotePath": {
                        "type": "string",
                        "description": "Download Client remote path.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importList:ImportList": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eGeneric Import List resource. When possible use a specific resource instead.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportList(\"example\", {\n    enabled: false,\n    enableAuto: true,\n    searchOnAdd: false,\n    monitor: \"movieOnly\",\n    minimumAvailability: \"tba\",\n    listType: \"program\",\n    rootFolderPath: radarr_root_folder.example.path,\n    qualityProfileId: radarr_quality_profile.example.id,\n    name: \"Example\",\n    implementation: \"RadarrImport\",\n    configContract: \"RadarrSettings\",\n    tags: [\n        1,\n        2,\n    ],\n    tagIds: [\n        1,\n        2,\n    ],\n    profileIds: [1],\n    baseUrl: \"http://127.0.0.1:8686\",\n    apiKey: \"APIKey\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportList(\"example\",\n    enabled=False,\n    enable_auto=True,\n    search_on_add=False,\n    monitor=\"movieOnly\",\n    minimum_availability=\"tba\",\n    list_type=\"program\",\n    root_folder_path=radarr_root_folder[\"example\"][\"path\"],\n    quality_profile_id=radarr_quality_profile[\"example\"][\"id\"],\n    name=\"Example\",\n    implementation=\"RadarrImport\",\n    config_contract=\"RadarrSettings\",\n    tags=[\n        1,\n        2,\n    ],\n    tag_ids=[\n        1,\n        2,\n    ],\n    profile_ids=[1],\n    base_url=\"http://127.0.0.1:8686\",\n    api_key=\"APIKey\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportList(\"example\", new()\n    {\n        Enabled = false,\n        EnableAuto = true,\n        SearchOnAdd = false,\n        Monitor = \"movieOnly\",\n        MinimumAvailability = \"tba\",\n        ListType = \"program\",\n        RootFolderPath = radarr_root_folder.Example.Path,\n        QualityProfileId = radarr_quality_profile.Example.Id,\n        Name = \"Example\",\n        Implementation = \"RadarrImport\",\n        ConfigContract = \"RadarrSettings\",\n        Tags = new[]\n        {\n            1,\n            2,\n        },\n        TagIds = new[]\n        {\n            1,\n            2,\n        },\n        ProfileIds = new[]\n        {\n            1,\n        },\n        BaseUrl = \"http://127.0.0.1:8686\",\n        ApiKey = \"APIKey\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportList(ctx, \"example\", \u0026ImportLists.ImportListArgs{\n\t\t\tEnabled:             pulumi.Bool(false),\n\t\t\tEnableAuto:          pulumi.Bool(true),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t\tMonitor:             pulumi.String(\"movieOnly\"),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tListType:            pulumi.String(\"program\"),\n\t\t\tRootFolderPath:      pulumi.Any(radarr_root_folder.Example.Path),\n\t\t\tQualityProfileId:    pulumi.Any(radarr_quality_profile.Example.Id),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tImplementation:      pulumi.String(\"RadarrImport\"),\n\t\t\tConfigContract:      pulumi.String(\"RadarrSettings\"),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t\tTagIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t\tProfileIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t},\n\t\t\tBaseUrl: pulumi.String(\"http://127.0.0.1:8686\"),\n\t\t\tApiKey:  pulumi.String(\"APIKey\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportList;\nimport com.pulumi.radarr.ImportLists.ImportListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportList(\"example\", ImportListArgs.builder()        \n            .enabled(false)\n            .enableAuto(true)\n            .searchOnAdd(false)\n            .monitor(\"movieOnly\")\n            .minimumAvailability(\"tba\")\n            .listType(\"program\")\n            .rootFolderPath(radarr_root_folder.example().path())\n            .qualityProfileId(radarr_quality_profile.example().id())\n            .name(\"Example\")\n            .implementation(\"RadarrImport\")\n            .configContract(\"RadarrSettings\")\n            .tags(            \n                1,\n                2)\n            .tagIds(            \n                1,\n                2)\n            .profileIds(1)\n            .baseUrl(\"http://127.0.0.1:8686\")\n            .apiKey(\"APIKey\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportList\n    properties:\n      enabled: false\n      enableAuto: true\n      searchOnAdd: false\n      monitor: movieOnly\n      minimumAvailability: tba\n      listType: program\n      rootFolderPath: ${radarr_root_folder.example.path}\n      qualityProfileId: ${radarr_quality_profile.example.id}\n      name: Example\n      implementation: RadarrImport\n      configContract: RadarrSettings\n      tags:\n        - 1\n        - 2\n      tagIds:\n        - 1\n        - 2\n      profileIds:\n        - 1\n      baseUrl: http://127.0.0.1:8686\n      apiKey: APIKey\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importList:ImportList example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accountId": {
                    "type": "string",
                    "description": "Account ID.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "cast": {
                    "type": "boolean",
                    "description": "Include cast.\n"
                },
                "castDirector": {
                    "type": "boolean",
                    "description": "Include cast director.\n"
                },
                "castProducer": {
                    "type": "boolean",
                    "description": "Include cast producer.\n"
                },
                "castSound": {
                    "type": "boolean",
                    "description": "Include cast sound.\n"
                },
                "castWriting": {
                    "type": "boolean",
                    "description": "Include cast writing.\n"
                },
                "certification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "companyId": {
                    "type": "string",
                    "description": "Company ID.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "ImportList configuration template.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "excludeGenreIds": {
                    "type": "string",
                    "description": "Exclude genre IDs.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "genres": {
                    "type": "string",
                    "description": "Genres.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "ImportList implementation name.\n"
                },
                "includeGenreIds": {
                    "type": "string",
                    "description": "Include genre IDs.\n"
                },
                "keywordId": {
                    "type": "string",
                    "description": "Keyword ID.\n"
                },
                "languageCode": {
                    "type": "integer",
                    "description": "Language code.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "limit.\n"
                },
                "link": {
                    "type": "string",
                    "description": "Link.\n"
                },
                "listId": {
                    "type": "string",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "listType": {
                    "type": "string",
                    "description": "List type.\n"
                },
                "listname": {
                    "type": "string",
                    "description": "List name.\n"
                },
                "minScore": {
                    "type": "integer",
                    "description": "Min score.\n"
                },
                "minVoteAverage": {
                    "type": "string",
                    "description": "Min vote average.\n"
                },
                "minVotes": {
                    "type": "string",
                    "description": "Min votes.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "onlyActive": {
                    "type": "boolean",
                    "description": "Only active.\n"
                },
                "personId": {
                    "type": "string",
                    "description": "Person ID.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rating": {
                    "type": "string",
                    "description": "Rating.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "source": {
                    "type": "integer",
                    "description": "Source.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "tmdbCertification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "tmdbListType": {
                    "type": "integer",
                    "description": "TMDB list type.\n"
                },
                "traktAdditionalParameters": {
                    "type": "string",
                    "description": "Trakt additional parameters.\n"
                },
                "traktListType": {
                    "type": "integer",
                    "description": "Trakt list type.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "userListType": {
                    "type": "integer",
                    "description": "User list type.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "years": {
                    "type": "string",
                    "description": "Years.\n"
                }
            },
            "required": [
                "accessToken",
                "accountId",
                "apiKey",
                "authUser",
                "baseUrl",
                "cast",
                "castDirector",
                "castProducer",
                "castSound",
                "castWriting",
                "certification",
                "companyId",
                "configContract",
                "enableAuto",
                "enabled",
                "excludeGenreIds",
                "expires",
                "genres",
                "implementation",
                "includeGenreIds",
                "keywordId",
                "languageCode",
                "limit",
                "link",
                "listId",
                "listOrder",
                "listType",
                "listname",
                "minScore",
                "minVoteAverage",
                "minVotes",
                "minimumAvailability",
                "monitor",
                "name",
                "onlyActive",
                "personId",
                "port",
                "profileIds",
                "qualityProfileId",
                "rating",
                "refreshToken",
                "rootFolderPath",
                "searchOnAdd",
                "source",
                "tagIds",
                "tags",
                "tmdbCertification",
                "tmdbListType",
                "traktAdditionalParameters",
                "traktListType",
                "url",
                "urlBase",
                "userListType",
                "username",
                "years"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accountId": {
                    "type": "string",
                    "description": "Account ID.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "cast": {
                    "type": "boolean",
                    "description": "Include cast.\n"
                },
                "castDirector": {
                    "type": "boolean",
                    "description": "Include cast director.\n"
                },
                "castProducer": {
                    "type": "boolean",
                    "description": "Include cast producer.\n"
                },
                "castSound": {
                    "type": "boolean",
                    "description": "Include cast sound.\n"
                },
                "castWriting": {
                    "type": "boolean",
                    "description": "Include cast writing.\n"
                },
                "certification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "companyId": {
                    "type": "string",
                    "description": "Company ID.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "ImportList configuration template.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "excludeGenreIds": {
                    "type": "string",
                    "description": "Exclude genre IDs.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "genres": {
                    "type": "string",
                    "description": "Genres.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "ImportList implementation name.\n"
                },
                "includeGenreIds": {
                    "type": "string",
                    "description": "Include genre IDs.\n"
                },
                "keywordId": {
                    "type": "string",
                    "description": "Keyword ID.\n"
                },
                "languageCode": {
                    "type": "integer",
                    "description": "Language code.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "limit.\n"
                },
                "link": {
                    "type": "string",
                    "description": "Link.\n"
                },
                "listId": {
                    "type": "string",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "listType": {
                    "type": "string",
                    "description": "List type.\n"
                },
                "listname": {
                    "type": "string",
                    "description": "List name.\n"
                },
                "minScore": {
                    "type": "integer",
                    "description": "Min score.\n"
                },
                "minVoteAverage": {
                    "type": "string",
                    "description": "Min vote average.\n"
                },
                "minVotes": {
                    "type": "string",
                    "description": "Min votes.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "onlyActive": {
                    "type": "boolean",
                    "description": "Only active.\n"
                },
                "personId": {
                    "type": "string",
                    "description": "Person ID.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rating": {
                    "type": "string",
                    "description": "Rating.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "source": {
                    "type": "integer",
                    "description": "Source.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "tmdbCertification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "tmdbListType": {
                    "type": "integer",
                    "description": "TMDB list type.\n"
                },
                "traktAdditionalParameters": {
                    "type": "string",
                    "description": "Trakt additional parameters.\n"
                },
                "traktListType": {
                    "type": "integer",
                    "description": "Trakt list type.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "userListType": {
                    "type": "integer",
                    "description": "User list type.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "years": {
                    "type": "string",
                    "description": "Years.\n"
                }
            },
            "requiredInputs": [
                "configContract",
                "listType",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportList resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accountId": {
                        "type": "string",
                        "description": "Account ID.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "cast": {
                        "type": "boolean",
                        "description": "Include cast.\n"
                    },
                    "castDirector": {
                        "type": "boolean",
                        "description": "Include cast director.\n"
                    },
                    "castProducer": {
                        "type": "boolean",
                        "description": "Include cast producer.\n"
                    },
                    "castSound": {
                        "type": "boolean",
                        "description": "Include cast sound.\n"
                    },
                    "castWriting": {
                        "type": "boolean",
                        "description": "Include cast writing.\n"
                    },
                    "certification": {
                        "type": "string",
                        "description": "Certification.\n"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "Company ID.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "ImportList configuration template.\n"
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "excludeGenreIds": {
                        "type": "string",
                        "description": "Exclude genre IDs.\n"
                    },
                    "expires": {
                        "type": "string",
                        "description": "Expires.\n"
                    },
                    "genres": {
                        "type": "string",
                        "description": "Genres.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "ImportList implementation name.\n"
                    },
                    "includeGenreIds": {
                        "type": "string",
                        "description": "Include genre IDs.\n"
                    },
                    "keywordId": {
                        "type": "string",
                        "description": "Keyword ID.\n"
                    },
                    "languageCode": {
                        "type": "integer",
                        "description": "Language code.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "limit.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "Link.\n"
                    },
                    "listId": {
                        "type": "string",
                        "description": "List ID.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "listType": {
                        "type": "string",
                        "description": "List type.\n"
                    },
                    "listname": {
                        "type": "string",
                        "description": "List name.\n"
                    },
                    "minScore": {
                        "type": "integer",
                        "description": "Min score.\n"
                    },
                    "minVoteAverage": {
                        "type": "string",
                        "description": "Min vote average.\n"
                    },
                    "minVotes": {
                        "type": "string",
                        "description": "Min votes.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "onlyActive": {
                        "type": "boolean",
                        "description": "Only active.\n"
                    },
                    "personId": {
                        "type": "string",
                        "description": "Person ID.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "profileIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Profile IDs.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rating": {
                        "type": "string",
                        "description": "Rating.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Refresh token.\n",
                        "secret": true
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "source": {
                        "type": "integer",
                        "description": "Source.\n"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Tag IDs.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "tmdbCertification": {
                        "type": "string",
                        "description": "Certification.\n"
                    },
                    "tmdbListType": {
                        "type": "integer",
                        "description": "TMDB list type.\n"
                    },
                    "traktAdditionalParameters": {
                        "type": "string",
                        "description": "Trakt additional parameters.\n"
                    },
                    "traktListType": {
                        "type": "integer",
                        "description": "Trakt list type.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "userListType": {
                        "type": "integer",
                        "description": "User list type.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "years": {
                        "type": "string",
                        "description": "Years.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListConfig:ImportListConfig": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Config resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#completed-download-handling) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListConfig(\"example\", {\n    syncInterval: 24,\n    syncLevel: \"logOnly\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListConfig(\"example\",\n    sync_interval=24,\n    sync_level=\"logOnly\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListConfig(\"example\", new()\n    {\n        SyncInterval = 24,\n        SyncLevel = \"logOnly\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListConfig(ctx, \"example\", \u0026ImportLists.ImportListConfigArgs{\n\t\t\tSyncInterval: pulumi.Int(24),\n\t\t\tSyncLevel:    pulumi.String(\"logOnly\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListConfig;\nimport com.pulumi.radarr.ImportLists.ImportListConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListConfig(\"example\", ImportListConfigArgs.builder()        \n            .syncInterval(24)\n            .syncLevel(\"logOnly\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListConfig\n    properties:\n      syncInterval: 24\n      syncLevel: logOnly\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import radarr:ImportLists/importListConfig:ImportListConfig example\n```\n\n ",
            "properties": {
                "syncInterval": {
                    "type": "integer",
                    "description": "List Update Interval.\n"
                },
                "syncLevel": {
                    "type": "string",
                    "description": "Clean library level.\n"
                }
            },
            "required": [
                "syncInterval",
                "syncLevel"
            ],
            "inputProperties": {
                "syncInterval": {
                    "type": "integer",
                    "description": "List Update Interval.\n"
                },
                "syncLevel": {
                    "type": "string",
                    "description": "Clean library level.\n"
                }
            },
            "requiredInputs": [
                "syncInterval",
                "syncLevel"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListConfig resources.\n",
                "properties": {
                    "syncInterval": {
                        "type": "integer",
                        "description": "List Update Interval.\n"
                    },
                    "syncLevel": {
                        "type": "string",
                        "description": "Clean library level.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListCouchPotato:ImportListCouchPotato": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Couch Potato resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [Couch Potato](https://wiki.servarr.com/radarr/supported#couchpotatoimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListCouchPotato(\"example\", {\n    apiKey: \"APIKey\",\n    enableAuto: false,\n    enabled: true,\n    link: \"http://localhost\",\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    onlyActive: true,\n    port: 5050,\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListCouchPotato(\"example\",\n    api_key=\"APIKey\",\n    enable_auto=False,\n    enabled=True,\n    link=\"http://localhost\",\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    only_active=True,\n    port=5050,\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListCouchPotato(\"example\", new()\n    {\n        ApiKey = \"APIKey\",\n        EnableAuto = false,\n        Enabled = true,\n        Link = \"http://localhost\",\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        OnlyActive = true,\n        Port = 5050,\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListCouchPotato(ctx, \"example\", \u0026ImportLists.ImportListCouchPotatoArgs{\n\t\t\tApiKey:              pulumi.String(\"APIKey\"),\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tLink:                pulumi.String(\"http://localhost\"),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tOnlyActive:          pulumi.Bool(true),\n\t\t\tPort:                pulumi.Int(5050),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListCouchPotato;\nimport com.pulumi.radarr.ImportLists.ImportListCouchPotatoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListCouchPotato(\"example\", ImportListCouchPotatoArgs.builder()        \n            .apiKey(\"APIKey\")\n            .enableAuto(false)\n            .enabled(true)\n            .link(\"http://localhost\")\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .onlyActive(true)\n            .port(5050)\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListCouchPotato\n    properties:\n      apiKey: APIKey\n      enableAuto: false\n      enabled: true\n      link: http://localhost\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      onlyActive: true\n      port: 5050\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListCouchPotato:ImportListCouchPotato example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "link": {
                    "type": "string",
                    "description": "Link.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "onlyActive": {
                    "type": "boolean",
                    "description": "Only active.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                }
            },
            "required": [
                "apiKey",
                "enableAuto",
                "enabled",
                "link",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "onlyActive",
                "port",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags",
                "urlBase"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "link": {
                    "type": "string",
                    "description": "Link.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "onlyActive": {
                    "type": "boolean",
                    "description": "Only active.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "link",
                "minimumAvailability",
                "monitor",
                "name",
                "onlyActive",
                "port",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListCouchPotato resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "Link.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "onlyActive": {
                        "type": "boolean",
                        "description": "Only active.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListCustom:ImportListCustom": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Custom resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [Custom List](https://wiki.servarr.com/radarr/supported#radarrlistimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListCustom(\"example\", {\n    enableAuto: false,\n    enabled: true,\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n    url: \"https://custom.video/your-list\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListCustom(\"example\",\n    enable_auto=False,\n    enabled=True,\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False,\n    url=\"https://custom.video/your-list\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListCustom(\"example\", new()\n    {\n        EnableAuto = false,\n        Enabled = true,\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n        Url = \"https://custom.video/your-list\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListCustom(ctx, \"example\", \u0026ImportLists.ImportListCustomArgs{\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t\tUrl:                 pulumi.String(\"https://custom.video/your-list\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListCustom;\nimport com.pulumi.radarr.ImportLists.ImportListCustomArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListCustom(\"example\", ImportListCustomArgs.builder()        \n            .enableAuto(false)\n            .enabled(true)\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .url(\"https://custom.video/your-list\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListCustom\n    properties:\n      enableAuto: false\n      enabled: true\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n      url: https://custom.video/your-list\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListCustom:ImportListCustom example 1\n```\n\n ",
            "properties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                }
            },
            "required": [
                "enableAuto",
                "enabled",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags",
                "url"
            ],
            "inputProperties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                }
            },
            "requiredInputs": [
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListCustom resources.\n",
                "properties": {
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListExclusion:ImportListExclusion": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Exclusion resource.\nFor more information refer to [ImportListExclusions](https://wiki.servarr.com/radarr/settings#list-exclusions) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListExclusion(\"example\", {\n    title: \"Gladiator\",\n    tmdbId: 172495,\n    year: 2000,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListExclusion(\"example\",\n    title=\"Gladiator\",\n    tmdb_id=172495,\n    year=2000)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListExclusion(\"example\", new()\n    {\n        Title = \"Gladiator\",\n        TmdbId = 172495,\n        Year = 2000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListExclusion(ctx, \"example\", \u0026ImportLists.ImportListExclusionArgs{\n\t\t\tTitle:  pulumi.String(\"Gladiator\"),\n\t\t\tTmdbId: pulumi.Int(172495),\n\t\t\tYear:   pulumi.Int(2000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListExclusion;\nimport com.pulumi.radarr.ImportLists.ImportListExclusionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListExclusion(\"example\", ImportListExclusionArgs.builder()        \n            .title(\"Gladiator\")\n            .tmdbId(172495)\n            .year(2000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListExclusion\n    properties:\n      title: Gladiator\n      tmdbId: 172495\n      year: 2000\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListExclusion:ImportListExclusion example 10\n```\n\n ",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Movie to be excluded.\n"
                },
                "tmdbId": {
                    "type": "integer",
                    "description": "Movie TMDB ID.\n"
                },
                "year": {
                    "type": "integer",
                    "description": "Year.\n"
                }
            },
            "required": [
                "title",
                "tmdbId",
                "year"
            ],
            "inputProperties": {
                "title": {
                    "type": "string",
                    "description": "Movie to be excluded.\n"
                },
                "tmdbId": {
                    "type": "integer",
                    "description": "Movie TMDB ID.\n"
                },
                "year": {
                    "type": "integer",
                    "description": "Year.\n"
                }
            },
            "requiredInputs": [
                "title",
                "tmdbId",
                "year"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListExclusion resources.\n",
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Movie to be excluded.\n"
                    },
                    "tmdbId": {
                        "type": "integer",
                        "description": "Movie TMDB ID.\n"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Year.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListImdb:ImportListImdb": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List IMDB resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [IMDB](https://wiki.servarr.com/radarr/supported#imdblistimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListImdb(\"example\", {\n    enableAuto: false,\n    enabled: true,\n    listId: \"ls12345678\",\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListImdb(\"example\",\n    enable_auto=False,\n    enabled=True,\n    list_id=\"ls12345678\",\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListImdb(\"example\", new()\n    {\n        EnableAuto = false,\n        Enabled = true,\n        ListId = \"ls12345678\",\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListImdb(ctx, \"example\", \u0026ImportLists.ImportListImdbArgs{\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tListId:              pulumi.String(\"ls12345678\"),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListImdb;\nimport com.pulumi.radarr.ImportLists.ImportListImdbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListImdb(\"example\", ImportListImdbArgs.builder()        \n            .enableAuto(false)\n            .enabled(true)\n            .listId(\"ls12345678\")\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListImdb\n    properties:\n      enableAuto: false\n      enabled: true\n      listId: ls12345678\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListImdb:ImportListImdb example 1\n```\n\n ",
            "properties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listId": {
                    "type": "string",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enableAuto",
                "enabled",
                "listId",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags"
            ],
            "inputProperties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listId": {
                    "type": "string",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "listId",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListImdb resources.\n",
                "properties": {
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "listId": {
                        "type": "string",
                        "description": "List ID.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListPlex:ImportListPlex": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Plex resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [Plex](https://wiki.servarr.com/radarr/supported#pleximport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListPlex(\"example\", {\n    accessToken: \"YourToken\",\n    enableAuto: false,\n    enabled: true,\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListPlex(\"example\",\n    access_token=\"YourToken\",\n    enable_auto=False,\n    enabled=True,\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListPlex(\"example\", new()\n    {\n        AccessToken = \"YourToken\",\n        EnableAuto = false,\n        Enabled = true,\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListPlex(ctx, \"example\", \u0026ImportLists.ImportListPlexArgs{\n\t\t\tAccessToken:         pulumi.String(\"YourToken\"),\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListPlex;\nimport com.pulumi.radarr.ImportLists.ImportListPlexArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListPlex(\"example\", ImportListPlexArgs.builder()        \n            .accessToken(\"YourToken\")\n            .enableAuto(false)\n            .enabled(true)\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListPlex\n    properties:\n      accessToken: YourToken\n      enableAuto: false\n      enabled: true\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListPlex:ImportListPlex example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "accessToken",
                "enableAuto",
                "enabled",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListPlex resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListRadarr:ImportListRadarr": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Radarr resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [Radarr](https://wiki.servarr.com/radarr/supported#radarrimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListRadarr(\"example\", {\n    apiKey: \"ExampleAPIKey\",\n    enableAuto: false,\n    enabled: true,\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    profileIds: [1],\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n    tagIds: [\n        1,\n        2,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListRadarr(\"example\",\n    api_key=\"ExampleAPIKey\",\n    enable_auto=False,\n    enabled=True,\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    profile_ids=[1],\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False,\n    tag_ids=[\n        1,\n        2,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListRadarr(\"example\", new()\n    {\n        ApiKey = \"ExampleAPIKey\",\n        EnableAuto = false,\n        Enabled = true,\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        ProfileIds = new[]\n        {\n            1,\n        },\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n        TagIds = new[]\n        {\n            1,\n            2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListRadarr(ctx, \"example\", \u0026ImportLists.ImportListRadarrArgs{\n\t\t\tApiKey:              pulumi.String(\"ExampleAPIKey\"),\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tProfileIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t},\n\t\t\tQualityProfileId: pulumi.Int(1),\n\t\t\tRootFolderPath:   pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:      pulumi.Bool(false),\n\t\t\tTagIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListRadarr;\nimport com.pulumi.radarr.ImportLists.ImportListRadarrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListRadarr(\"example\", ImportListRadarrArgs.builder()        \n            .apiKey(\"ExampleAPIKey\")\n            .enableAuto(false)\n            .enabled(true)\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .profileIds(1)\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .tagIds(            \n                1,\n                2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListRadarr\n    properties:\n      apiKey: ExampleAPIKey\n      enableAuto: false\n      enabled: true\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      profileIds:\n        - 1\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n      tagIds:\n        - 1\n        - 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListRadarr:ImportListRadarr example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "baseUrl",
                "enableAuto",
                "enabled",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "profileIds",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tagIds",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "baseUrl",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListRadarr resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "profileIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Profile IDs.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Tag IDs.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListRss:ImportListRss": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List RSS resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [RSS](https://wiki.servarr.com/radarr/supported#rssimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListRss(\"example\", {\n    enableAuto: false,\n    enabled: true,\n    link: \"https://rss.imdb.com/list/YOURLISTID\",\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListRss(\"example\",\n    enable_auto=False,\n    enabled=True,\n    link=\"https://rss.imdb.com/list/YOURLISTID\",\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListRss(\"example\", new()\n    {\n        EnableAuto = false,\n        Enabled = true,\n        Link = \"https://rss.imdb.com/list/YOURLISTID\",\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListRss(ctx, \"example\", \u0026ImportLists.ImportListRssArgs{\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tLink:                pulumi.String(\"https://rss.imdb.com/list/YOURLISTID\"),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListRss;\nimport com.pulumi.radarr.ImportLists.ImportListRssArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListRss(\"example\", ImportListRssArgs.builder()        \n            .enableAuto(false)\n            .enabled(true)\n            .link(\"https://rss.imdb.com/list/YOURLISTID\")\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListRss\n    properties:\n      enableAuto: false\n      enabled: true\n      link: https://rss.imdb.com/list/YOURLISTID\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListRss:ImportListRss example 1\n```\n\n ",
            "properties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "link": {
                    "type": "string",
                    "description": "Link.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enableAuto",
                "enabled",
                "link",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags"
            ],
            "inputProperties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "link": {
                    "type": "string",
                    "description": "Link.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "link",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListRss resources.\n",
                "properties": {
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "Link.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListStevenlu2:ImportListStevenlu2": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Stevenlu2 resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [Stevenlu2](https://wiki.servarr.com/radarr/supported#stevenlu2import).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListStevenlu2(\"example\", {\n    enableAuto: false,\n    enabled: true,\n    minScore: 5,\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n    source: 0,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListStevenlu2(\"example\",\n    enable_auto=False,\n    enabled=True,\n    min_score=5,\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False,\n    source=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListStevenlu2(\"example\", new()\n    {\n        EnableAuto = false,\n        Enabled = true,\n        MinScore = 5,\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n        Source = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListStevenlu2(ctx, \"example\", \u0026ImportLists.ImportListStevenlu2Args{\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tMinScore:            pulumi.Int(5),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t\tSource:              pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListStevenlu2;\nimport com.pulumi.radarr.ImportLists.ImportListStevenlu2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListStevenlu2(\"example\", ImportListStevenlu2Args.builder()        \n            .enableAuto(false)\n            .enabled(true)\n            .minScore(5)\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .source(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListStevenlu2\n    properties:\n      enableAuto: false\n      enabled: true\n      minScore: 5\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n      source: 0\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListStevenlu2:ImportListStevenlu2 example 1\n```\n\n ",
            "properties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minScore": {
                    "type": "integer",
                    "description": "Min score.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "source": {
                    "type": "integer",
                    "description": "Source.`0` Standard, `1` Imdb, `2` Metacritic, `3` RottenTomatoes,\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enableAuto",
                "enabled",
                "listOrder",
                "minScore",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "source",
                "tags"
            ],
            "inputProperties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minScore": {
                    "type": "integer",
                    "description": "Min score.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "source": {
                    "type": "integer",
                    "description": "Source.`0` Standard, `1` Imdb, `2` Metacritic, `3` RottenTomatoes,\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "minScore",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListStevenlu2 resources.\n",
                "properties": {
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minScore": {
                        "type": "integer",
                        "description": "Min score.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "source": {
                        "type": "integer",
                        "description": "Source.`0` Standard, `1` Imdb, `2` Metacritic, `3` RottenTomatoes,\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListStevenlu:ImportListStevenlu": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Stevenlu resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [Stevenlu](https://wiki.servarr.com/radarr/supported#stevenluimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListStevenlu(\"example\", {\n    enableAuto: false,\n    enabled: true,\n    link: \"https://s3.amazonaws.com/popular-movies/movies.json\",\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListStevenlu(\"example\",\n    enable_auto=False,\n    enabled=True,\n    link=\"https://s3.amazonaws.com/popular-movies/movies.json\",\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListStevenlu(\"example\", new()\n    {\n        EnableAuto = false,\n        Enabled = true,\n        Link = \"https://s3.amazonaws.com/popular-movies/movies.json\",\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListStevenlu(ctx, \"example\", \u0026ImportLists.ImportListStevenluArgs{\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tLink:                pulumi.String(\"https://s3.amazonaws.com/popular-movies/movies.json\"),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListStevenlu;\nimport com.pulumi.radarr.ImportLists.ImportListStevenluArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListStevenlu(\"example\", ImportListStevenluArgs.builder()        \n            .enableAuto(false)\n            .enabled(true)\n            .link(\"https://s3.amazonaws.com/popular-movies/movies.json\")\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListStevenlu\n    properties:\n      enableAuto: false\n      enabled: true\n      link: https://s3.amazonaws.com/popular-movies/movies.json\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListStevenlu:ImportListStevenlu example 1\n```\n\n ",
            "properties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "link": {
                    "type": "string",
                    "description": "Link.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enableAuto",
                "enabled",
                "link",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags"
            ],
            "inputProperties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "link": {
                    "type": "string",
                    "description": "Link.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "link",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListStevenlu resources.\n",
                "properties": {
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "Link.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListTmdbCompany:ImportListTmdbCompany": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List TMDB Company resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [TMDB Company](https://wiki.servarr.com/radarr/supported#tmdbcompanyimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListTmdbCompany(\"example\", {\n    companyId: \"11842\",\n    enableAuto: false,\n    enabled: true,\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListTmdbCompany(\"example\",\n    company_id=\"11842\",\n    enable_auto=False,\n    enabled=True,\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListTmdbCompany(\"example\", new()\n    {\n        CompanyId = \"11842\",\n        EnableAuto = false,\n        Enabled = true,\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListTmdbCompany(ctx, \"example\", \u0026ImportLists.ImportListTmdbCompanyArgs{\n\t\t\tCompanyId:           pulumi.String(\"11842\"),\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbCompany;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbCompanyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListTmdbCompany(\"example\", ImportListTmdbCompanyArgs.builder()        \n            .companyId(\"11842\")\n            .enableAuto(false)\n            .enabled(true)\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListTmdbCompany\n    properties:\n      companyId: '11842'\n      enableAuto: false\n      enabled: true\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListTmdbCompany:ImportListTmdbCompany example 1\n```\n\n ",
            "properties": {
                "companyId": {
                    "type": "string",
                    "description": "Company ID.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "companyId",
                "enableAuto",
                "enabled",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags"
            ],
            "inputProperties": {
                "companyId": {
                    "type": "string",
                    "description": "Company ID.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "companyId",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListTmdbCompany resources.\n",
                "properties": {
                    "companyId": {
                        "type": "string",
                        "description": "Company ID.\n"
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListTmdbKeyword:ImportListTmdbKeyword": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List TMDB Keyword resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [TMDB Keyword](https://wiki.servarr.com/radarr/supported#tmdbkeywordimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListTmdbKeyword(\"example\", {\n    enableAuto: false,\n    enabled: true,\n    keywordId: \"11842\",\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListTmdbKeyword(\"example\",\n    enable_auto=False,\n    enabled=True,\n    keyword_id=\"11842\",\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListTmdbKeyword(\"example\", new()\n    {\n        EnableAuto = false,\n        Enabled = true,\n        KeywordId = \"11842\",\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListTmdbKeyword(ctx, \"example\", \u0026ImportLists.ImportListTmdbKeywordArgs{\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tKeywordId:           pulumi.String(\"11842\"),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbKeyword;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbKeywordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListTmdbKeyword(\"example\", ImportListTmdbKeywordArgs.builder()        \n            .enableAuto(false)\n            .enabled(true)\n            .keywordId(\"11842\")\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListTmdbKeyword\n    properties:\n      enableAuto: false\n      enabled: true\n      keywordId: '11842'\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListTmdbKeyword:ImportListTmdbKeyword example 1\n```\n\n ",
            "properties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "keywordId": {
                    "type": "string",
                    "description": "Keyword ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enableAuto",
                "enabled",
                "keywordId",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags"
            ],
            "inputProperties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "keywordId": {
                    "type": "string",
                    "description": "Keyword ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "keywordId",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListTmdbKeyword resources.\n",
                "properties": {
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "keywordId": {
                        "type": "string",
                        "description": "Keyword ID.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListTmdbList:ImportListTmdbList": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List TMDB List resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [TMDB List](https://wiki.servarr.com/radarr/supported#tmdblistimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListTmdbList(\"example\", {\n    enableAuto: false,\n    enabled: true,\n    listId: \"11842\",\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListTmdbList(\"example\",\n    enable_auto=False,\n    enabled=True,\n    list_id=\"11842\",\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListTmdbList(\"example\", new()\n    {\n        EnableAuto = false,\n        Enabled = true,\n        ListId = \"11842\",\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListTmdbList(ctx, \"example\", \u0026ImportLists.ImportListTmdbListArgs{\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tListId:              pulumi.String(\"11842\"),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbList;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListTmdbList(\"example\", ImportListTmdbListArgs.builder()        \n            .enableAuto(false)\n            .enabled(true)\n            .listId(\"11842\")\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListTmdbList\n    properties:\n      enableAuto: false\n      enabled: true\n      listId: '11842'\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListTmdbList:ImportListTmdbList example 1\n```\n\n ",
            "properties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listId": {
                    "type": "string",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enableAuto",
                "enabled",
                "listId",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags"
            ],
            "inputProperties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listId": {
                    "type": "string",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "listId",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListTmdbList resources.\n",
                "properties": {
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "listId": {
                        "type": "string",
                        "description": "List ID.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListTmdbPerson:ImportListTmdbPerson": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List TMDB Person resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [TMDB Person](https://wiki.servarr.com/radarr/supported#tmdbpersonimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListTmdbPerson(\"example\", {\n    cast: true,\n    castDirector: true,\n    castProducer: true,\n    castSound: true,\n    castWriting: true,\n    enableAuto: false,\n    enabled: true,\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    personId: \"11842\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListTmdbPerson(\"example\",\n    cast=True,\n    cast_director=True,\n    cast_producer=True,\n    cast_sound=True,\n    cast_writing=True,\n    enable_auto=False,\n    enabled=True,\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    person_id=\"11842\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListTmdbPerson(\"example\", new()\n    {\n        Cast = true,\n        CastDirector = true,\n        CastProducer = true,\n        CastSound = true,\n        CastWriting = true,\n        EnableAuto = false,\n        Enabled = true,\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        PersonId = \"11842\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListTmdbPerson(ctx, \"example\", \u0026ImportLists.ImportListTmdbPersonArgs{\n\t\t\tCast:                pulumi.Bool(true),\n\t\t\tCastDirector:        pulumi.Bool(true),\n\t\t\tCastProducer:        pulumi.Bool(true),\n\t\t\tCastSound:           pulumi.Bool(true),\n\t\t\tCastWriting:         pulumi.Bool(true),\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tPersonId:            pulumi.String(\"11842\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbPerson;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbPersonArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListTmdbPerson(\"example\", ImportListTmdbPersonArgs.builder()        \n            .cast(true)\n            .castDirector(true)\n            .castProducer(true)\n            .castSound(true)\n            .castWriting(true)\n            .enableAuto(false)\n            .enabled(true)\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .personId(\"11842\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListTmdbPerson\n    properties:\n      cast: true\n      castDirector: true\n      castProducer: true\n      castSound: true\n      castWriting: true\n      enableAuto: false\n      enabled: true\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      personId: '11842'\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListTmdbPerson:ImportListTmdbPerson example 1\n```\n\n ",
            "properties": {
                "cast": {
                    "type": "boolean",
                    "description": "Include cast.\n"
                },
                "castDirector": {
                    "type": "boolean",
                    "description": "Include cast director.\n"
                },
                "castProducer": {
                    "type": "boolean",
                    "description": "Include cast producer.\n"
                },
                "castSound": {
                    "type": "boolean",
                    "description": "Include cast sound.\n"
                },
                "castWriting": {
                    "type": "boolean",
                    "description": "Include cast writing.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "personId": {
                    "type": "string",
                    "description": "Person ID.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "cast",
                "castDirector",
                "castProducer",
                "castSound",
                "castWriting",
                "enableAuto",
                "enabled",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "personId",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags"
            ],
            "inputProperties": {
                "cast": {
                    "type": "boolean",
                    "description": "Include cast.\n"
                },
                "castDirector": {
                    "type": "boolean",
                    "description": "Include cast director.\n"
                },
                "castProducer": {
                    "type": "boolean",
                    "description": "Include cast producer.\n"
                },
                "castSound": {
                    "type": "boolean",
                    "description": "Include cast sound.\n"
                },
                "castWriting": {
                    "type": "boolean",
                    "description": "Include cast writing.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "personId": {
                    "type": "string",
                    "description": "Person ID.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "minimumAvailability",
                "monitor",
                "name",
                "personId",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListTmdbPerson resources.\n",
                "properties": {
                    "cast": {
                        "type": "boolean",
                        "description": "Include cast.\n"
                    },
                    "castDirector": {
                        "type": "boolean",
                        "description": "Include cast director.\n"
                    },
                    "castProducer": {
                        "type": "boolean",
                        "description": "Include cast producer.\n"
                    },
                    "castSound": {
                        "type": "boolean",
                        "description": "Include cast sound.\n"
                    },
                    "castWriting": {
                        "type": "boolean",
                        "description": "Include cast writing.\n"
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "personId": {
                        "type": "string",
                        "description": "Person ID.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListTmdbPopular:ImportListTmdbPopular": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List TMDB Popular resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [TMDB Popular](https://wiki.servarr.com/radarr/supported#tmdbpopularimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListTmdbPopular(\"example\", {\n    enableAuto: false,\n    enabled: true,\n    languageCode: 2,\n    minVoteAverage: \"5\",\n    minVotes: \"1\",\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n    tmdbCertification: \"PG-13\",\n    tmdbListType: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListTmdbPopular(\"example\",\n    enable_auto=False,\n    enabled=True,\n    language_code=2,\n    min_vote_average=\"5\",\n    min_votes=\"1\",\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False,\n    tmdb_certification=\"PG-13\",\n    tmdb_list_type=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListTmdbPopular(\"example\", new()\n    {\n        EnableAuto = false,\n        Enabled = true,\n        LanguageCode = 2,\n        MinVoteAverage = \"5\",\n        MinVotes = \"1\",\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n        TmdbCertification = \"PG-13\",\n        TmdbListType = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListTmdbPopular(ctx, \"example\", \u0026ImportLists.ImportListTmdbPopularArgs{\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tLanguageCode:        pulumi.Int(2),\n\t\t\tMinVoteAverage:      pulumi.String(\"5\"),\n\t\t\tMinVotes:            pulumi.String(\"1\"),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t\tTmdbCertification:   pulumi.String(\"PG-13\"),\n\t\t\tTmdbListType:        pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbPopular;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbPopularArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListTmdbPopular(\"example\", ImportListTmdbPopularArgs.builder()        \n            .enableAuto(false)\n            .enabled(true)\n            .languageCode(2)\n            .minVoteAverage(\"5\")\n            .minVotes(\"1\")\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .tmdbCertification(\"PG-13\")\n            .tmdbListType(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListTmdbPopular\n    properties:\n      enableAuto: false\n      enabled: true\n      languageCode: 2\n      minVoteAverage: '5'\n      minVotes: '1'\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n      tmdbCertification: PG-13\n      tmdbListType: 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListTmdbPopular:ImportListTmdbPopular example 1\n```\n\n ",
            "properties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "excludeGenreIds": {
                    "type": "string",
                    "description": "Exclude genre IDs.\n"
                },
                "includeGenreIds": {
                    "type": "string",
                    "description": "Include genre IDs.\n"
                },
                "languageCode": {
                    "type": "integer",
                    "description": "Language code.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minVoteAverage": {
                    "type": "string",
                    "description": "Min vote average.\n"
                },
                "minVotes": {
                    "type": "string",
                    "description": "Min votes.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "tmdbCertification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "tmdbListType": {
                    "type": "integer",
                    "description": "TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.\n"
                }
            },
            "required": [
                "enableAuto",
                "enabled",
                "excludeGenreIds",
                "includeGenreIds",
                "languageCode",
                "listOrder",
                "minVoteAverage",
                "minVotes",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags",
                "tmdbCertification",
                "tmdbListType"
            ],
            "inputProperties": {
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "excludeGenreIds": {
                    "type": "string",
                    "description": "Exclude genre IDs.\n"
                },
                "includeGenreIds": {
                    "type": "string",
                    "description": "Include genre IDs.\n"
                },
                "languageCode": {
                    "type": "integer",
                    "description": "Language code.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minVoteAverage": {
                    "type": "string",
                    "description": "Min vote average.\n"
                },
                "minVotes": {
                    "type": "string",
                    "description": "Min votes.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "tmdbCertification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "tmdbListType": {
                    "type": "integer",
                    "description": "TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.\n"
                }
            },
            "requiredInputs": [
                "languageCode",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "tmdbListType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListTmdbPopular resources.\n",
                "properties": {
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "excludeGenreIds": {
                        "type": "string",
                        "description": "Exclude genre IDs.\n"
                    },
                    "includeGenreIds": {
                        "type": "string",
                        "description": "Include genre IDs.\n"
                    },
                    "languageCode": {
                        "type": "integer",
                        "description": "Language code.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minVoteAverage": {
                        "type": "string",
                        "description": "Min vote average.\n"
                    },
                    "minVotes": {
                        "type": "string",
                        "description": "Min votes.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "tmdbCertification": {
                        "type": "string",
                        "description": "Certification.\n"
                    },
                    "tmdbListType": {
                        "type": "integer",
                        "description": "TMDB list type. `1` Theaters, `2` Popular, `3` Top, `4` Upcoming.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListTmdbUser:ImportListTmdbUser": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List TMDB User resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [TMDB User](https://wiki.servarr.com/radarr/supported#tmdbuserimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbUser;\nimport com.pulumi.radarr.ImportLists.ImportListTmdbUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListTmdbUser(\"example\", ImportListTmdbUserArgs.builder()        \n            .enableAuto(false)\n            .enabled(true)\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .userId(\"11842\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListTmdbUser\n    properties:\n      enableAuto: false\n      enabled: true\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n      userId: '11842'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListTmdbUser:ImportListTmdbUser example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accountId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userListType": {
                    "type": "integer",
                    "description": "TMDB list type. `1` Watchlist, `2` Recommendations, `3` Rated, `4` Favorite.\n"
                }
            },
            "required": [
                "accessToken",
                "accountId",
                "enableAuto",
                "enabled",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "searchOnAdd",
                "tags",
                "userListType"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accountId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userListType": {
                    "type": "integer",
                    "description": "TMDB list type. `1` Watchlist, `2` Recommendations, `3` Rated, `4` Favorite.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "accountId",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "userListType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListTmdbUser resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accountId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "userListType": {
                        "type": "integer",
                        "description": "TMDB list type. `1` Watchlist, `2` Recommendations, `3` Rated, `4` Favorite.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListTraktList:ImportListTraktList": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List TraktList resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [Trakt List](https://wiki.servarr.com/radarr/supported#traktlistimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListTraktList(\"example\", {\n    accessToken: \"Token\",\n    authUser: \"User1\",\n    enableAuto: false,\n    enabled: true,\n    limit: 100,\n    listname: \"test\",\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n    username: \"User2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListTraktList(\"example\",\n    access_token=\"Token\",\n    auth_user=\"User1\",\n    enable_auto=False,\n    enabled=True,\n    limit=100,\n    listname=\"test\",\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False,\n    username=\"User2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListTraktList(\"example\", new()\n    {\n        AccessToken = \"Token\",\n        AuthUser = \"User1\",\n        EnableAuto = false,\n        Enabled = true,\n        Limit = 100,\n        Listname = \"test\",\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n        Username = \"User2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListTraktList(ctx, \"example\", \u0026ImportLists.ImportListTraktListArgs{\n\t\t\tAccessToken:         pulumi.String(\"Token\"),\n\t\t\tAuthUser:            pulumi.String(\"User1\"),\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tLimit:               pulumi.Int(100),\n\t\t\tListname:            pulumi.String(\"test\"),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t\tUsername:            pulumi.String(\"User2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListTraktList;\nimport com.pulumi.radarr.ImportLists.ImportListTraktListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListTraktList(\"example\", ImportListTraktListArgs.builder()        \n            .accessToken(\"Token\")\n            .authUser(\"User1\")\n            .enableAuto(false)\n            .enabled(true)\n            .limit(100)\n            .listname(\"test\")\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .username(\"User2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListTraktList\n    properties:\n      accessToken: Token\n      authUser: User1\n      enableAuto: false\n      enabled: true\n      limit: 100\n      listname: test\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n      username: User2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListTraktList:ImportListTraktList example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "limit.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "listname": {
                    "type": "string",
                    "description": "List name.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "traktAdditionalParameters": {
                    "type": "string",
                    "description": "Trakt additional parameters.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "accessToken",
                "authUser",
                "enableAuto",
                "enabled",
                "expires",
                "limit",
                "listOrder",
                "listname",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "refreshToken",
                "rootFolderPath",
                "searchOnAdd",
                "tags",
                "traktAdditionalParameters",
                "username"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "limit.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "listname": {
                    "type": "string",
                    "description": "List name.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "traktAdditionalParameters": {
                    "type": "string",
                    "description": "Trakt additional parameters.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "authUser",
                "limit",
                "listname",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListTraktList resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "expires": {
                        "type": "string",
                        "description": "Expires.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "limit.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "listname": {
                        "type": "string",
                        "description": "List name.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Refresh token.\n",
                        "secret": true
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "traktAdditionalParameters": {
                        "type": "string",
                        "description": "Trakt additional parameters.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListTraktPopular:ImportListTraktPopular": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Trakt Popular resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [Trakt Popular](https://wiki.servarr.com/radarr/supported#traktpopularimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListTraktPopular(\"example\", {\n    accessToken: \"Token\",\n    authUser: \"User1\",\n    enableAuto: false,\n    enabled: true,\n    limit: 100,\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n    traktListType: 0,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListTraktPopular(\"example\",\n    access_token=\"Token\",\n    auth_user=\"User1\",\n    enable_auto=False,\n    enabled=True,\n    limit=100,\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False,\n    trakt_list_type=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListTraktPopular(\"example\", new()\n    {\n        AccessToken = \"Token\",\n        AuthUser = \"User1\",\n        EnableAuto = false,\n        Enabled = true,\n        Limit = 100,\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n        TraktListType = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListTraktPopular(ctx, \"example\", \u0026ImportLists.ImportListTraktPopularArgs{\n\t\t\tAccessToken:         pulumi.String(\"Token\"),\n\t\t\tAuthUser:            pulumi.String(\"User1\"),\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tLimit:               pulumi.Int(100),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t\tTraktListType:       pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListTraktPopular;\nimport com.pulumi.radarr.ImportLists.ImportListTraktPopularArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListTraktPopular(\"example\", ImportListTraktPopularArgs.builder()        \n            .accessToken(\"Token\")\n            .authUser(\"User1\")\n            .enableAuto(false)\n            .enabled(true)\n            .limit(100)\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .traktListType(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListTraktPopular\n    properties:\n      accessToken: Token\n      authUser: User1\n      enableAuto: false\n      enabled: true\n      limit: 100\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n      traktListType: 0\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListTraktPopular:ImportListTraktPopular example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "certification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "genres": {
                    "type": "string",
                    "description": "Genres.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "limit.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rating": {
                    "type": "string",
                    "description": "Rating.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "traktAdditionalParameters": {
                    "type": "string",
                    "description": "Trakt additional parameters.\n"
                },
                "traktListType": {
                    "type": "integer",
                    "description": "Trakt list type.`0` Trending, `1` Popular, `2` Anticipated, `3` BoxOffice, `4` TopWatchedByWeek, `5` TopWatchedByMonth, `6` TopWatchedByYear, `7` TopWatchedByAllTime, `8` RecommendedByWeek, `9` RecommendedByMonth, `10` RecommendedByYear, `10` RecommendedByAllTime.\n"
                },
                "years": {
                    "type": "string",
                    "description": "Years.\n"
                }
            },
            "required": [
                "accessToken",
                "authUser",
                "certification",
                "enableAuto",
                "enabled",
                "expires",
                "genres",
                "limit",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rating",
                "refreshToken",
                "rootFolderPath",
                "searchOnAdd",
                "tags",
                "traktAdditionalParameters",
                "traktListType",
                "years"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "certification": {
                    "type": "string",
                    "description": "Certification.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "genres": {
                    "type": "string",
                    "description": "Genres.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "limit.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rating": {
                    "type": "string",
                    "description": "Rating.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "traktAdditionalParameters": {
                    "type": "string",
                    "description": "Trakt additional parameters.\n"
                },
                "traktListType": {
                    "type": "integer",
                    "description": "Trakt list type.`0` Trending, `1` Popular, `2` Anticipated, `3` BoxOffice, `4` TopWatchedByWeek, `5` TopWatchedByMonth, `6` TopWatchedByYear, `7` TopWatchedByAllTime, `8` RecommendedByWeek, `9` RecommendedByMonth, `10` RecommendedByYear, `10` RecommendedByAllTime.\n"
                },
                "years": {
                    "type": "string",
                    "description": "Years.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "authUser",
                "limit",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListTraktPopular resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "certification": {
                        "type": "string",
                        "description": "Certification.\n"
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "expires": {
                        "type": "string",
                        "description": "Expires.\n"
                    },
                    "genres": {
                        "type": "string",
                        "description": "Genres.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "limit.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rating": {
                        "type": "string",
                        "description": "Rating.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Refresh token.\n",
                        "secret": true
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "traktAdditionalParameters": {
                        "type": "string",
                        "description": "Trakt additional parameters.\n"
                    },
                    "traktListType": {
                        "type": "integer",
                        "description": "Trakt list type.`0` Trending, `1` Popular, `2` Anticipated, `3` BoxOffice, `4` TopWatchedByWeek, `5` TopWatchedByMonth, `6` TopWatchedByYear, `7` TopWatchedByAllTime, `8` RecommendedByWeek, `9` RecommendedByMonth, `10` RecommendedByYear, `10` RecommendedByAllTime.\n"
                    },
                    "years": {
                        "type": "string",
                        "description": "Years.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:ImportLists/importListTraktUser:ImportListTraktUser": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Trakt User resource.\nFor more information refer to [Import List](https://wiki.servarr.com/radarr/settings#import-lists) and [Trakt User](https://wiki.servarr.com/radarr/supported#traktuserimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.importlists.ImportListTraktUser(\"example\", {\n    accessToken: \"Token\",\n    authUser: \"User1\",\n    enableAuto: false,\n    enabled: true,\n    limit: 100,\n    minimumAvailability: \"tba\",\n    monitor: \"none\",\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/config\",\n    searchOnAdd: false,\n    traktListType: 0,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.import_lists.ImportListTraktUser(\"example\",\n    access_token=\"Token\",\n    auth_user=\"User1\",\n    enable_auto=False,\n    enabled=True,\n    limit=100,\n    minimum_availability=\"tba\",\n    monitor=\"none\",\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/config\",\n    search_on_add=False,\n    trakt_list_type=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.ImportLists.ImportListTraktUser(\"example\", new()\n    {\n        AccessToken = \"Token\",\n        AuthUser = \"User1\",\n        EnableAuto = false,\n        Enabled = true,\n        Limit = 100,\n        MinimumAvailability = \"tba\",\n        Monitor = \"none\",\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/config\",\n        SearchOnAdd = false,\n        TraktListType = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListTraktUser(ctx, \"example\", \u0026ImportLists.ImportListTraktUserArgs{\n\t\t\tAccessToken:         pulumi.String(\"Token\"),\n\t\t\tAuthUser:            pulumi.String(\"User1\"),\n\t\t\tEnableAuto:          pulumi.Bool(false),\n\t\t\tEnabled:             pulumi.Bool(true),\n\t\t\tLimit:               pulumi.Int(100),\n\t\t\tMinimumAvailability: pulumi.String(\"tba\"),\n\t\t\tMonitor:             pulumi.String(\"none\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tRootFolderPath:      pulumi.String(\"/config\"),\n\t\t\tSearchOnAdd:         pulumi.Bool(false),\n\t\t\tTraktListType:       pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListTraktUser;\nimport com.pulumi.radarr.ImportLists.ImportListTraktUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListTraktUser(\"example\", ImportListTraktUserArgs.builder()        \n            .accessToken(\"Token\")\n            .authUser(\"User1\")\n            .enableAuto(false)\n            .enabled(true)\n            .limit(100)\n            .minimumAvailability(\"tba\")\n            .monitor(\"none\")\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/config\")\n            .searchOnAdd(false)\n            .traktListType(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:ImportLists:ImportListTraktUser\n    properties:\n      accessToken: Token\n      authUser: User1\n      enableAuto: false\n      enabled: true\n      limit: 100\n      minimumAvailability: tba\n      monitor: none\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /config\n      searchOnAdd: false\n      traktListType: 0\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:ImportLists/importListTraktUser:ImportListTraktUser example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "limit.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "traktAdditionalParameters": {
                    "type": "string",
                    "description": "Trakt additional parameters.\n"
                },
                "traktListType": {
                    "type": "integer",
                    "description": "Trakt list type.`0` UserWatchList, `1` UserWatchedList, `2` UserCollectionList.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "accessToken",
                "authUser",
                "enableAuto",
                "enabled",
                "expires",
                "limit",
                "listOrder",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "refreshToken",
                "rootFolderPath",
                "searchOnAdd",
                "tags",
                "traktAdditionalParameters",
                "traktListType",
                "username"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "enableAuto": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled flag.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "limit": {
                    "type": "integer",
                    "description": "limit.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\n"
                },
                "monitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "searchOnAdd": {
                    "type": "boolean",
                    "description": "Search on add flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "traktAdditionalParameters": {
                    "type": "string",
                    "description": "Trakt additional parameters.\n"
                },
                "traktListType": {
                    "type": "integer",
                    "description": "Trakt list type.`0` UserWatchList, `1` UserWatchedList, `2` UserCollectionList.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "authUser",
                "limit",
                "minimumAvailability",
                "monitor",
                "name",
                "qualityProfileId",
                "rootFolderPath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListTraktUser resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "expires": {
                        "type": "string",
                        "description": "Expires.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "limit.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Refresh token.\n",
                        "secret": true
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "traktAdditionalParameters": {
                        "type": "string",
                        "description": "Trakt additional parameters.\n"
                    },
                    "traktListType": {
                        "type": "integer",
                        "description": "Trakt list type.`0` UserWatchList, `1` UserWatchedList, `2` UserCollectionList.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexer:Indexer": {
            "description": "\u003c!-- subcategory:Indexers --\u003eGeneric Indexer resource. When possible use a specific resource instead.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.Indexer(\"example\", {\n    apiPath: \"/api\",\n    baseUrl: \"https://lolo.sickbeard.com\",\n    categories: [\n        8000,\n        5000,\n    ],\n    configContract: \"NewznabSettings\",\n    enableAutomaticSearch: true,\n    implementation: \"Newznab\",\n    name: \"Test\",\n    protocol: \"usenet\",\n    tags: [\n        1,\n        2,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.Indexer(\"example\",\n    api_path=\"/api\",\n    base_url=\"https://lolo.sickbeard.com\",\n    categories=[\n        8000,\n        5000,\n    ],\n    config_contract=\"NewznabSettings\",\n    enable_automatic_search=True,\n    implementation=\"Newznab\",\n    name=\"Test\",\n    protocol=\"usenet\",\n    tags=[\n        1,\n        2,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.Indexer(\"example\", new()\n    {\n        ApiPath = \"/api\",\n        BaseUrl = \"https://lolo.sickbeard.com\",\n        Categories = new[]\n        {\n            8000,\n            5000,\n        },\n        ConfigContract = \"NewznabSettings\",\n        EnableAutomaticSearch = true,\n        Implementation = \"Newznab\",\n        Name = \"Test\",\n        Protocol = \"usenet\",\n        Tags = new[]\n        {\n            1,\n            2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexer(ctx, \"example\", \u0026Indexers.IndexerArgs{\n\t\t\tApiPath: pulumi.String(\"/api\"),\n\t\t\tBaseUrl: pulumi.String(\"https://lolo.sickbeard.com\"),\n\t\t\tCategories: pulumi.IntArray{\n\t\t\t\tpulumi.Int(8000),\n\t\t\t\tpulumi.Int(5000),\n\t\t\t},\n\t\t\tConfigContract:        pulumi.String(\"NewznabSettings\"),\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tImplementation:        pulumi.String(\"Newznab\"),\n\t\t\tName:                  pulumi.String(\"Test\"),\n\t\t\tProtocol:              pulumi.String(\"usenet\"),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.Indexer;\nimport com.pulumi.radarr.Indexers.IndexerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Indexer(\"example\", IndexerArgs.builder()        \n            .apiPath(\"/api\")\n            .baseUrl(\"https://lolo.sickbeard.com\")\n            .categories(            \n                8000,\n                5000)\n            .configContract(\"NewznabSettings\")\n            .enableAutomaticSearch(true)\n            .implementation(\"Newznab\")\n            .name(\"Test\")\n            .protocol(\"usenet\")\n            .tags(            \n                1,\n                2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:Indexer\n    properties:\n      apiPath: /api\n      baseUrl: https://lolo.sickbeard.com\n      categories:\n        - 8000\n        - 5000\n      configContract: NewznabSettings\n      enableAutomaticSearch: true\n      implementation: Newznab\n      name: Test\n      protocol: usenet\n      tags:\n        - 1\n        - 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexer:Indexer example 1\n```\n\n ",
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "apiUser": {
                    "type": "string",
                    "description": "API User.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "captchaToken": {
                    "type": "string",
                    "description": "Captcha token.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "codecs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Codecs.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Indexer configuration template.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "delay": {
                    "type": "integer",
                    "description": "Delay before grabbing.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Indexer implementation name.\n"
                },
                "mediums": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Mediumd.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Language list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Indexer name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "rankedOnly": {
                    "type": "boolean",
                    "description": "Allow ranked only.\n"
                },
                "removeYear": {
                    "type": "boolean",
                    "description": "Remove year.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Required flags.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "additionalParameters",
                "allowZeroSize",
                "apiKey",
                "apiPath",
                "apiUser",
                "baseUrl",
                "captchaToken",
                "categories",
                "codecs",
                "configContract",
                "cookie",
                "delay",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "implementation",
                "mediums",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "passkey",
                "priority",
                "protocol",
                "rankedOnly",
                "removeYear",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags",
                "user",
                "username"
            ],
            "inputProperties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "apiUser": {
                    "type": "string",
                    "description": "API User.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "captchaToken": {
                    "type": "string",
                    "description": "Captcha token.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "codecs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Codecs.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Indexer configuration template.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "delay": {
                    "type": "integer",
                    "description": "Delay before grabbing.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Indexer implementation name.\n"
                },
                "mediums": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Mediumd.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Language list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Indexer name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "rankedOnly": {
                    "type": "boolean",
                    "description": "Allow ranked only.\n"
                },
                "removeYear": {
                    "type": "boolean",
                    "description": "Remove year.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Required flags.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "configContract",
                "implementation",
                "name",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Indexer resources.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "allowZeroSize": {
                        "type": "boolean",
                        "description": "Allow zero size files.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "apiPath": {
                        "type": "string",
                        "description": "API path.\n"
                    },
                    "apiUser": {
                        "type": "string",
                        "description": "API User.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "captchaToken": {
                        "type": "string",
                        "description": "Captcha token.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Series list.\n"
                    },
                    "codecs": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Codecs.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Indexer configuration template.\n"
                    },
                    "cookie": {
                        "type": "string",
                        "description": "Cookie.\n"
                    },
                    "delay": {
                        "type": "integer",
                        "description": "Delay before grabbing.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Indexer implementation name.\n"
                    },
                    "mediums": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Mediumd.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Language list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Indexer name.\n"
                    },
                    "passkey": {
                        "type": "string",
                        "description": "Passkey.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                    },
                    "rankedOnly": {
                        "type": "boolean",
                        "description": "Allow ranked only.\n"
                    },
                    "removeYear": {
                        "type": "boolean",
                        "description": "Remove year.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Required flags.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerConfig:IndexerConfig": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Config resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#options) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerConfig(\"example\", {\n    allowHardcodedSubs: false,\n    availabilityDelay: 0,\n    maximumSize: 0,\n    minimumAge: 0,\n    preferIndexerFlags: false,\n    retention: 0,\n    rssSyncInterval: 25,\n    whitelistedHardcodedSubs: \"\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerConfig(\"example\",\n    allow_hardcoded_subs=False,\n    availability_delay=0,\n    maximum_size=0,\n    minimum_age=0,\n    prefer_indexer_flags=False,\n    retention=0,\n    rss_sync_interval=25,\n    whitelisted_hardcoded_subs=\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerConfig(\"example\", new()\n    {\n        AllowHardcodedSubs = false,\n        AvailabilityDelay = 0,\n        MaximumSize = 0,\n        MinimumAge = 0,\n        PreferIndexerFlags = false,\n        Retention = 0,\n        RssSyncInterval = 25,\n        WhitelistedHardcodedSubs = \"\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerConfig(ctx, \"example\", \u0026Indexers.IndexerConfigArgs{\n\t\t\tAllowHardcodedSubs:       pulumi.Bool(false),\n\t\t\tAvailabilityDelay:        pulumi.Int(0),\n\t\t\tMaximumSize:              pulumi.Int(0),\n\t\t\tMinimumAge:               pulumi.Int(0),\n\t\t\tPreferIndexerFlags:       pulumi.Bool(false),\n\t\t\tRetention:                pulumi.Int(0),\n\t\t\tRssSyncInterval:          pulumi.Int(25),\n\t\t\tWhitelistedHardcodedSubs: pulumi.String(\"\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerConfig;\nimport com.pulumi.radarr.Indexers.IndexerConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerConfig(\"example\", IndexerConfigArgs.builder()        \n            .allowHardcodedSubs(false)\n            .availabilityDelay(0)\n            .maximumSize(0)\n            .minimumAge(0)\n            .preferIndexerFlags(false)\n            .retention(0)\n            .rssSyncInterval(25)\n            .whitelistedHardcodedSubs(\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerConfig\n    properties:\n      allowHardcodedSubs: false\n      availabilityDelay: 0\n      maximumSize: 0\n      minimumAge: 0\n      preferIndexerFlags: false\n      retention: 0\n      rssSyncInterval: 25\n      whitelistedHardcodedSubs:\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import radarr:Indexers/indexerConfig:IndexerConfig example\n```\n\n ",
            "properties": {
                "allowHardcodedSubs": {
                    "type": "boolean",
                    "description": "Allow hardcoded subs.\n"
                },
                "availabilityDelay": {
                    "type": "integer",
                    "description": "Availability delay.\n"
                },
                "maximumSize": {
                    "type": "integer",
                    "description": "Maximum size.\n"
                },
                "minimumAge": {
                    "type": "integer",
                    "description": "Minimum age.\n"
                },
                "preferIndexerFlags": {
                    "type": "boolean",
                    "description": "Prefer indexer flags.\n"
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention.\n"
                },
                "rssSyncInterval": {
                    "type": "integer",
                    "description": "RSS sync interval.\n"
                },
                "whitelistedHardcodedSubs": {
                    "type": "string",
                    "description": "Whitelisted hardconded subs.\n"
                }
            },
            "required": [
                "allowHardcodedSubs",
                "availabilityDelay",
                "maximumSize",
                "minimumAge",
                "preferIndexerFlags",
                "retention",
                "rssSyncInterval",
                "whitelistedHardcodedSubs"
            ],
            "inputProperties": {
                "allowHardcodedSubs": {
                    "type": "boolean",
                    "description": "Allow hardcoded subs.\n"
                },
                "availabilityDelay": {
                    "type": "integer",
                    "description": "Availability delay.\n"
                },
                "maximumSize": {
                    "type": "integer",
                    "description": "Maximum size.\n"
                },
                "minimumAge": {
                    "type": "integer",
                    "description": "Minimum age.\n"
                },
                "preferIndexerFlags": {
                    "type": "boolean",
                    "description": "Prefer indexer flags.\n"
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention.\n"
                },
                "rssSyncInterval": {
                    "type": "integer",
                    "description": "RSS sync interval.\n"
                },
                "whitelistedHardcodedSubs": {
                    "type": "string",
                    "description": "Whitelisted hardconded subs.\n"
                }
            },
            "requiredInputs": [
                "allowHardcodedSubs",
                "availabilityDelay",
                "maximumSize",
                "minimumAge",
                "preferIndexerFlags",
                "retention",
                "rssSyncInterval",
                "whitelistedHardcodedSubs"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerConfig resources.\n",
                "properties": {
                    "allowHardcodedSubs": {
                        "type": "boolean",
                        "description": "Allow hardcoded subs.\n"
                    },
                    "availabilityDelay": {
                        "type": "integer",
                        "description": "Availability delay.\n"
                    },
                    "maximumSize": {
                        "type": "integer",
                        "description": "Maximum size.\n"
                    },
                    "minimumAge": {
                        "type": "integer",
                        "description": "Minimum age.\n"
                    },
                    "preferIndexerFlags": {
                        "type": "boolean",
                        "description": "Prefer indexer flags.\n"
                    },
                    "retention": {
                        "type": "integer",
                        "description": "Retention.\n"
                    },
                    "rssSyncInterval": {
                        "type": "integer",
                        "description": "RSS sync interval.\n"
                    },
                    "whitelistedHardcodedSubs": {
                        "type": "string",
                        "description": "Whitelisted hardconded subs.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerFilelist:IndexerFilelist": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer FileList resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [FileList](https://wiki.servarr.com/radarr/supported#filelist).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerFilelist(\"example\", {\n    baseUrl: \"https://filelist.io\",\n    categories: [\n        4,\n        6,\n        1,\n    ],\n    enableAutomaticSearch: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n    passkey: \"PassKey\",\n    requiredFlags: [\n        1,\n        4,\n    ],\n    username: \"User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerFilelist(\"example\",\n    base_url=\"https://filelist.io\",\n    categories=[\n        4,\n        6,\n        1,\n    ],\n    enable_automatic_search=True,\n    minimum_seeders=1,\n    name=\"Example\",\n    passkey=\"PassKey\",\n    required_flags=[\n        1,\n        4,\n    ],\n    username=\"User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerFilelist(\"example\", new()\n    {\n        BaseUrl = \"https://filelist.io\",\n        Categories = new[]\n        {\n            4,\n            6,\n            1,\n        },\n        EnableAutomaticSearch = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n        Passkey = \"PassKey\",\n        RequiredFlags = new[]\n        {\n            1,\n            4,\n        },\n        Username = \"User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerFilelist(ctx, \"example\", \u0026Indexers.IndexerFilelistArgs{\n\t\t\tBaseUrl: pulumi.String(\"https://filelist.io\"),\n\t\t\tCategories: pulumi.IntArray{\n\t\t\t\tpulumi.Int(4),\n\t\t\t\tpulumi.Int(6),\n\t\t\t\tpulumi.Int(1),\n\t\t\t},\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tMinimumSeeders:        pulumi.Int(1),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t\tPasskey:               pulumi.String(\"PassKey\"),\n\t\t\tRequiredFlags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(4),\n\t\t\t},\n\t\t\tUsername: pulumi.String(\"User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerFilelist;\nimport com.pulumi.radarr.Indexers.IndexerFilelistArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerFilelist(\"example\", IndexerFilelistArgs.builder()        \n            .baseUrl(\"https://filelist.io\")\n            .categories(            \n                4,\n                6,\n                1)\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .passkey(\"PassKey\")\n            .requiredFlags(            \n                1,\n                4)\n            .username(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerFilelist\n    properties:\n      baseUrl: https://filelist.io\n      categories:\n        - 4\n        - 6\n        - 1\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n      passkey: PassKey\n      requiredFlags:\n        - 1\n        - 4\n      username: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerFilelist:IndexerFilelist example 1\n```\n\n ",
            "properties": {
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerFilelist name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "baseUrl",
                "categories",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "passkey",
                "priority",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags",
                "username"
            ],
            "inputProperties": {
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerFilelist name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name",
                "passkey",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerFilelist resources.\n",
                "properties": {
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Categories list.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Languages list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerFilelist name.\n"
                    },
                    "passkey": {
                        "type": "string",
                        "description": "Passkey.\n",
                        "secret": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Flag list.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerHdbits:IndexerHdbits": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer HDBits resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [HDBits](https://wiki.servarr.com/radarr/supported#hdbits).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerHdbits(\"example\", {\n    apiKey: \"APIKey\",\n    baseUrl: \"https://hdbits.org\",\n    categories: [1],\n    codecs: [\n        1,\n        5,\n    ],\n    enableAutomaticSearch: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n    username: \"User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerHdbits(\"example\",\n    api_key=\"APIKey\",\n    base_url=\"https://hdbits.org\",\n    categories=[1],\n    codecs=[\n        1,\n        5,\n    ],\n    enable_automatic_search=True,\n    minimum_seeders=1,\n    name=\"Example\",\n    username=\"User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerHdbits(\"example\", new()\n    {\n        ApiKey = \"APIKey\",\n        BaseUrl = \"https://hdbits.org\",\n        Categories = new[]\n        {\n            1,\n        },\n        Codecs = new[]\n        {\n            1,\n            5,\n        },\n        EnableAutomaticSearch = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n        Username = \"User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerHdbits(ctx, \"example\", \u0026Indexers.IndexerHdbitsArgs{\n\t\t\tApiKey:  pulumi.String(\"APIKey\"),\n\t\t\tBaseUrl: pulumi.String(\"https://hdbits.org\"),\n\t\t\tCategories: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t},\n\t\t\tCodecs: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(5),\n\t\t\t},\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tMinimumSeeders:        pulumi.Int(1),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t\tUsername:              pulumi.String(\"User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerHdbits;\nimport com.pulumi.radarr.Indexers.IndexerHdbitsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerHdbits(\"example\", IndexerHdbitsArgs.builder()        \n            .apiKey(\"APIKey\")\n            .baseUrl(\"https://hdbits.org\")\n            .categories(1)\n            .codecs(            \n                1,\n                5)\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .username(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerHdbits\n    properties:\n      apiKey: APIKey\n      baseUrl: https://hdbits.org\n      categories:\n        - 1\n      codecs:\n        - 1\n        - 5\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n      username: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerHdbits:IndexerHdbits example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "codecs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Codecs.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "mediums": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Mediumd.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerHdbits name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "apiKey",
                "baseUrl",
                "categories",
                "codecs",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "mediums",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "priority",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags",
                "username"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "codecs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Codecs.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "mediums": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Mediumd.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerHdbits name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerHdbits resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Categories list.\n"
                    },
                    "codecs": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Codecs.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "mediums": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Mediumd.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Languages list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerHdbits name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Flag list.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerIptorrents:IndexerIptorrents": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer IP Torrents resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [IP Torrents](https://wiki.servarr.com/radarr/supported#iptorrents).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerIptorrents(\"example\", {\n    baseUrl: \"https://iptorrent.io\",\n    enableRss: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerIptorrents(\"example\",\n    base_url=\"https://iptorrent.io\",\n    enable_rss=True,\n    minimum_seeders=1,\n    name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerIptorrents(\"example\", new()\n    {\n        BaseUrl = \"https://iptorrent.io\",\n        EnableRss = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerIptorrents(ctx, \"example\", \u0026Indexers.IndexerIptorrentsArgs{\n\t\t\tBaseUrl:        pulumi.String(\"https://iptorrent.io\"),\n\t\t\tEnableRss:      pulumi.Bool(true),\n\t\t\tMinimumSeeders: pulumi.Int(1),\n\t\t\tName:           pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerIptorrents;\nimport com.pulumi.radarr.Indexers.IndexerIptorrentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerIptorrents(\"example\", IndexerIptorrentsArgs.builder()        \n            .baseUrl(\"https://iptorrent.io\")\n            .enableRss(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerIptorrents\n    properties:\n      baseUrl: https://iptorrent.io\n      enableRss: true\n      minimumSeeders: 1\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerIptorrents:IndexerIptorrents example 1\n```\n\n ",
            "properties": {
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerIptorrents name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "baseUrl",
                "downloadClientId",
                "enableRss",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "priority",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerIptorrents name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerIptorrents resources.\n",
                "properties": {
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Languages list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerIptorrents name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Flag list.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerNewznab:IndexerNewznab": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Newznab resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [Newznab](https://wiki.servarr.com/radarr/supported#newznab).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerNewznab(\"example\", {\n    apiPath: \"/api\",\n    baseUrl: \"https://lolo.sickbeard.com\",\n    categories: [\n        8000,\n        5000,\n    ],\n    enableAutomaticSearch: true,\n    name: \"Test\",\n    tags: [\n        1,\n        2,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerNewznab(\"example\",\n    api_path=\"/api\",\n    base_url=\"https://lolo.sickbeard.com\",\n    categories=[\n        8000,\n        5000,\n    ],\n    enable_automatic_search=True,\n    name=\"Test\",\n    tags=[\n        1,\n        2,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerNewznab(\"example\", new()\n    {\n        ApiPath = \"/api\",\n        BaseUrl = \"https://lolo.sickbeard.com\",\n        Categories = new[]\n        {\n            8000,\n            5000,\n        },\n        EnableAutomaticSearch = true,\n        Name = \"Test\",\n        Tags = new[]\n        {\n            1,\n            2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerNewznab(ctx, \"example\", \u0026Indexers.IndexerNewznabArgs{\n\t\t\tApiPath: pulumi.String(\"/api\"),\n\t\t\tBaseUrl: pulumi.String(\"https://lolo.sickbeard.com\"),\n\t\t\tCategories: pulumi.IntArray{\n\t\t\t\tpulumi.Int(8000),\n\t\t\t\tpulumi.Int(5000),\n\t\t\t},\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tName:                  pulumi.String(\"Test\"),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerNewznab;\nimport com.pulumi.radarr.Indexers.IndexerNewznabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerNewznab(\"example\", IndexerNewznabArgs.builder()        \n            .apiPath(\"/api\")\n            .baseUrl(\"https://lolo.sickbeard.com\")\n            .categories(            \n                8000,\n                5000)\n            .enableAutomaticSearch(true)\n            .name(\"Test\")\n            .tags(            \n                1,\n                2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerNewznab\n    properties:\n      apiPath: /api\n      baseUrl: https://lolo.sickbeard.com\n      categories:\n        - 8000\n        - 5000\n      enableAutomaticSearch: true\n      name: Test\n      tags:\n        - 1\n        - 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerNewznab:IndexerNewznab example 1\n```\n\n ",
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Multi languages.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerNewznab name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeYear": {
                    "type": "boolean",
                    "description": "Remove year.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "additionalParameters",
                "apiKey",
                "apiPath",
                "baseUrl",
                "categories",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "multiLanguages",
                "name",
                "priority",
                "removeYear",
                "tags"
            ],
            "inputProperties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Multi languages.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerNewznab name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeYear": {
                    "type": "boolean",
                    "description": "Remove year.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerNewznab resources.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "apiPath": {
                        "type": "string",
                        "description": "API path.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Series list.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Multi languages.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerNewznab name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "removeYear": {
                        "type": "boolean",
                        "description": "Remove year.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerNyaa:IndexerNyaa": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Nyaa resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [Nyaa](https://wiki.servarr.com/radarr/supported#nyaa).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerNyaa(\"example\", {\n    additionalParameters: \"\u0026cats=1_0\u0026filter=1\",\n    baseUrl: \"https://nyaa.io\",\n    enableAutomaticSearch: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerNyaa(\"example\",\n    additional_parameters=\"\u0026cats=1_0\u0026filter=1\",\n    base_url=\"https://nyaa.io\",\n    enable_automatic_search=True,\n    minimum_seeders=1,\n    name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerNyaa(\"example\", new()\n    {\n        AdditionalParameters = \"\u0026cats=1_0\u0026filter=1\",\n        BaseUrl = \"https://nyaa.io\",\n        EnableAutomaticSearch = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerNyaa(ctx, \"example\", \u0026Indexers.IndexerNyaaArgs{\n\t\t\tAdditionalParameters:  pulumi.String(\"\u0026cats=1_0\u0026filter=1\"),\n\t\t\tBaseUrl:               pulumi.String(\"https://nyaa.io\"),\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tMinimumSeeders:        pulumi.Int(1),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerNyaa;\nimport com.pulumi.radarr.Indexers.IndexerNyaaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerNyaa(\"example\", IndexerNyaaArgs.builder()        \n            .additionalParameters(\"\u0026cats=1_0\u0026filter=1\")\n            .baseUrl(\"https://nyaa.io\")\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerNyaa\n    properties:\n      additionalParameters: '\u0026cats=1_0\u0026filter=1'\n      baseUrl: https://nyaa.io\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerNyaa:IndexerNyaa example 1\n```\n\n ",
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerNyaa name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "additionalParameters",
                "baseUrl",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "priority",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerNyaa name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerNyaa resources.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Languages list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerNyaa name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Flag list.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerOmgwtfnzbs:IndexerOmgwtfnzbs": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Omgwtfnzbs resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [Omgwtfnzbs](https://wiki.servarr.com/radarr/supported#omgwtfnzbs).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerOmgwtfnzbs(\"example\", {\n    apiKey: \"API_Key\",\n    enableAutomaticSearch: true,\n    name: \"Example\",\n    username: \"Username\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerOmgwtfnzbs(\"example\",\n    api_key=\"API_Key\",\n    enable_automatic_search=True,\n    name=\"Example\",\n    username=\"Username\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerOmgwtfnzbs(\"example\", new()\n    {\n        ApiKey = \"API_Key\",\n        EnableAutomaticSearch = true,\n        Name = \"Example\",\n        Username = \"Username\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerOmgwtfnzbs(ctx, \"example\", \u0026Indexers.IndexerOmgwtfnzbsArgs{\n\t\t\tApiKey:                pulumi.String(\"API_Key\"),\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t\tUsername:              pulumi.String(\"Username\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerOmgwtfnzbs;\nimport com.pulumi.radarr.Indexers.IndexerOmgwtfnzbsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerOmgwtfnzbs(\"example\", IndexerOmgwtfnzbsArgs.builder()        \n            .apiKey(\"API_Key\")\n            .enableAutomaticSearch(true)\n            .name(\"Example\")\n            .username(\"Username\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerOmgwtfnzbs\n    properties:\n      apiKey: API_Key\n      enableAutomaticSearch: true\n      name: Example\n      username: Username\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerOmgwtfnzbs:IndexerOmgwtfnzbs example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "delay": {
                    "type": "integer",
                    "description": "Delay.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerOmgwtfnzbs name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "apiKey",
                "delay",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "multiLanguages",
                "name",
                "priority",
                "tags",
                "username"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "delay": {
                    "type": "integer",
                    "description": "Delay.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerOmgwtfnzbs name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerOmgwtfnzbs resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "delay": {
                        "type": "integer",
                        "description": "Delay.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Languages list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerOmgwtfnzbs name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerPassThePopcorn:IndexerPassThePopcorn": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer PassThePopcorn resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [PassThePopcorn](https://wiki.servarr.com/radarr/supported#passthepopcorn).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerPassThePopcorn(\"example\", {\n    apiKey: \"Key\",\n    apiUser: \"User\",\n    baseUrl: \"https://passthepopcorn.me\",\n    enableAutomaticSearch: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerPassThePopcorn(\"example\",\n    api_key=\"Key\",\n    api_user=\"User\",\n    base_url=\"https://passthepopcorn.me\",\n    enable_automatic_search=True,\n    minimum_seeders=1,\n    name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerPassThePopcorn(\"example\", new()\n    {\n        ApiKey = \"Key\",\n        ApiUser = \"User\",\n        BaseUrl = \"https://passthepopcorn.me\",\n        EnableAutomaticSearch = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerPassThePopcorn(ctx, \"example\", \u0026Indexers.IndexerPassThePopcornArgs{\n\t\t\tApiKey:                pulumi.String(\"Key\"),\n\t\t\tApiUser:               pulumi.String(\"User\"),\n\t\t\tBaseUrl:               pulumi.String(\"https://passthepopcorn.me\"),\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tMinimumSeeders:        pulumi.Int(1),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerPassThePopcorn;\nimport com.pulumi.radarr.Indexers.IndexerPassThePopcornArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerPassThePopcorn(\"example\", IndexerPassThePopcornArgs.builder()        \n            .apiKey(\"Key\")\n            .apiUser(\"User\")\n            .baseUrl(\"https://passthepopcorn.me\")\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerPassThePopcorn\n    properties:\n      apiKey: Key\n      apiUser: User\n      baseUrl: https://passthepopcorn.me\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerPassThePopcorn:IndexerPassThePopcorn example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "apiUser": {
                    "type": "string",
                    "description": "API user.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerPassThePopcorn name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "apiUser",
                "baseUrl",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "priority",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "apiUser": {
                    "type": "string",
                    "description": "API user.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerPassThePopcorn name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerPassThePopcorn resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "apiUser": {
                        "type": "string",
                        "description": "API user.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Languages list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerPassThePopcorn name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Flag list.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerRarbg:IndexerRarbg": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Rarbg resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [Rarbg](https://wiki.servarr.com/radarr/supported#rarbg).\n\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerRarbg:IndexerRarbg example 1\n```\n\n ",
            "properties": {
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "captchaToken": {
                    "type": "string",
                    "description": "Captcha token.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Multi languages.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerRarbg name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "rankedOnly": {
                    "type": "boolean",
                    "description": "Allow ranked only.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Required flags.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "baseUrl",
                "captchaToken",
                "categories",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "priority",
                "rankedOnly",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "captchaToken": {
                    "type": "string",
                    "description": "Captcha token.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Multi languages.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerRarbg name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "rankedOnly": {
                    "type": "boolean",
                    "description": "Allow ranked only.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Required flags.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerRarbg resources.\n",
                "properties": {
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "captchaToken": {
                        "type": "string",
                        "description": "Captcha token.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Series list.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Multi languages.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerRarbg name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "rankedOnly": {
                        "type": "boolean",
                        "description": "Allow ranked only.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Required flags.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerTorrentPotato:IndexerTorrentPotato": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer TorrentPotato resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [TorrentPotato](https://wiki.servarr.com/radarr/supported#torrentpotato).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerTorrentPotato(\"example\", {\n    baseUrl: \"http://127.0.0.1\",\n    enableAutomaticSearch: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n    passkey: \"Key\",\n    user: \"User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerTorrentPotato(\"example\",\n    base_url=\"http://127.0.0.1\",\n    enable_automatic_search=True,\n    minimum_seeders=1,\n    name=\"Example\",\n    passkey=\"Key\",\n    user=\"User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerTorrentPotato(\"example\", new()\n    {\n        BaseUrl = \"http://127.0.0.1\",\n        EnableAutomaticSearch = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n        Passkey = \"Key\",\n        User = \"User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerTorrentPotato(ctx, \"example\", \u0026Indexers.IndexerTorrentPotatoArgs{\n\t\t\tBaseUrl:               pulumi.String(\"http://127.0.0.1\"),\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tMinimumSeeders:        pulumi.Int(1),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t\tPasskey:               pulumi.String(\"Key\"),\n\t\t\tUser:                  pulumi.String(\"User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerTorrentPotato;\nimport com.pulumi.radarr.Indexers.IndexerTorrentPotatoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerTorrentPotato(\"example\", IndexerTorrentPotatoArgs.builder()        \n            .baseUrl(\"http://127.0.0.1\")\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .passkey(\"Key\")\n            .user(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerTorrentPotato\n    properties:\n      baseUrl: http://127.0.0.1\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n      passkey: Key\n      user: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerTorrentPotato:IndexerTorrentPotato example 1\n```\n\n ",
            "properties": {
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorrentPotato name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User.\n"
                }
            },
            "required": [
                "baseUrl",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "passkey",
                "priority",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags",
                "user"
            ],
            "inputProperties": {
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorrentPotato name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "user": {
                    "type": "string",
                    "description": "User.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerTorrentPotato resources.\n",
                "properties": {
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Languages list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerTorrentPotato name.\n"
                    },
                    "passkey": {
                        "type": "string",
                        "description": "Passkey.\n",
                        "secret": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Flag list.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "User.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerTorrentRss:IndexerTorrentRss": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Torrent RSS resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [Torrent RSS](https://wiki.servarr.com/radarr/supported#torrentrssindexer).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerTorrentRss;\nimport com.pulumi.radarr.Indexers.IndexerTorrentRssArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerTorrentRss(\"example\", IndexerTorrentRssArgs.builder()        \n            .allowZeroSize(true)\n            .baseUrl(\"https://rss.io\")\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerTorrentRss\n    properties:\n      allowZeroSize: true\n      baseUrl: https://rss.io\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerTorrentRss:IndexerTorrentRss example 1\n```\n\n ",
            "properties": {
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorrentRss name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "allowZeroSize",
                "baseUrl",
                "cookie",
                "downloadClientId",
                "enableRss",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "priority",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorrentRss name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerTorrentRss resources.\n",
                "properties": {
                    "allowZeroSize": {
                        "type": "boolean",
                        "description": "Allow zero size files.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "cookie": {
                        "type": "string",
                        "description": "Cookie.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Languages list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerTorrentRss name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Flag list.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/indexerTorznab:IndexerTorznab": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Torznab resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/radarr/settings#indexers) and [Torznab](https://wiki.servarr.com/radarr/supported#torznab).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.IndexerTorznab(\"example\", {\n    apiPath: \"/nabapi\",\n    baseUrl: \"https://feed.animetosho.org\",\n    categories: [\n        2000,\n        2010,\n    ],\n    enableAutomaticSearch: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n    removeYear: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.IndexerTorznab(\"example\",\n    api_path=\"/nabapi\",\n    base_url=\"https://feed.animetosho.org\",\n    categories=[\n        2000,\n        2010,\n    ],\n    enable_automatic_search=True,\n    minimum_seeders=1,\n    name=\"Example\",\n    remove_year=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.IndexerTorznab(\"example\", new()\n    {\n        ApiPath = \"/nabapi\",\n        BaseUrl = \"https://feed.animetosho.org\",\n        Categories = new[]\n        {\n            2000,\n            2010,\n        },\n        EnableAutomaticSearch = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n        RemoveYear = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerTorznab(ctx, \"example\", \u0026Indexers.IndexerTorznabArgs{\n\t\t\tApiPath: pulumi.String(\"/nabapi\"),\n\t\t\tBaseUrl: pulumi.String(\"https://feed.animetosho.org\"),\n\t\t\tCategories: pulumi.IntArray{\n\t\t\t\tpulumi.Int(2000),\n\t\t\t\tpulumi.Int(2010),\n\t\t\t},\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tMinimumSeeders:        pulumi.Int(1),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t\tRemoveYear:            pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexerTorznab;\nimport com.pulumi.radarr.Indexers.IndexerTorznabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerTorznab(\"example\", IndexerTorznabArgs.builder()        \n            .apiPath(\"/nabapi\")\n            .baseUrl(\"https://feed.animetosho.org\")\n            .categories(            \n                2000,\n                2010)\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .removeYear(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:IndexerTorznab\n    properties:\n      apiPath: /nabapi\n      baseUrl: https://feed.animetosho.org\n      categories:\n        - 2000\n        - 2010\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n      removeYear: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/indexerTorznab:IndexerTorznab example 1\n```\n\n ",
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorznab name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeYear": {
                    "type": "boolean",
                    "description": "Remove year.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "additionalParameters",
                "apiKey",
                "apiPath",
                "baseUrl",
                "categories",
                "downloadClientId",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "multiLanguages",
                "name",
                "priority",
                "removeYear",
                "requiredFlags",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "downloadClientId": {
                    "type": "integer",
                    "description": "Download client ID.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "multiLanguages": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Languages list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorznab name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "removeYear": {
                    "type": "boolean",
                    "description": "Remove year.\n"
                },
                "requiredFlags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Flag list.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerTorznab resources.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "apiPath": {
                        "type": "string",
                        "description": "API path.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Categories list.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Languages list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerTorznab name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "removeYear": {
                        "type": "boolean",
                        "description": "Remove year.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Flag list.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Indexers/restriction:Restriction": {
            "description": "\u003c!-- subcategory:Indexers --\u003eRestriction resource.\nFor more information refer to [Restriction](https://wiki.servarr.com/radarr/settings#remote-path-restrictions) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.indexers.Restriction(\"example\", {\n    ignored: \"string1\",\n    required: \"string2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.indexers.Restriction(\"example\",\n    ignored=\"string1\",\n    required=\"string2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Indexers.Restriction(\"example\", new()\n    {\n        Ignored = \"string1\",\n        Required = \"string2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewRestriction(ctx, \"example\", \u0026Indexers.RestrictionArgs{\n\t\t\tIgnored:  pulumi.String(\"string1\"),\n\t\t\tRequired: pulumi.String(\"string2\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.Restriction;\nimport com.pulumi.radarr.Indexers.RestrictionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Restriction(\"example\", RestrictionArgs.builder()        \n            .ignored(\"string1\")\n            .required(\"string2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Indexers:Restriction\n    properties:\n      ignored: string1\n      required: string2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Indexers/restriction:Restriction example 10\n```\n\n ",
            "properties": {
                "ignored": {
                    "type": "string",
                    "description": "Ignored. Either one of 'required' or 'ignored' must be set.\n"
                },
                "required": {
                    "type": "string",
                    "description": "Required. Either one of 'required' or 'ignored' must be set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "ignored",
                "required",
                "tags"
            ],
            "inputProperties": {
                "ignored": {
                    "type": "string",
                    "description": "Ignored. Either one of 'required' or 'ignored' must be set.\n"
                },
                "required": {
                    "type": "string",
                    "description": "Required. Either one of 'required' or 'ignored' must be set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Restriction resources.\n",
                "properties": {
                    "ignored": {
                        "type": "string",
                        "description": "Ignored. Either one of 'required' or 'ignored' must be set.\n"
                    },
                    "required": {
                        "type": "string",
                        "description": "Required. Either one of 'required' or 'ignored' must be set.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:MediaManagement/mediaManagement:MediaManagement": {
            "description": "\u003c!-- subcategory:Media Management --\u003eMedia Management resource.\nFor more information refer to [Naming](https://wiki.servarr.com/radarr/settings#file-management) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.MediaManagement.MediaManagement;\nimport com.pulumi.radarr.MediaManagement.MediaManagementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MediaManagement(\"example\", MediaManagementArgs.builder()        \n            .colonReplacementFormat(\"%s\")\n            .includeQuality(false)\n            .movieFolderFormat(\"{Movie Title} ({Release Year})\")\n            .renameMovies(true)\n            .replaceIllegalCharacters(false)\n            .replaceSpaces(false)\n            .standardMovieFormat(\"{Movie Title} ({Release Year}) {Quality Full}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:MediaManagement:MediaManagement\n    properties:\n      colonReplacementFormat: '%s'\n      includeQuality: false\n      movieFolderFormat: '{Movie Title} ({Release Year})'\n      renameMovies: true\n      replaceIllegalCharacters: false\n      replaceSpaces: false\n      standardMovieFormat: '{Movie Title} ({Release Year}) {Quality Full}'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import radarr:MediaManagement/mediaManagement:MediaManagement example\n```\n\n ",
            "properties": {
                "autoRenameFolders": {
                    "type": "boolean",
                    "description": "Auto rename folders.\n"
                },
                "autoUnmonitorPreviouslyDownloadedMovies": {
                    "type": "boolean",
                    "description": "Auto unmonitor previously downloaded movies.\n"
                },
                "chmodFolder": {
                    "type": "string",
                    "description": "Permission in linux format.\n"
                },
                "chownGroup": {
                    "type": "string",
                    "description": "Group used for permission.\n"
                },
                "copyUsingHardlinks": {
                    "type": "boolean",
                    "description": "Use hardlinks instead of copy.\n"
                },
                "createEmptyMovieFolders": {
                    "type": "boolean",
                    "description": "Create empty movies directories.\n"
                },
                "deleteEmptyFolders": {
                    "type": "boolean",
                    "description": "Delete empty movies directories.\n"
                },
                "downloadPropersAndRepacks": {
                    "type": "string",
                    "description": "Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.\n"
                },
                "enableMediaInfo": {
                    "type": "boolean",
                    "description": "Scan files details.\n"
                },
                "extraFileExtensions": {
                    "type": "string",
                    "description": "Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).\n"
                },
                "fileDate": {
                    "type": "string",
                    "description": "Define the file date modification. valid inputs are: 'none', 'cinemas, and 'release'.\n"
                },
                "importExtraFiles": {
                    "type": "boolean",
                    "description": "Import extra files. If enabled it will leverage 'extra*file*extensions'.\n"
                },
                "minimumFreeSpaceWhenImporting": {
                    "type": "integer",
                    "description": "Minimum free space in MB to allow import.\n"
                },
                "pathsDefaultStatic": {
                    "type": "boolean",
                    "description": "Path default static.\n"
                },
                "recycleBin": {
                    "type": "string",
                    "description": "Recycle bin absolute path.\n"
                },
                "recycleBinCleanupDays": {
                    "type": "integer",
                    "description": "Recyle bin days of retention.\n"
                },
                "rescanAfterRefresh": {
                    "type": "string",
                    "description": "Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.\n"
                },
                "setPermissionsLinux": {
                    "type": "boolean",
                    "description": "Set permission for imported files.\n"
                },
                "skipFreeSpaceCheckWhenImporting": {
                    "type": "boolean",
                    "description": "Skip free space check before importing.\n"
                }
            },
            "required": [
                "autoRenameFolders",
                "autoUnmonitorPreviouslyDownloadedMovies",
                "chmodFolder",
                "chownGroup",
                "copyUsingHardlinks",
                "createEmptyMovieFolders",
                "deleteEmptyFolders",
                "downloadPropersAndRepacks",
                "enableMediaInfo",
                "extraFileExtensions",
                "fileDate",
                "importExtraFiles",
                "minimumFreeSpaceWhenImporting",
                "pathsDefaultStatic",
                "recycleBin",
                "recycleBinCleanupDays",
                "rescanAfterRefresh",
                "setPermissionsLinux",
                "skipFreeSpaceCheckWhenImporting"
            ],
            "inputProperties": {
                "autoRenameFolders": {
                    "type": "boolean",
                    "description": "Auto rename folders.\n"
                },
                "autoUnmonitorPreviouslyDownloadedMovies": {
                    "type": "boolean",
                    "description": "Auto unmonitor previously downloaded movies.\n"
                },
                "chmodFolder": {
                    "type": "string",
                    "description": "Permission in linux format.\n"
                },
                "chownGroup": {
                    "type": "string",
                    "description": "Group used for permission.\n"
                },
                "copyUsingHardlinks": {
                    "type": "boolean",
                    "description": "Use hardlinks instead of copy.\n"
                },
                "createEmptyMovieFolders": {
                    "type": "boolean",
                    "description": "Create empty movies directories.\n"
                },
                "deleteEmptyFolders": {
                    "type": "boolean",
                    "description": "Delete empty movies directories.\n"
                },
                "downloadPropersAndRepacks": {
                    "type": "string",
                    "description": "Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.\n"
                },
                "enableMediaInfo": {
                    "type": "boolean",
                    "description": "Scan files details.\n"
                },
                "extraFileExtensions": {
                    "type": "string",
                    "description": "Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).\n"
                },
                "fileDate": {
                    "type": "string",
                    "description": "Define the file date modification. valid inputs are: 'none', 'cinemas, and 'release'.\n"
                },
                "importExtraFiles": {
                    "type": "boolean",
                    "description": "Import extra files. If enabled it will leverage 'extra*file*extensions'.\n"
                },
                "minimumFreeSpaceWhenImporting": {
                    "type": "integer",
                    "description": "Minimum free space in MB to allow import.\n"
                },
                "pathsDefaultStatic": {
                    "type": "boolean",
                    "description": "Path default static.\n"
                },
                "recycleBin": {
                    "type": "string",
                    "description": "Recycle bin absolute path.\n"
                },
                "recycleBinCleanupDays": {
                    "type": "integer",
                    "description": "Recyle bin days of retention.\n"
                },
                "rescanAfterRefresh": {
                    "type": "string",
                    "description": "Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.\n"
                },
                "setPermissionsLinux": {
                    "type": "boolean",
                    "description": "Set permission for imported files.\n"
                },
                "skipFreeSpaceCheckWhenImporting": {
                    "type": "boolean",
                    "description": "Skip free space check before importing.\n"
                }
            },
            "requiredInputs": [
                "autoRenameFolders",
                "autoUnmonitorPreviouslyDownloadedMovies",
                "chmodFolder",
                "chownGroup",
                "copyUsingHardlinks",
                "createEmptyMovieFolders",
                "deleteEmptyFolders",
                "downloadPropersAndRepacks",
                "enableMediaInfo",
                "extraFileExtensions",
                "fileDate",
                "importExtraFiles",
                "minimumFreeSpaceWhenImporting",
                "pathsDefaultStatic",
                "recycleBin",
                "recycleBinCleanupDays",
                "rescanAfterRefresh",
                "setPermissionsLinux",
                "skipFreeSpaceCheckWhenImporting"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MediaManagement resources.\n",
                "properties": {
                    "autoRenameFolders": {
                        "type": "boolean",
                        "description": "Auto rename folders.\n"
                    },
                    "autoUnmonitorPreviouslyDownloadedMovies": {
                        "type": "boolean",
                        "description": "Auto unmonitor previously downloaded movies.\n"
                    },
                    "chmodFolder": {
                        "type": "string",
                        "description": "Permission in linux format.\n"
                    },
                    "chownGroup": {
                        "type": "string",
                        "description": "Group used for permission.\n"
                    },
                    "copyUsingHardlinks": {
                        "type": "boolean",
                        "description": "Use hardlinks instead of copy.\n"
                    },
                    "createEmptyMovieFolders": {
                        "type": "boolean",
                        "description": "Create empty movies directories.\n"
                    },
                    "deleteEmptyFolders": {
                        "type": "boolean",
                        "description": "Delete empty movies directories.\n"
                    },
                    "downloadPropersAndRepacks": {
                        "type": "string",
                        "description": "Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.\n"
                    },
                    "enableMediaInfo": {
                        "type": "boolean",
                        "description": "Scan files details.\n"
                    },
                    "extraFileExtensions": {
                        "type": "string",
                        "description": "Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).\n"
                    },
                    "fileDate": {
                        "type": "string",
                        "description": "Define the file date modification. valid inputs are: 'none', 'cinemas, and 'release'.\n"
                    },
                    "importExtraFiles": {
                        "type": "boolean",
                        "description": "Import extra files. If enabled it will leverage 'extra*file*extensions'.\n"
                    },
                    "minimumFreeSpaceWhenImporting": {
                        "type": "integer",
                        "description": "Minimum free space in MB to allow import.\n"
                    },
                    "pathsDefaultStatic": {
                        "type": "boolean",
                        "description": "Path default static.\n"
                    },
                    "recycleBin": {
                        "type": "string",
                        "description": "Recycle bin absolute path.\n"
                    },
                    "recycleBinCleanupDays": {
                        "type": "integer",
                        "description": "Recyle bin days of retention.\n"
                    },
                    "rescanAfterRefresh": {
                        "type": "string",
                        "description": "Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.\n"
                    },
                    "setPermissionsLinux": {
                        "type": "boolean",
                        "description": "Set permission for imported files.\n"
                    },
                    "skipFreeSpaceCheckWhenImporting": {
                        "type": "boolean",
                        "description": "Skip free space check before importing.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:MediaManagement/naming:Naming": {
            "description": "\u003c!-- subcategory:Media Management --\u003eNaming resource.\nFor more information refer to [Naming](https://wiki.servarr.com/radarr/settings#community-naming-suggestions) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.MediaManagement.Naming;\nimport com.pulumi.radarr.MediaManagement.NamingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Naming(\"example\", NamingArgs.builder()        \n            .autoRenameFolders(false)\n            .autoUnmonitorPreviouslyDownloadedMovies(false)\n            .chmodFolder(755)\n            .chownGroup(\"\")\n            .copyUsingHardlinks(true)\n            .createEmptyMovieFolders(false)\n            .deleteEmptyFolders(false)\n            .downloadPropersAndRepacks(\"doNotPrefer\")\n            .enableMediaInfo(true)\n            .extraFileExtensions(\"srt\")\n            .fileDate(\"none\")\n            .importExtraFiles(true)\n            .minimumFreeSpaceWhenImporting(100)\n            .pathsDefaultStatic(false)\n            .recycleBin(\"\")\n            .recycleBinCleanupDays(7)\n            .rescanAfterRefresh(\"afterManual\")\n            .setPermissionsLinux(false)\n            .skipFreeSpaceCheckWhenImporting(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:MediaManagement:Naming\n    properties:\n      autoRenameFolders: false\n      autoUnmonitorPreviouslyDownloadedMovies: false\n      chmodFolder: 755\n      chownGroup:\n      copyUsingHardlinks: true\n      createEmptyMovieFolders: false\n      deleteEmptyFolders: false\n      downloadPropersAndRepacks: doNotPrefer\n      enableMediaInfo: true\n      extraFileExtensions: srt\n      fileDate: none\n      importExtraFiles: true\n      minimumFreeSpaceWhenImporting: 100\n      pathsDefaultStatic: false\n      recycleBin:\n      recycleBinCleanupDays: 7\n      rescanAfterRefresh: afterManual\n      setPermissionsLinux: false\n      skipFreeSpaceCheckWhenImporting: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import radarr:MediaManagement/naming:Naming example\n```\n\n ",
            "properties": {
                "colonReplacementFormat": {
                    "type": "string",
                    "description": "Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.\n"
                },
                "includeQuality": {
                    "type": "boolean",
                    "description": "Include quality in file name.\n"
                },
                "movieFolderFormat": {
                    "type": "string",
                    "description": "Movie folder format.\n"
                },
                "renameMovies": {
                    "type": "boolean",
                    "description": "Radarr will use the existing file name if false.\n"
                },
                "replaceIllegalCharacters": {
                    "type": "boolean",
                    "description": "Replace illegal characters. They will be removed if false.\n"
                },
                "replaceSpaces": {
                    "type": "boolean",
                    "description": "Replace spaces.\n"
                },
                "standardMovieFormat": {
                    "type": "string",
                    "description": "Standard movie formatss.\n"
                }
            },
            "required": [
                "colonReplacementFormat",
                "includeQuality",
                "movieFolderFormat",
                "renameMovies",
                "replaceIllegalCharacters",
                "replaceSpaces",
                "standardMovieFormat"
            ],
            "inputProperties": {
                "colonReplacementFormat": {
                    "type": "string",
                    "description": "Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.\n"
                },
                "includeQuality": {
                    "type": "boolean",
                    "description": "Include quality in file name.\n"
                },
                "movieFolderFormat": {
                    "type": "string",
                    "description": "Movie folder format.\n"
                },
                "renameMovies": {
                    "type": "boolean",
                    "description": "Radarr will use the existing file name if false.\n"
                },
                "replaceIllegalCharacters": {
                    "type": "boolean",
                    "description": "Replace illegal characters. They will be removed if false.\n"
                },
                "replaceSpaces": {
                    "type": "boolean",
                    "description": "Replace spaces.\n"
                },
                "standardMovieFormat": {
                    "type": "string",
                    "description": "Standard movie formatss.\n"
                }
            },
            "requiredInputs": [
                "colonReplacementFormat",
                "includeQuality",
                "movieFolderFormat",
                "renameMovies",
                "replaceIllegalCharacters",
                "replaceSpaces",
                "standardMovieFormat"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Naming resources.\n",
                "properties": {
                    "colonReplacementFormat": {
                        "type": "string",
                        "description": "Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.\n"
                    },
                    "includeQuality": {
                        "type": "boolean",
                        "description": "Include quality in file name.\n"
                    },
                    "movieFolderFormat": {
                        "type": "string",
                        "description": "Movie folder format.\n"
                    },
                    "renameMovies": {
                        "type": "boolean",
                        "description": "Radarr will use the existing file name if false.\n"
                    },
                    "replaceIllegalCharacters": {
                        "type": "boolean",
                        "description": "Replace illegal characters. They will be removed if false.\n"
                    },
                    "replaceSpaces": {
                        "type": "boolean",
                        "description": "Replace spaces.\n"
                    },
                    "standardMovieFormat": {
                        "type": "string",
                        "description": "Standard movie formatss.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:MediaManagement/rootFolder:RootFolder": {
            "description": "\u003c!-- subcategory:Media Management --\u003eRoot Folder resource.\nFor more information refer to [Root Folders](https://wiki.servarr.com/radarr/settings#root-folders) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.mediamanagement.RootFolder(\"example\", {path: \"/tmp\"});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.media_management.RootFolder(\"example\", path=\"/tmp\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.MediaManagement.RootFolder(\"example\", new()\n    {\n        Path = \"/tmp\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.NewRootFolder(ctx, \"example\", \u0026MediaManagement.RootFolderArgs{\n\t\t\tPath: pulumi.String(\"/tmp\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.MediaManagement.RootFolder;\nimport com.pulumi.radarr.MediaManagement.RootFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RootFolder(\"example\", RootFolderArgs.builder()        \n            .path(\"/tmp\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:MediaManagement:RootFolder\n    properties:\n      path: /tmp\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:MediaManagement/rootFolder:RootFolder example 10\n```\n\n ",
            "properties": {
                "accessible": {
                    "type": "boolean",
                    "description": "Access flag.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Root Folder absolute path.\n"
                },
                "unmappedFolders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:MediaManagement/RootFolderUnmappedFolder:RootFolderUnmappedFolder"
                    },
                    "description": "List of folders with no associated series.\n"
                }
            },
            "required": [
                "accessible",
                "path",
                "unmappedFolders"
            ],
            "inputProperties": {
                "path": {
                    "type": "string",
                    "description": "Root Folder absolute path.\n"
                }
            },
            "requiredInputs": [
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RootFolder resources.\n",
                "properties": {
                    "accessible": {
                        "type": "boolean",
                        "description": "Access flag.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Root Folder absolute path.\n"
                    },
                    "unmappedFolders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:MediaManagement/RootFolderUnmappedFolder:RootFolderUnmappedFolder"
                        },
                        "description": "List of folders with no associated series.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Metadata/metadata:Metadata": {
            "description": "\u003c!-- subcategory:Metadata --\u003eGeneric Metadata resource. When possible use a specific resource instead.\nFor more information refer to [Metadata](https://wiki.servarr.com/radarr/settings#metadata) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.metadata.Metadata(\"example\", {\n    configContract: \"MediaBrowserMetadataSettings\",\n    enable: true,\n    implementation: \"MediaBrowserMetadata\",\n    movieMetadata: true,\n    name: \"Example\",\n    tags: [\n        1,\n        2,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.metadata.Metadata(\"example\",\n    config_contract=\"MediaBrowserMetadataSettings\",\n    enable=True,\n    implementation=\"MediaBrowserMetadata\",\n    movie_metadata=True,\n    name=\"Example\",\n    tags=[\n        1,\n        2,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Metadata.Metadata(\"example\", new()\n    {\n        ConfigContract = \"MediaBrowserMetadataSettings\",\n        Enable = true,\n        Implementation = \"MediaBrowserMetadata\",\n        MovieMetadata = true,\n        Name = \"Example\",\n        Tags = new[]\n        {\n            1,\n            2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.NewMetadata(ctx, \"example\", \u0026Metadata.MetadataArgs{\n\t\t\tConfigContract: pulumi.String(\"MediaBrowserMetadataSettings\"),\n\t\t\tEnable:         pulumi.Bool(true),\n\t\t\tImplementation: pulumi.String(\"MediaBrowserMetadata\"),\n\t\t\tMovieMetadata:  pulumi.Bool(true),\n\t\t\tName:           pulumi.String(\"Example\"),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Metadata.Metadata;\nimport com.pulumi.radarr.Metadata.MetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Metadata(\"example\", MetadataArgs.builder()        \n            .configContract(\"MediaBrowserMetadataSettings\")\n            .enable(true)\n            .implementation(\"MediaBrowserMetadata\")\n            .movieMetadata(true)\n            .name(\"Example\")\n            .tags(            \n                1,\n                2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Metadata:Metadata\n    properties:\n      configContract: MediaBrowserMetadataSettings\n      enable: true\n      implementation: MediaBrowserMetadata\n      movieMetadata: true\n      name: Example\n      tags:\n        - 1\n        - 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Metadata/metadata:Metadata example 1\n```\n\n ",
            "properties": {
                "addCollectionName": {
                    "type": "boolean",
                    "description": "Add collection name flag.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Metadata configuration template.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Metadata implementation name.\n"
                },
                "movieImages": {
                    "type": "boolean",
                    "description": "Movie images flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metafata flag.\n"
                },
                "movieMetadataLanguage": {
                    "type": "integer",
                    "description": "Movie metadata language.\n"
                },
                "movieMetadataUrl": {
                    "type": "boolean",
                    "description": "Movie metadata URL flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useMovieNfo": {
                    "type": "boolean",
                    "description": "Use movie nfo flag.\n"
                }
            },
            "required": [
                "addCollectionName",
                "configContract",
                "enable",
                "implementation",
                "movieImages",
                "movieMetadata",
                "movieMetadataLanguage",
                "movieMetadataUrl",
                "name",
                "tags",
                "useMovieNfo"
            ],
            "inputProperties": {
                "addCollectionName": {
                    "type": "boolean",
                    "description": "Add collection name flag.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Metadata configuration template.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Metadata implementation name.\n"
                },
                "movieImages": {
                    "type": "boolean",
                    "description": "Movie images flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metafata flag.\n"
                },
                "movieMetadataLanguage": {
                    "type": "integer",
                    "description": "Movie metadata language.\n"
                },
                "movieMetadataUrl": {
                    "type": "boolean",
                    "description": "Movie metadata URL flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useMovieNfo": {
                    "type": "boolean",
                    "description": "Use movie nfo flag.\n"
                }
            },
            "requiredInputs": [
                "configContract",
                "implementation",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Metadata resources.\n",
                "properties": {
                    "addCollectionName": {
                        "type": "boolean",
                        "description": "Add collection name flag.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Metadata configuration template.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Metadata implementation name.\n"
                    },
                    "movieImages": {
                        "type": "boolean",
                        "description": "Movie images flag.\n"
                    },
                    "movieMetadata": {
                        "type": "boolean",
                        "description": "Movie metafata flag.\n"
                    },
                    "movieMetadataLanguage": {
                        "type": "integer",
                        "description": "Movie metadata language.\n"
                    },
                    "movieMetadataUrl": {
                        "type": "boolean",
                        "description": "Movie metadata URL flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Metadata name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useMovieNfo": {
                        "type": "boolean",
                        "description": "Use movie nfo flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Metadata/metadataConfig:MetadataConfig": {
            "description": "\u003c!-- subcategory:Metadata --\u003eMetadata Config resource.\nFor more information refer to [Metadata](https://wiki.servarr.com/radarr/settings#options) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.metadata.MetadataConfig(\"example\", {certificationCountry: \"us\"});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.metadata.MetadataConfig(\"example\", certification_country=\"us\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Metadata.MetadataConfig(\"example\", new()\n    {\n        CertificationCountry = \"us\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.NewMetadataConfig(ctx, \"example\", \u0026Metadata.MetadataConfigArgs{\n\t\t\tCertificationCountry: pulumi.String(\"us\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Metadata.MetadataConfig;\nimport com.pulumi.radarr.Metadata.MetadataConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MetadataConfig(\"example\", MetadataConfigArgs.builder()        \n            .certificationCountry(\"us\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Metadata:MetadataConfig\n    properties:\n      certificationCountry: us\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import radarr:Metadata/metadataConfig:MetadataConfig example\n```\n\n ",
            "properties": {
                "certificationCountry": {
                    "type": "string",
                    "description": "Certification Country.\n"
                }
            },
            "required": [
                "certificationCountry"
            ],
            "inputProperties": {
                "certificationCountry": {
                    "type": "string",
                    "description": "Certification Country.\n"
                }
            },
            "requiredInputs": [
                "certificationCountry"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetadataConfig resources.\n",
                "properties": {
                    "certificationCountry": {
                        "type": "string",
                        "description": "Certification Country.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Metadata/metadataEmby:MetadataEmby": {
            "description": "\u003c!-- subcategory:Metadata --\u003eMetadata Emby resource.\nFor more information refer to [Metadata](https://wiki.servarr.com/radarr/settings#metadata) and [Emby](https://wiki.servarr.com/radarr/supported#mediabrowsermetadata).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.metadata.MetadataEmby(\"example\", {\n    enable: true,\n    movieMetadata: true,\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.metadata.MetadataEmby(\"example\",\n    enable=True,\n    movie_metadata=True,\n    name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Metadata.MetadataEmby(\"example\", new()\n    {\n        Enable = true,\n        MovieMetadata = true,\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.NewMetadataEmby(ctx, \"example\", \u0026Metadata.MetadataEmbyArgs{\n\t\t\tEnable:        pulumi.Bool(true),\n\t\t\tMovieMetadata: pulumi.Bool(true),\n\t\t\tName:          pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Metadata.MetadataEmby;\nimport com.pulumi.radarr.Metadata.MetadataEmbyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MetadataEmby(\"example\", MetadataEmbyArgs.builder()        \n            .enable(true)\n            .movieMetadata(true)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Metadata:MetadataEmby\n    properties:\n      enable: true\n      movieMetadata: true\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Metadata/metadataEmby:MetadataEmby example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metadata flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enable",
                "movieMetadata",
                "name",
                "tags"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metadata flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "movieMetadata",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetadataEmby resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "movieMetadata": {
                        "type": "boolean",
                        "description": "Movie metadata flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Metadata name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Metadata/metadataKodi:MetadataKodi": {
            "description": "\u003c!-- subcategory:Metadata --\u003eMetadata Kodi resource.\nFor more information refer to [Metadata](https://wiki.servarr.com/radarr/settings#metadata) and [KODI](https://wiki.servarr.com/radarr/supported#xbmcmetadata).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.metadata.MetadataKodi(\"example\", {\n    enable: true,\n    movieImages: true,\n    movieMetadata: true,\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.metadata.MetadataKodi(\"example\",\n    enable=True,\n    movie_images=True,\n    movie_metadata=True,\n    name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Metadata.MetadataKodi(\"example\", new()\n    {\n        Enable = true,\n        MovieImages = true,\n        MovieMetadata = true,\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.NewMetadataKodi(ctx, \"example\", \u0026Metadata.MetadataKodiArgs{\n\t\t\tEnable:        pulumi.Bool(true),\n\t\t\tMovieImages:   pulumi.Bool(true),\n\t\t\tMovieMetadata: pulumi.Bool(true),\n\t\t\tName:          pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Metadata.MetadataKodi;\nimport com.pulumi.radarr.Metadata.MetadataKodiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MetadataKodi(\"example\", MetadataKodiArgs.builder()        \n            .enable(true)\n            .movieImages(true)\n            .movieMetadata(true)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Metadata:MetadataKodi\n    properties:\n      enable: true\n      movieImages: true\n      movieMetadata: true\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Metadata/metadataKodi:MetadataKodi example 1\n```\n\n ",
            "properties": {
                "addCollectionName": {
                    "type": "boolean",
                    "description": "Add collection name flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "movieImages": {
                    "type": "boolean",
                    "description": "Movie images flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metafata flag.\n"
                },
                "movieMetadataLanguage": {
                    "type": "integer",
                    "description": "Movie metadata language.\n"
                },
                "movieMetadataUrl": {
                    "type": "boolean",
                    "description": "Movie metadata URL flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useMovieNfo": {
                    "type": "boolean",
                    "description": "Use movie nfo flag.\n"
                }
            },
            "required": [
                "addCollectionName",
                "enable",
                "movieImages",
                "movieMetadata",
                "movieMetadataLanguage",
                "movieMetadataUrl",
                "name",
                "tags",
                "useMovieNfo"
            ],
            "inputProperties": {
                "addCollectionName": {
                    "type": "boolean",
                    "description": "Add collection name flag.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "movieImages": {
                    "type": "boolean",
                    "description": "Movie images flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metafata flag.\n"
                },
                "movieMetadataLanguage": {
                    "type": "integer",
                    "description": "Movie metadata language.\n"
                },
                "movieMetadataUrl": {
                    "type": "boolean",
                    "description": "Movie metadata URL flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useMovieNfo": {
                    "type": "boolean",
                    "description": "Use movie nfo flag.\n"
                }
            },
            "requiredInputs": [
                "addCollectionName",
                "movieImages",
                "movieMetadata",
                "movieMetadataLanguage",
                "movieMetadataUrl",
                "name",
                "useMovieNfo"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetadataKodi resources.\n",
                "properties": {
                    "addCollectionName": {
                        "type": "boolean",
                        "description": "Add collection name flag.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "movieImages": {
                        "type": "boolean",
                        "description": "Movie images flag.\n"
                    },
                    "movieMetadata": {
                        "type": "boolean",
                        "description": "Movie metafata flag.\n"
                    },
                    "movieMetadataLanguage": {
                        "type": "integer",
                        "description": "Movie metadata language.\n"
                    },
                    "movieMetadataUrl": {
                        "type": "boolean",
                        "description": "Movie metadata URL flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Metadata name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useMovieNfo": {
                        "type": "boolean",
                        "description": "Use movie nfo flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Metadata/metadataRoksbox:MetadataRoksbox": {
            "description": "\u003c!-- subcategory:Metadata --\u003eMetadata Roksbox resource.\nFor more information refer to [Metadata](https://wiki.servarr.com/radarr/settings#metadata) and [ROKSBOX](https://wiki.servarr.com/radarr/supported#roksboxmetadata).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.metadata.MetadataRoksbox(\"example\", {\n    enable: true,\n    movieImages: true,\n    movieMetadata: true,\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.metadata.MetadataRoksbox(\"example\",\n    enable=True,\n    movie_images=True,\n    movie_metadata=True,\n    name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Metadata.MetadataRoksbox(\"example\", new()\n    {\n        Enable = true,\n        MovieImages = true,\n        MovieMetadata = true,\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.NewMetadataRoksbox(ctx, \"example\", \u0026Metadata.MetadataRoksboxArgs{\n\t\t\tEnable:        pulumi.Bool(true),\n\t\t\tMovieImages:   pulumi.Bool(true),\n\t\t\tMovieMetadata: pulumi.Bool(true),\n\t\t\tName:          pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Metadata.MetadataRoksbox;\nimport com.pulumi.radarr.Metadata.MetadataRoksboxArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MetadataRoksbox(\"example\", MetadataRoksboxArgs.builder()        \n            .enable(true)\n            .movieImages(true)\n            .movieMetadata(true)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Metadata:MetadataRoksbox\n    properties:\n      enable: true\n      movieImages: true\n      movieMetadata: true\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Metadata/metadataRoksbox:MetadataRoksbox example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "movieImages": {
                    "type": "boolean",
                    "description": "Movie images flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metadata flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enable",
                "movieImages",
                "movieMetadata",
                "name",
                "tags"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "movieImages": {
                    "type": "boolean",
                    "description": "Movie images flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metadata flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "movieImages",
                "movieMetadata",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetadataRoksbox resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "movieImages": {
                        "type": "boolean",
                        "description": "Movie images flag.\n"
                    },
                    "movieMetadata": {
                        "type": "boolean",
                        "description": "Movie metadata flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Metadata name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Metadata/metadataWdtv:MetadataWdtv": {
            "description": "\u003c!-- subcategory:Metadata --\u003eMetadata Wdtv resource.\nFor more information refer to [Metadata](https://wiki.servarr.com/radarr/settings#metadata) and [WDTV](https://wiki.servarr.com/radarr/supported#wdtvmetadata).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.metadata.MetadataWdtv(\"example\", {\n    enable: true,\n    movieImages: true,\n    movieMetadata: true,\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.metadata.MetadataWdtv(\"example\",\n    enable=True,\n    movie_images=True,\n    movie_metadata=True,\n    name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Metadata.MetadataWdtv(\"example\", new()\n    {\n        Enable = true,\n        MovieImages = true,\n        MovieMetadata = true,\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.NewMetadataWdtv(ctx, \"example\", \u0026Metadata.MetadataWdtvArgs{\n\t\t\tEnable:        pulumi.Bool(true),\n\t\t\tMovieImages:   pulumi.Bool(true),\n\t\t\tMovieMetadata: pulumi.Bool(true),\n\t\t\tName:          pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Metadata.MetadataWdtv;\nimport com.pulumi.radarr.Metadata.MetadataWdtvArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MetadataWdtv(\"example\", MetadataWdtvArgs.builder()        \n            .enable(true)\n            .movieImages(true)\n            .movieMetadata(true)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Metadata:MetadataWdtv\n    properties:\n      enable: true\n      movieImages: true\n      movieMetadata: true\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Metadata/metadataWdtv:MetadataWdtv example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "movieImages": {
                    "type": "boolean",
                    "description": "Movie images flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metadata flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enable",
                "movieImages",
                "movieMetadata",
                "name",
                "tags"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "movieImages": {
                    "type": "boolean",
                    "description": "Movie images flag.\n"
                },
                "movieMetadata": {
                    "type": "boolean",
                    "description": "Movie metadata flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata name.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "movieImages",
                "movieMetadata",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetadataWdtv resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "movieImages": {
                        "type": "boolean",
                        "description": "Movie images flag.\n"
                    },
                    "movieMetadata": {
                        "type": "boolean",
                        "description": "Movie metadata flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Metadata name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Movies/movie:Movie": {
            "description": "\u003c!-- subcategory:Movies --\u003eMovie resource.\nFor more information refer to [Movies](https://wiki.servarr.com/radarr/library#movies) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.movies.Movie(\"example\", {\n    minimumAvailability: \"inCinemas\",\n    monitored: false,\n    path: \"/movies/The_Matrix_1999\",\n    qualityProfileId: 1,\n    title: \"The Matrix\",\n    tmdbId: 603,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.movies.Movie(\"example\",\n    minimum_availability=\"inCinemas\",\n    monitored=False,\n    path=\"/movies/The_Matrix_1999\",\n    quality_profile_id=1,\n    title=\"The Matrix\",\n    tmdb_id=603)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Movies.Movie(\"example\", new()\n    {\n        MinimumAvailability = \"inCinemas\",\n        Monitored = false,\n        Path = \"/movies/The_Matrix_1999\",\n        QualityProfileId = 1,\n        Title = \"The Matrix\",\n        TmdbId = 603,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Movies\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Movies.NewMovie(ctx, \"example\", \u0026Movies.MovieArgs{\n\t\t\tMinimumAvailability: pulumi.String(\"inCinemas\"),\n\t\t\tMonitored:           pulumi.Bool(false),\n\t\t\tPath:                pulumi.String(\"/movies/The_Matrix_1999\"),\n\t\t\tQualityProfileId:    pulumi.Int(1),\n\t\t\tTitle:               pulumi.String(\"The Matrix\"),\n\t\t\tTmdbId:              pulumi.Int(603),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Movies.Movie;\nimport com.pulumi.radarr.Movies.MovieArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Movie(\"example\", MovieArgs.builder()        \n            .minimumAvailability(\"inCinemas\")\n            .monitored(false)\n            .path(\"/movies/The_Matrix_1999\")\n            .qualityProfileId(1)\n            .title(\"The Matrix\")\n            .tmdbId(603)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Movies:Movie\n    properties:\n      minimumAvailability: inCinemas\n      monitored: false\n      path: /movies/The_Matrix_1999\n      qualityProfileId: 1\n      title: The Matrix\n      tmdbId: 603\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Movies/movie:Movie example 10\n```\n\n ",
            "properties": {
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List genres.\n"
                },
                "imdbId": {
                    "type": "string",
                    "description": "IMDB ID.\n"
                },
                "isAvailable": {
                    "type": "boolean",
                    "description": "Availability flag.\n"
                },
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\nAllowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.\n"
                },
                "monitored": {
                    "type": "boolean",
                    "description": "Monitored flag.\n"
                },
                "originalLanguage": {
                    "$ref": "#/types/radarr:Movies/MovieOriginalLanguage:MovieOriginalLanguage",
                    "description": "Original language.\n"
                },
                "originalTitle": {
                    "type": "string",
                    "description": "Movie original title.\n"
                },
                "overview": {
                    "type": "string",
                    "description": "Overview.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Full movie path.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Movie status.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Movie title.\n"
                },
                "tmdbId": {
                    "type": "integer",
                    "description": "TMDB ID.\n"
                },
                "website": {
                    "type": "string",
                    "description": "Website.\n"
                },
                "year": {
                    "type": "integer",
                    "description": "Year.\n"
                },
                "youtubeTrailerId": {
                    "type": "string",
                    "description": "Youtube trailer ID.\n"
                }
            },
            "required": [
                "genres",
                "imdbId",
                "isAvailable",
                "minimumAvailability",
                "monitored",
                "originalLanguage",
                "originalTitle",
                "overview",
                "path",
                "qualityProfileId",
                "status",
                "tags",
                "title",
                "tmdbId",
                "website",
                "year",
                "youtubeTrailerId"
            ],
            "inputProperties": {
                "minimumAvailability": {
                    "type": "string",
                    "description": "Minimum availability.\nAllowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.\n"
                },
                "monitored": {
                    "type": "boolean",
                    "description": "Monitored flag.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Full movie path.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Movie title.\n"
                },
                "tmdbId": {
                    "type": "integer",
                    "description": "TMDB ID.\n"
                }
            },
            "requiredInputs": [
                "monitored",
                "path",
                "qualityProfileId",
                "title",
                "tmdbId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Movie resources.\n",
                "properties": {
                    "genres": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List genres.\n"
                    },
                    "imdbId": {
                        "type": "string",
                        "description": "IMDB ID.\n"
                    },
                    "isAvailable": {
                        "type": "boolean",
                        "description": "Availability flag.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\nAllowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.\n"
                    },
                    "monitored": {
                        "type": "boolean",
                        "description": "Monitored flag.\n"
                    },
                    "originalLanguage": {
                        "$ref": "#/types/radarr:Movies/MovieOriginalLanguage:MovieOriginalLanguage",
                        "description": "Original language.\n"
                    },
                    "originalTitle": {
                        "type": "string",
                        "description": "Movie original title.\n"
                    },
                    "overview": {
                        "type": "string",
                        "description": "Overview.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Full movie path.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Movie status.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Movie title.\n"
                    },
                    "tmdbId": {
                        "type": "integer",
                        "description": "TMDB ID.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "Website.\n"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Year.\n"
                    },
                    "youtubeTrailerId": {
                        "type": "string",
                        "description": "Youtube trailer ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notification:Notification": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.Notification(\"example\", {\n    configContract: \"CustomScriptSettings\",\n    implementation: \"CustomScript\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onRename: false,\n    onUpgrade: true,\n    path: \"/scripts/radarr.sh\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.Notification(\"example\",\n    config_contract=\"CustomScriptSettings\",\n    implementation=\"CustomScript\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_rename=False,\n    on_upgrade=True,\n    path=\"/scripts/radarr.sh\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.Notification(\"example\", new()\n    {\n        ConfigContract = \"CustomScriptSettings\",\n        Implementation = \"CustomScript\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnRename = false,\n        OnUpgrade = true,\n        Path = \"/scripts/radarr.sh\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotification(ctx, \"example\", \u0026Notifications.NotificationArgs{\n\t\t\tConfigContract:              pulumi.String(\"CustomScriptSettings\"),\n\t\t\tImplementation:              pulumi.String(\"CustomScript\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnRename:                    pulumi.Bool(false),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPath:                        pulumi.String(\"/scripts/radarr.sh\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.Notification;\nimport com.pulumi.radarr.Notifications.NotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Notification(\"example\", NotificationArgs.builder()        \n            .configContract(\"CustomScriptSettings\")\n            .implementation(\"CustomScript\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onRename(false)\n            .onUpgrade(true)\n            .path(\"/scripts/radarr.sh\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:Notification\n    properties:\n      configContract: CustomScriptSettings\n      implementation: CustomScript\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onRename: false\n      onUpgrade: true\n      path: /scripts/radarr.sh\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notification:Notification example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n"
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n"
                },
                "alwaysUpdate": {
                    "type": "boolean",
                    "description": "Always update flag.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App token.\n"
                },
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Auth token.\n"
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Author.\n"
                },
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Channel tags.\n"
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "cleanLibrary": {
                    "type": "boolean",
                    "description": "Clean library flag.\n"
                },
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Notification configuration template.\n"
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer key.\n"
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer secret.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Device IDs.\n"
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "displayTime": {
                    "type": "integer",
                    "description": "Display time.\n"
                },
                "event": {
                    "type": "string",
                    "description": "Event.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specific tags.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "grabFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Notification implementation name.\n"
                },
                "importFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n"
                },
                "mapFrom": {
                    "type": "string",
                    "description": "Map From.\n"
                },
                "mapTo": {
                    "type": "string",
                    "description": "Map To.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notify flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "password.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n"
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Add silently flag.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "server": {
                    "type": "string",
                    "description": "server.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server url.\n"
                },
                "signIn": {
                    "type": "string",
                    "description": "Sign in.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Topics.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook url.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenSecret",
                "alwaysUpdate",
                "apiKey",
                "appToken",
                "arguments",
                "authToken",
                "authUser",
                "author",
                "avatar",
                "bccs",
                "botToken",
                "ccs",
                "channel",
                "channelTags",
                "chatId",
                "cleanLibrary",
                "clickUrl",
                "configContract",
                "consumerKey",
                "consumerSecret",
                "deviceIds",
                "deviceNames",
                "devices",
                "directMessage",
                "displayTime",
                "event",
                "expire",
                "expires",
                "fieldTags",
                "from",
                "grabFields",
                "host",
                "icon",
                "implementation",
                "importFields",
                "includeHealthWarnings",
                "instanceName",
                "key",
                "mapFrom",
                "mapTo",
                "mention",
                "method",
                "name",
                "notify",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "password",
                "path",
                "port",
                "priority",
                "recipients",
                "refreshToken",
                "requireEncryption",
                "retry",
                "sendSilently",
                "senderDomain",
                "senderId",
                "server",
                "serverUrl",
                "signIn",
                "sound",
                "tags",
                "tos",
                "token",
                "topics",
                "updateLibrary",
                "url",
                "useEuEndpoint",
                "useSsl",
                "userKey",
                "username",
                "webHookUrl"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n"
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n"
                },
                "alwaysUpdate": {
                    "type": "boolean",
                    "description": "Always update flag.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App token.\n"
                },
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Auth token.\n"
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Author.\n"
                },
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Channel tags.\n"
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "cleanLibrary": {
                    "type": "boolean",
                    "description": "Clean library flag.\n"
                },
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Notification configuration template.\n"
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer key.\n"
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer secret.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Device IDs.\n"
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "displayTime": {
                    "type": "integer",
                    "description": "Display time.\n"
                },
                "event": {
                    "type": "string",
                    "description": "Event.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "Expires.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specific tags.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "grabFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Notification implementation name.\n"
                },
                "importFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n"
                },
                "mapFrom": {
                    "type": "string",
                    "description": "Map From.\n"
                },
                "mapTo": {
                    "type": "string",
                    "description": "Map To.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notify flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "password.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n"
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Add silently flag.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "server": {
                    "type": "string",
                    "description": "server.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server url.\n"
                },
                "signIn": {
                    "type": "string",
                    "description": "Sign in.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Topics.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook url.\n"
                }
            },
            "requiredInputs": [
                "configContract",
                "implementation",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notification resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n"
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n"
                    },
                    "alwaysUpdate": {
                        "type": "boolean",
                        "description": "Always update flag.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "appToken": {
                        "type": "string",
                        "description": "App token.\n"
                    },
                    "arguments": {
                        "type": "string",
                        "description": "Arguments.\n"
                    },
                    "authToken": {
                        "type": "string",
                        "description": "Auth token.\n"
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Author.\n"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "Avatar.\n"
                    },
                    "bccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Bcc.\n"
                    },
                    "botToken": {
                        "type": "string",
                        "description": "Bot token.\n"
                    },
                    "ccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cc.\n"
                    },
                    "channel": {
                        "type": "string",
                        "description": "Channel.\n"
                    },
                    "channelTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Channel tags.\n"
                    },
                    "chatId": {
                        "type": "string",
                        "description": "Chat ID.\n"
                    },
                    "cleanLibrary": {
                        "type": "boolean",
                        "description": "Clean library flag.\n"
                    },
                    "clickUrl": {
                        "type": "string",
                        "description": "Click URL.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Notification configuration template.\n"
                    },
                    "consumerKey": {
                        "type": "string",
                        "description": "Consumer key.\n"
                    },
                    "consumerSecret": {
                        "type": "string",
                        "description": "Consumer secret.\n"
                    },
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Device IDs.\n"
                    },
                    "deviceNames": {
                        "type": "string",
                        "description": "Device names.\n"
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices.\n"
                    },
                    "directMessage": {
                        "type": "boolean",
                        "description": "Direct message flag.\n"
                    },
                    "displayTime": {
                        "type": "integer",
                        "description": "Display time.\n"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event.\n"
                    },
                    "expire": {
                        "type": "integer",
                        "description": "Expire.\n"
                    },
                    "expires": {
                        "type": "string",
                        "description": "Expires.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specific tags.\n"
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "grabFields": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Host.\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Notification implementation name.\n"
                    },
                    "importFields": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key.\n"
                    },
                    "mapFrom": {
                        "type": "string",
                        "description": "Map From.\n"
                    },
                    "mapTo": {
                        "type": "string",
                        "description": "Map To.\n"
                    },
                    "mention": {
                        "type": "string",
                        "description": "Mention.\n"
                    },
                    "method": {
                        "type": "integer",
                        "description": "Method. `1` POST, `2` PUT.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "notify": {
                        "type": "boolean",
                        "description": "Notify flag.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "password.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recipients.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Refresh token.\n"
                    },
                    "requireEncryption": {
                        "type": "boolean",
                        "description": "Require encryption flag.\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "Retry.\n"
                    },
                    "sendSilently": {
                        "type": "boolean",
                        "description": "Add silently flag.\n"
                    },
                    "senderDomain": {
                        "type": "string",
                        "description": "Sender domain.\n"
                    },
                    "senderId": {
                        "type": "string",
                        "description": "Sender ID.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "server.\n"
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "Server url.\n"
                    },
                    "signIn": {
                        "type": "string",
                        "description": "Sign in.\n"
                    },
                    "sound": {
                        "type": "string",
                        "description": "Sound.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Topics.\n"
                    },
                    "tos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "To.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL.\n"
                    },
                    "useEuEndpoint": {
                        "type": "boolean",
                        "description": "Use EU endpoint flag.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "userKey": {
                        "type": "string",
                        "description": "User key.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "webHookUrl": {
                        "type": "string",
                        "description": "Web hook url.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationBoxcar:NotificationBoxcar": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Boxcar resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Boxcar](https://wiki.servarr.com/radarr/supported#boxcar).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationBoxcar(\"example\", {\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n    token: \"Token\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationBoxcar(\"example\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True,\n    token=\"Token\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationBoxcar(\"example\", new()\n    {\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n        Token = \"Token\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationBoxcar(ctx, \"example\", \u0026Notifications.NotificationBoxcarArgs{\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tToken:                       pulumi.String(\"Token\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationBoxcar;\nimport com.pulumi.radarr.Notifications.NotificationBoxcarArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationBoxcar(\"example\", NotificationBoxcarArgs.builder()        \n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .token(\"Token\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationBoxcar\n    properties:\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n      token: Token\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationBoxcar:NotificationBoxcar example 1\n```\n\n ",
            "properties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationBoxcar name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n",
                    "secret": true
                }
            },
            "required": [
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "tags",
                "token"
            ],
            "inputProperties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationBoxcar name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "name",
                "onMovieDelete",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationBoxcar resources.\n",
                "properties": {
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationBoxcar name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationCustomScript:NotificationCustomScript": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Custom Script resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Custom Script](https://wiki.servarr.com/radarr/supported#customscript).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationCustomScript(\"example\", {\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onRename: false,\n    onUpgrade: true,\n    path: \"/scripts/radarr.sh\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationCustomScript(\"example\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_rename=False,\n    on_upgrade=True,\n    path=\"/scripts/radarr.sh\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationCustomScript(\"example\", new()\n    {\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnRename = false,\n        OnUpgrade = true,\n        Path = \"/scripts/radarr.sh\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationCustomScript(ctx, \"example\", \u0026Notifications.NotificationCustomScriptArgs{\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnRename:                    pulumi.Bool(false),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPath:                        pulumi.String(\"/scripts/radarr.sh\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationCustomScript;\nimport com.pulumi.radarr.Notifications.NotificationCustomScriptArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationCustomScript(\"example\", NotificationCustomScriptArgs.builder()        \n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onRename(false)\n            .onUpgrade(true)\n            .path(\"/scripts/radarr.sh\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationCustomScript\n    properties:\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onRename: false\n      onUpgrade: true\n      path: /scripts/radarr.sh\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationCustomScript:NotificationCustomScript example 1\n```\n\n ",
            "properties": {
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationCustomScript name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "arguments",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "path",
                "tags"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationCustomScript name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "name",
                "onMovieDelete",
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationCustomScript resources.\n",
                "properties": {
                    "arguments": {
                        "type": "string",
                        "description": "Arguments.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationCustomScript name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationDiscord:NotificationDiscord": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Discord resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Discord](https://wiki.servarr.com/radarr/supported#discord).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationDiscord;\nimport com.pulumi.radarr.Notifications.NotificationDiscordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationDiscord(\"example\", NotificationDiscordArgs.builder()        \n            .avatar(\"https://i.imgur.com/oBPXx0D.png\")\n            .grabFields(            \n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9)\n            .importFields(            \n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12)\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onRename(false)\n            .onUpgrade(true)\n            .username(\"User\")\n            .webHookUrl(\"http://discord-web-hook.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationDiscord\n    properties:\n      avatar: https://i.imgur.com/oBPXx0D.png\n      grabFields:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n        - 7\n        - 8\n        - 9\n      importFields:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n        - 7\n        - 8\n        - 9\n        - 10\n        - 11\n        - 12\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onRename: false\n      onUpgrade: true\n      username: User\n      webHookUrl: http://discord-web-hook.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationDiscord:NotificationDiscord example 1\n```\n\n ",
            "properties": {
                "author": {
                    "type": "string",
                    "description": "Author.\n"
                },
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "grabFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.\n"
                },
                "importFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationDiscord name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook URL.\n"
                }
            },
            "required": [
                "author",
                "avatar",
                "grabFields",
                "importFields",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "tags",
                "username",
                "webHookUrl"
            ],
            "inputProperties": {
                "author": {
                    "type": "string",
                    "description": "Author.\n"
                },
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "grabFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.\n"
                },
                "importFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationDiscord name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook URL.\n"
                }
            },
            "requiredInputs": [
                "name",
                "onMovieDelete",
                "webHookUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationDiscord resources.\n",
                "properties": {
                    "author": {
                        "type": "string",
                        "description": "Author.\n"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "Avatar.\n"
                    },
                    "grabFields": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart.\n"
                    },
                    "importFields": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationDiscord name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "webHookUrl": {
                        "type": "string",
                        "description": "Web hook URL.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationEmail:NotificationEmail": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Email resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Email](https://wiki.servarr.com/radarr/supported#email).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationEmail(\"example\", {\n    from: \"from_email@example.com\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n    port: 587,\n    server: \"http://email-server.net\",\n    tos: [\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationEmail(\"example\",\n    from_=\"from_email@example.com\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True,\n    port=587,\n    server=\"http://email-server.net\",\n    tos=[\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationEmail(\"example\", new()\n    {\n        From = \"from_email@example.com\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n        Port = 587,\n        Server = \"http://email-server.net\",\n        Tos = new[]\n        {\n            \"user1@example.com\",\n            \"user2@example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationEmail(ctx, \"example\", \u0026Notifications.NotificationEmailArgs{\n\t\t\tFrom:                        pulumi.String(\"from_email@example.com\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPort:                        pulumi.Int(587),\n\t\t\tServer:                      pulumi.String(\"http://email-server.net\"),\n\t\t\tTos: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@example.com\"),\n\t\t\t\tpulumi.String(\"user2@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationEmail;\nimport com.pulumi.radarr.Notifications.NotificationEmailArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationEmail(\"example\", NotificationEmailArgs.builder()        \n            .from(\"from_email@example.com\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .port(587)\n            .server(\"http://email-server.net\")\n            .tos(            \n                \"user1@example.com\",\n                \"user2@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationEmail\n    properties:\n      from: from_email@example.com\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n      port: 587\n      server: http://email-server.net\n      tos:\n        - user1@example.com\n        - user2@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationEmail:NotificationEmail example 1\n```\n\n ",
            "properties": {
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationEmail name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "bccs",
                "ccs",
                "from",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "password",
                "port",
                "requireEncryption",
                "server",
                "tags",
                "tos",
                "username"
            ],
            "inputProperties": {
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationEmail name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "from",
                "name",
                "onMovieDelete",
                "server",
                "tos"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationEmail resources.\n",
                "properties": {
                    "bccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Bcc.\n"
                    },
                    "ccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cc.\n"
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationEmail name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "requireEncryption": {
                        "type": "boolean",
                        "description": "Require encryption flag.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "Server.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "tos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "To.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationEmby:NotificationEmby": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Emby resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Emby](https://wiki.servarr.com/radarr/supported#mediabrowser).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationEmby(\"example\", {\n    apiKey: \"API_Key\",\n    host: \"emby.lcl\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onRename: false,\n    onUpgrade: true,\n    port: 8096,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationEmby(\"example\",\n    api_key=\"API_Key\",\n    host=\"emby.lcl\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_rename=False,\n    on_upgrade=True,\n    port=8096)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationEmby(\"example\", new()\n    {\n        ApiKey = \"API_Key\",\n        Host = \"emby.lcl\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnRename = false,\n        OnUpgrade = true,\n        Port = 8096,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationEmby(ctx, \"example\", \u0026Notifications.NotificationEmbyArgs{\n\t\t\tApiKey:                      pulumi.String(\"API_Key\"),\n\t\t\tHost:                        pulumi.String(\"emby.lcl\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnRename:                    pulumi.Bool(false),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPort:                        pulumi.Int(8096),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationEmby;\nimport com.pulumi.radarr.Notifications.NotificationEmbyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationEmby(\"example\", NotificationEmbyArgs.builder()        \n            .apiKey(\"API_Key\")\n            .host(\"emby.lcl\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onRename(false)\n            .onUpgrade(true)\n            .port(8096)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationEmby\n    properties:\n      apiKey: API_Key\n      host: emby.lcl\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onRename: false\n      onUpgrade: true\n      port: 8096\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationEmby:NotificationEmby example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationEmby name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notify flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "required": [
                "apiKey",
                "host",
                "includeHealthWarnings",
                "name",
                "notify",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "port",
                "tags",
                "updateLibrary",
                "useSsl"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationEmby name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notify flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "host",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationEmby resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "host": {
                        "type": "string",
                        "description": "Host.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationEmby name.\n"
                    },
                    "notify": {
                        "type": "boolean",
                        "description": "Notify flag.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationGotify:NotificationGotify": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Gotify resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Gotify](https://wiki.servarr.com/radarr/supported#gotify).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationGotify(\"example\", {\n    appToken: \"Token\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n    priority: 5,\n    server: \"http://gotify-server.net\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationGotify(\"example\",\n    app_token=\"Token\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True,\n    priority=5,\n    server=\"http://gotify-server.net\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationGotify(\"example\", new()\n    {\n        AppToken = \"Token\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n        Priority = 5,\n        Server = \"http://gotify-server.net\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationGotify(ctx, \"example\", \u0026Notifications.NotificationGotifyArgs{\n\t\t\tAppToken:                    pulumi.String(\"Token\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPriority:                    pulumi.Int(5),\n\t\t\tServer:                      pulumi.String(\"http://gotify-server.net\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationGotify;\nimport com.pulumi.radarr.Notifications.NotificationGotifyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationGotify(\"example\", NotificationGotifyArgs.builder()        \n            .appToken(\"Token\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .priority(5)\n            .server(\"http://gotify-server.net\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationGotify\n    properties:\n      appToken: Token\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n      priority: 5\n      server: http://gotify-server.net\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationGotify:NotificationGotify example 1\n```\n\n ",
            "properties": {
                "appToken": {
                    "type": "string",
                    "description": "App token.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationGotify name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `0` Min, `2` Low, `5` Normal, `8` High.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "appToken",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "priority",
                "server",
                "tags"
            ],
            "inputProperties": {
                "appToken": {
                    "type": "string",
                    "description": "App token.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationGotify name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `0` Min, `2` Low, `5` Normal, `8` High.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "appToken",
                "name",
                "onMovieDelete",
                "server"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationGotify resources.\n",
                "properties": {
                    "appToken": {
                        "type": "string",
                        "description": "App token.\n",
                        "secret": true
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationGotify name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority. `0` Min, `2` Low, `5` Normal, `8` High.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "Server.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationJoin:NotificationJoin": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Join resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Join](https://wiki.servarr.com/radarr/supported#join).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationJoin(\"example\", {\n    apiKey: \"Key\",\n    deviceNames: \"device1,device2\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n    priority: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationJoin(\"example\",\n    api_key=\"Key\",\n    device_names=\"device1,device2\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True,\n    priority=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationJoin(\"example\", new()\n    {\n        ApiKey = \"Key\",\n        DeviceNames = \"device1,device2\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n        Priority = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationJoin(ctx, \"example\", \u0026Notifications.NotificationJoinArgs{\n\t\t\tApiKey:                      pulumi.String(\"Key\"),\n\t\t\tDeviceNames:                 pulumi.String(\"device1,device2\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPriority:                    pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationJoin;\nimport com.pulumi.radarr.Notifications.NotificationJoinArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationJoin(\"example\", NotificationJoinArgs.builder()        \n            .apiKey(\"Key\")\n            .deviceNames(\"device1,device2\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .priority(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationJoin\n    properties:\n      apiKey: Key\n      deviceNames: device1,device2\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n      priority: 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationJoin:NotificationJoin example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names. Comma separated list.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationJoin name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "priority",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names. Comma separated list.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationJoin name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationJoin resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "deviceNames": {
                        "type": "string",
                        "description": "Device names. Comma separated list.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationJoin name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationKodi:NotificationKodi": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Kodi resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Kodi](https://wiki.servarr.com/radarr/supported#xbmc).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationKodi(\"example\", {\n    host: \"http://kodi.com\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    notify: true,\n    onApplicationUpdate: false,\n    onDownload: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onRename: false,\n    onUpgrade: false,\n    password: \"MyPass\",\n    port: 8080,\n    username: \"User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationKodi(\"example\",\n    host=\"http://kodi.com\",\n    include_health_warnings=False,\n    name=\"Example\",\n    notify=True,\n    on_application_update=False,\n    on_download=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_rename=False,\n    on_upgrade=False,\n    password=\"MyPass\",\n    port=8080,\n    username=\"User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationKodi(\"example\", new()\n    {\n        Host = \"http://kodi.com\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        Notify = true,\n        OnApplicationUpdate = false,\n        OnDownload = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnRename = false,\n        OnUpgrade = false,\n        Password = \"MyPass\",\n        Port = 8080,\n        Username = \"User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationKodi(ctx, \"example\", \u0026Notifications.NotificationKodiArgs{\n\t\t\tHost:                        pulumi.String(\"http://kodi.com\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tNotify:                      pulumi.Bool(true),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(false),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnRename:                    pulumi.Bool(false),\n\t\t\tOnUpgrade:                   pulumi.Bool(false),\n\t\t\tPassword:                    pulumi.String(\"MyPass\"),\n\t\t\tPort:                        pulumi.Int(8080),\n\t\t\tUsername:                    pulumi.String(\"User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationKodi;\nimport com.pulumi.radarr.Notifications.NotificationKodiArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationKodi(\"example\", NotificationKodiArgs.builder()        \n            .host(\"http://kodi.com\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .notify(true)\n            .onApplicationUpdate(false)\n            .onDownload(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onRename(false)\n            .onUpgrade(false)\n            .password(\"MyPass\")\n            .port(8080)\n            .username(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationKodi\n    properties:\n      host: http://kodi.com\n      includeHealthWarnings: false\n      name: Example\n      notify: true\n      onApplicationUpdate: false\n      onDownload: false\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onRename: false\n      onUpgrade: false\n      password: MyPass\n      port: 8080\n      username: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationKodi:NotificationKodi example 1\n```\n\n ",
            "properties": {
                "alwaysUpdate": {
                    "type": "boolean",
                    "description": "Always update flag.\n"
                },
                "cleanLibrary": {
                    "type": "boolean",
                    "description": "Clean library flag.\n"
                },
                "displayTime": {
                    "type": "integer",
                    "description": "Display time.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationKodi name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notification flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "alwaysUpdate",
                "cleanLibrary",
                "displayTime",
                "host",
                "includeHealthWarnings",
                "name",
                "notify",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "password",
                "port",
                "tags",
                "updateLibrary",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "alwaysUpdate": {
                    "type": "boolean",
                    "description": "Always update flag.\n"
                },
                "cleanLibrary": {
                    "type": "boolean",
                    "description": "Clean library flag.\n"
                },
                "displayTime": {
                    "type": "integer",
                    "description": "Display time.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationKodi name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notification flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "host",
                "name",
                "onMovieDelete",
                "port"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationKodi resources.\n",
                "properties": {
                    "alwaysUpdate": {
                        "type": "boolean",
                        "description": "Always update flag.\n"
                    },
                    "cleanLibrary": {
                        "type": "boolean",
                        "description": "Clean library flag.\n"
                    },
                    "displayTime": {
                        "type": "integer",
                        "description": "Display time.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Host.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationKodi name.\n"
                    },
                    "notify": {
                        "type": "boolean",
                        "description": "Notification flag.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationMailgun:NotificationMailgun": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Mailgun resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Mailgun](https://wiki.servarr.com/radarr/supported#mailgun).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationMailgun(\"example\", {\n    apiKey: \"APIkey\",\n    from: \"from_mailgun@example.com\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n    recipients: [\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationMailgun(\"example\",\n    api_key=\"APIkey\",\n    from_=\"from_mailgun@example.com\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True,\n    recipients=[\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationMailgun(\"example\", new()\n    {\n        ApiKey = \"APIkey\",\n        From = \"from_mailgun@example.com\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n        Recipients = new[]\n        {\n            \"user1@example.com\",\n            \"user2@example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationMailgun(ctx, \"example\", \u0026Notifications.NotificationMailgunArgs{\n\t\t\tApiKey:                      pulumi.String(\"APIkey\"),\n\t\t\tFrom:                        pulumi.String(\"from_mailgun@example.com\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@example.com\"),\n\t\t\t\tpulumi.String(\"user2@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationMailgun;\nimport com.pulumi.radarr.Notifications.NotificationMailgunArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationMailgun(\"example\", NotificationMailgunArgs.builder()        \n            .apiKey(\"APIkey\")\n            .from(\"from_mailgun@example.com\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .recipients(            \n                \"user1@example.com\",\n                \"user2@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationMailgun\n    properties:\n      apiKey: APIkey\n      from: from_mailgun@example.com\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n      recipients:\n        - user1@example.com\n        - user2@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationMailgun:NotificationMailgun example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationMailgun name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                }
            },
            "required": [
                "apiKey",
                "from",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "recipients",
                "senderDomain",
                "tags",
                "useEuEndpoint"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationMailgun name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                }
            },
            "requiredInputs": [
                "from",
                "name",
                "onMovieDelete",
                "recipients"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationMailgun resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationMailgun name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recipients.\n"
                    },
                    "senderDomain": {
                        "type": "string",
                        "description": "Sender domain.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useEuEndpoint": {
                        "type": "boolean",
                        "description": "Use EU endpoint flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationNotifiarr:NotificationNotifiarr": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Notifiarr resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Notifiarr](https://wiki.servarr.com/radarr/supported#notifiarr).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationNotifiarr(\"example\", {\n    apiKey: \"Token\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationNotifiarr(\"example\",\n    api_key=\"Token\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationNotifiarr(\"example\", new()\n    {\n        ApiKey = \"Token\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationNotifiarr(ctx, \"example\", \u0026Notifications.NotificationNotifiarrArgs{\n\t\t\tApiKey:                      pulumi.String(\"Token\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationNotifiarr;\nimport com.pulumi.radarr.Notifications.NotificationNotifiarrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationNotifiarr(\"example\", NotificationNotifiarrArgs.builder()        \n            .apiKey(\"Token\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationNotifiarr\n    properties:\n      apiKey: Token\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationNotifiarr:NotificationNotifiarr example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationNotifiarr name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationNotifiarr name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationNotifiarr resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationNotifiarr name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationNtfy:NotificationNtfy": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Ntfy resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Ntfy](https://wiki.servarr.com/radarr/supported#ntfy).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationNtfy(\"example\", {\n    fieldTags: [\n        \"warning\",\n        \"skull\",\n    ],\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n    password: \"Pass\",\n    priority: 1,\n    serverUrl: \"https://ntfy.sh\",\n    topics: [\n        \"Topic1234\",\n        \"Topic4321\",\n    ],\n    username: \"User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationNtfy(\"example\",\n    field_tags=[\n        \"warning\",\n        \"skull\",\n    ],\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True,\n    password=\"Pass\",\n    priority=1,\n    server_url=\"https://ntfy.sh\",\n    topics=[\n        \"Topic1234\",\n        \"Topic4321\",\n    ],\n    username=\"User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationNtfy(\"example\", new()\n    {\n        FieldTags = new[]\n        {\n            \"warning\",\n            \"skull\",\n        },\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n        Password = \"Pass\",\n        Priority = 1,\n        ServerUrl = \"https://ntfy.sh\",\n        Topics = new[]\n        {\n            \"Topic1234\",\n            \"Topic4321\",\n        },\n        Username = \"User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationNtfy(ctx, \"example\", \u0026Notifications.NotificationNtfyArgs{\n\t\t\tFieldTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"warning\"),\n\t\t\t\tpulumi.String(\"skull\"),\n\t\t\t},\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPassword:                    pulumi.String(\"Pass\"),\n\t\t\tPriority:                    pulumi.Int(1),\n\t\t\tServerUrl:                   pulumi.String(\"https://ntfy.sh\"),\n\t\t\tTopics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Topic1234\"),\n\t\t\t\tpulumi.String(\"Topic4321\"),\n\t\t\t},\n\t\t\tUsername: pulumi.String(\"User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationNtfy;\nimport com.pulumi.radarr.Notifications.NotificationNtfyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationNtfy(\"example\", NotificationNtfyArgs.builder()        \n            .fieldTags(            \n                \"warning\",\n                \"skull\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .password(\"Pass\")\n            .priority(1)\n            .serverUrl(\"https://ntfy.sh\")\n            .topics(            \n                \"Topic1234\",\n                \"Topic4321\")\n            .username(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationNtfy\n    properties:\n      fieldTags:\n        - warning\n        - skull\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n      password: Pass\n      priority: 1\n      serverUrl: https://ntfy.sh\n      topics:\n        - Topic1234\n        - Topic4321\n      username: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationNtfy:NotificationNtfy example 1\n```\n\n ",
            "properties": {
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags and emojis.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationNtfy name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server URL.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Topics.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "clickUrl",
                "fieldTags",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "password",
                "priority",
                "serverUrl",
                "tags",
                "topics",
                "username"
            ],
            "inputProperties": {
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags and emojis.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationNtfy name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server URL.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Topics.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name",
                "onMovieDelete",
                "topics"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationNtfy resources.\n",
                "properties": {
                    "clickUrl": {
                        "type": "string",
                        "description": "Click URL.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags and emojis.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationNtfy name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.\n"
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "Server URL.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Topics.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationPlex:NotificationPlex": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Plex resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Plex](https://wiki.servarr.com/radarr/supported#plexserver).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationPlex(\"example\", {\n    authToken: \"AuthTOKEN\",\n    host: \"plex.lcl\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onDownload: true,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onRename: false,\n    onUpgrade: true,\n    port: 32400,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationPlex(\"example\",\n    auth_token=\"AuthTOKEN\",\n    host=\"plex.lcl\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_download=True,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_rename=False,\n    on_upgrade=True,\n    port=32400)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationPlex(\"example\", new()\n    {\n        AuthToken = \"AuthTOKEN\",\n        Host = \"plex.lcl\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnDownload = true,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnRename = false,\n        OnUpgrade = true,\n        Port = 32400,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationPlex(ctx, \"example\", \u0026Notifications.NotificationPlexArgs{\n\t\t\tAuthToken:                   pulumi.String(\"AuthTOKEN\"),\n\t\t\tHost:                        pulumi.String(\"plex.lcl\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnRename:                    pulumi.Bool(false),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPort:                        pulumi.Int(32400),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationPlex;\nimport com.pulumi.radarr.Notifications.NotificationPlexArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationPlex(\"example\", NotificationPlexArgs.builder()        \n            .authToken(\"AuthTOKEN\")\n            .host(\"plex.lcl\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onDownload(true)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onRename(false)\n            .onUpgrade(true)\n            .port(32400)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationPlex\n    properties:\n      authToken: AuthTOKEN\n      host: plex.lcl\n      includeHealthWarnings: false\n      name: Example\n      onDownload: true\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onRename: false\n      onUpgrade: true\n      port: 32400\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationPlex:NotificationPlex example 1\n```\n\n ",
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "Auth Token.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationPlex name.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "required": [
                "authToken",
                "host",
                "includeHealthWarnings",
                "name",
                "onDownload",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "port",
                "tags",
                "updateLibrary",
                "useSsl"
            ],
            "inputProperties": {
                "authToken": {
                    "type": "string",
                    "description": "Auth Token.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationPlex name.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "requiredInputs": [
                "authToken",
                "host",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationPlex resources.\n",
                "properties": {
                    "authToken": {
                        "type": "string",
                        "description": "Auth Token.\n",
                        "secret": true
                    },
                    "host": {
                        "type": "string",
                        "description": "Host.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationPlex name.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationProwl:NotificationProwl": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Prowl resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Prowl](https://wiki.servarr.com/radarr/supported#prowl).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationProwl(\"example\", {\n    apiKey: \"APIKey\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n    priority: -2,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationProwl(\"example\",\n    api_key=\"APIKey\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True,\n    priority=-2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationProwl(\"example\", new()\n    {\n        ApiKey = \"APIKey\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n        Priority = -2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationProwl(ctx, \"example\", \u0026Notifications.NotificationProwlArgs{\n\t\t\tApiKey:                      pulumi.String(\"APIKey\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPriority:                    -2,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationProwl:NotificationProwl example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationProwl name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.`-2` Very Low, `-1` Low, `0` Normal, `1` High, `2` Emergency.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "priority",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationProwl name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.`-2` Very Low, `-1` Low, `0` Normal, `1` High, `2` Emergency.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationProwl resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationProwl name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.`-2` Very Low, `-1` Low, `0` Normal, `1` High, `2` Emergency.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationPushbullet:NotificationPushbullet": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Pushbullet resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Pushbullet](https://wiki.servarr.com/radarr/supported#pushbullet).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationPushbullet(\"example\", {\n    apiKey: \"Token\",\n    deviceIds: [\"test\"],\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationPushbullet(\"example\",\n    api_key=\"Token\",\n    device_ids=[\"test\"],\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationPushbullet(\"example\", new()\n    {\n        ApiKey = \"Token\",\n        DeviceIds = new[]\n        {\n            \"test\",\n        },\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationPushbullet(ctx, \"example\", \u0026Notifications.NotificationPushbulletArgs{\n\t\t\tApiKey: pulumi.String(\"Token\"),\n\t\t\tDeviceIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t},\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationPushbullet;\nimport com.pulumi.radarr.Notifications.NotificationPushbulletArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationPushbullet(\"example\", NotificationPushbulletArgs.builder()        \n            .apiKey(\"Token\")\n            .deviceIds(\"test\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationPushbullet\n    properties:\n      apiKey: Token\n      deviceIds:\n        - test\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationPushbullet:NotificationPushbullet example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of channel tags.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of devices IDs.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationPushbullet name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "channelTags",
                "deviceIds",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "senderId",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of channel tags.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of devices IDs.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationPushbullet name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationPushbullet resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "channelTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of channel tags.\n"
                    },
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of devices IDs.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationPushbullet name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "senderId": {
                        "type": "string",
                        "description": "Sender ID.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationPushover:NotificationPushover": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Pushover resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Pushover](https://wiki.servarr.com/radarr/supported#pushover).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationJoin(\"example\", {\n    apiKey: \"Key\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: false,\n    priority: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationJoin(\"example\",\n    api_key=\"Key\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=False,\n    priority=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationJoin(\"example\", new()\n    {\n        ApiKey = \"Key\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = false,\n        Priority = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationJoin(ctx, \"example\", \u0026Notifications.NotificationJoinArgs{\n\t\t\tApiKey:                      pulumi.String(\"Key\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(false),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(false),\n\t\t\tPriority:                    pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationJoin;\nimport com.pulumi.radarr.Notifications.NotificationJoinArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationJoin(\"example\", NotificationJoinArgs.builder()        \n            .apiKey(\"Key\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(false)\n            .priority(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationJoin\n    properties:\n      apiKey: Key\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: false\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: false\n      priority: 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationPushover:NotificationPushover example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of devices.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationPushover name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency, `8` High.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n",
                    "secret": true
                }
            },
            "required": [
                "apiKey",
                "devices",
                "expire",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "priority",
                "retry",
                "sound",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of devices.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationPushover name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency, `8` High.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "apiKey",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationPushover resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of devices.\n"
                    },
                    "expire": {
                        "type": "integer",
                        "description": "Expire.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationPushover name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency, `8` High.\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "Retry.\n"
                    },
                    "sound": {
                        "type": "string",
                        "description": "Sound.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "userKey": {
                        "type": "string",
                        "description": "User key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationSendgrid:NotificationSendgrid": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Sendgrid resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Sendgrid](https://wiki.servarr.com/radarr/supported#sendgrid).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationSendgrid(\"example\", {\n    apiKey: \"APIkey\",\n    from: \"from_sendgrid@example.com\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n    recipients: [\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationSendgrid(\"example\",\n    api_key=\"APIkey\",\n    from_=\"from_sendgrid@example.com\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True,\n    recipients=[\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationSendgrid(\"example\", new()\n    {\n        ApiKey = \"APIkey\",\n        From = \"from_sendgrid@example.com\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n        Recipients = new[]\n        {\n            \"user1@example.com\",\n            \"user2@example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationSendgrid(ctx, \"example\", \u0026Notifications.NotificationSendgridArgs{\n\t\t\tApiKey:                      pulumi.String(\"APIkey\"),\n\t\t\tFrom:                        pulumi.String(\"from_sendgrid@example.com\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@example.com\"),\n\t\t\t\tpulumi.String(\"user2@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationSendgrid;\nimport com.pulumi.radarr.Notifications.NotificationSendgridArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationSendgrid(\"example\", NotificationSendgridArgs.builder()        \n            .apiKey(\"APIkey\")\n            .from(\"from_sendgrid@example.com\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .recipients(            \n                \"user1@example.com\",\n                \"user2@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationSendgrid\n    properties:\n      apiKey: APIkey\n      from: from_sendgrid@example.com\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n      recipients:\n        - user1@example.com\n        - user2@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationSendgrid:NotificationSendgrid example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationSendgrid name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "from",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "recipients",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationSendgrid name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "from",
                "name",
                "onMovieDelete",
                "recipients"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationSendgrid resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationSendgrid name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recipients.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationSimplepush:NotificationSimplepush": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Simplepush resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Simplepush](https://wiki.servarr.com/radarr/supported#simplepush).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationSimplepush(\"example\", {\n    event: \"ringtone:default\",\n    includeHealthWarnings: false,\n    key: \"Token\",\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationSimplepush(\"example\",\n    event=\"ringtone:default\",\n    include_health_warnings=False,\n    key=\"Token\",\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationSimplepush(\"example\", new()\n    {\n        Event = \"ringtone:default\",\n        IncludeHealthWarnings = false,\n        Key = \"Token\",\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationSimplepush(ctx, \"example\", \u0026Notifications.NotificationSimplepushArgs{\n\t\t\tEvent:                       pulumi.String(\"ringtone:default\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tKey:                         pulumi.String(\"Token\"),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationSimplepush;\nimport com.pulumi.radarr.Notifications.NotificationSimplepushArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationSimplepush(\"example\", NotificationSimplepushArgs.builder()        \n            .event(\"ringtone:default\")\n            .includeHealthWarnings(false)\n            .key(\"Token\")\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationSimplepush\n    properties:\n      event: ringtone:default\n      includeHealthWarnings: false\n      key: Token\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationSimplepush:NotificationSimplepush example 1\n```\n\n ",
            "properties": {
                "event": {
                    "type": "string",
                    "description": "Event.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "NotificationSimplepush name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "event",
                "includeHealthWarnings",
                "key",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "tags"
            ],
            "inputProperties": {
                "event": {
                    "type": "string",
                    "description": "Event.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "NotificationSimplepush name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "key",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationSimplepush resources.\n",
                "properties": {
                    "event": {
                        "type": "string",
                        "description": "Event.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationSimplepush name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationSlack:NotificationSlack": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Slack resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Slack](https://wiki.servarr.com/radarr/supported#slack).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationSlack(\"example\", {\n    channel: \"example-channel\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onRename: false,\n    onUpgrade: true,\n    username: \"user\",\n    webHookUrl: \"http://my.slack.com/test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationSlack(\"example\",\n    channel=\"example-channel\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_rename=False,\n    on_upgrade=True,\n    username=\"user\",\n    web_hook_url=\"http://my.slack.com/test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationSlack(\"example\", new()\n    {\n        Channel = \"example-channel\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnRename = false,\n        OnUpgrade = true,\n        Username = \"user\",\n        WebHookUrl = \"http://my.slack.com/test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationSlack(ctx, \"example\", \u0026Notifications.NotificationSlackArgs{\n\t\t\tChannel:                     pulumi.String(\"example-channel\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnRename:                    pulumi.Bool(false),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tUsername:                    pulumi.String(\"user\"),\n\t\t\tWebHookUrl:                  pulumi.String(\"http://my.slack.com/test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationSlack;\nimport com.pulumi.radarr.Notifications.NotificationSlackArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationSlack(\"example\", NotificationSlackArgs.builder()        \n            .channel(\"example-channel\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onRename(false)\n            .onUpgrade(true)\n            .username(\"user\")\n            .webHookUrl(\"http://my.slack.com/test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationSlack\n    properties:\n      channel: example-channel\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onRename: false\n      onUpgrade: true\n      username: user\n      webHookUrl: http://my.slack.com/test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationSlack:NotificationSlack example 1\n```\n\n ",
            "properties": {
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationSlack name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "URL.\n"
                }
            },
            "required": [
                "channel",
                "icon",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "tags",
                "username",
                "webHookUrl"
            ],
            "inputProperties": {
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationSlack name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "URL.\n"
                }
            },
            "requiredInputs": [
                "name",
                "onMovieDelete",
                "username",
                "webHookUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationSlack resources.\n",
                "properties": {
                    "channel": {
                        "type": "string",
                        "description": "Channel.\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationSlack name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "webHookUrl": {
                        "type": "string",
                        "description": "URL.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationSynologyIndexer:NotificationSynologyIndexer": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Synology Indexer resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Synology](https://wiki.servarr.com/radarr/supported#synologyindexer).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationSynologyIndexer(\"example\", {\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onDownload: true,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onRename: false,\n    onUpgrade: true,\n    updateLibrary: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationSynologyIndexer(\"example\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_download=True,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_rename=False,\n    on_upgrade=True,\n    update_library=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationSynologyIndexer(\"example\", new()\n    {\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnDownload = true,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnRename = false,\n        OnUpgrade = true,\n        UpdateLibrary = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationSynologyIndexer(ctx, \"example\", \u0026Notifications.NotificationSynologyIndexerArgs{\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnRename:                    pulumi.Bool(false),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tUpdateLibrary:               pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationSynologyIndexer;\nimport com.pulumi.radarr.Notifications.NotificationSynologyIndexerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationSynologyIndexer(\"example\", NotificationSynologyIndexerArgs.builder()        \n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onDownload(true)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onRename(false)\n            .onUpgrade(true)\n            .updateLibrary(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationSynologyIndexer\n    properties:\n      includeHealthWarnings: false\n      name: Example\n      onDownload: true\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onRename: false\n      onUpgrade: true\n      updateLibrary: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationSynologyIndexer:NotificationSynologyIndexer example 1\n```\n\n ",
            "properties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationSynology name.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                }
            },
            "required": [
                "includeHealthWarnings",
                "name",
                "onDownload",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "tags",
                "updateLibrary"
            ],
            "inputProperties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationSynology name.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                }
            },
            "requiredInputs": [
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationSynologyIndexer resources.\n",
                "properties": {
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationSynology name.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationTelegram:NotificationTelegram": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Telegram resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Telegram](https://wiki.servarr.com/radarr/supported#telegram).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationTelegram(\"example\", {\n    botToken: \"Token\",\n    chatId: \"ChatID01\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationTelegram(\"example\",\n    bot_token=\"Token\",\n    chat_id=\"ChatID01\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationTelegram(\"example\", new()\n    {\n        BotToken = \"Token\",\n        ChatId = \"ChatID01\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationTelegram(ctx, \"example\", \u0026Notifications.NotificationTelegramArgs{\n\t\t\tBotToken:                    pulumi.String(\"Token\"),\n\t\t\tChatId:                      pulumi.String(\"ChatID01\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationTelegram;\nimport com.pulumi.radarr.Notifications.NotificationTelegramArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationTelegram(\"example\", NotificationTelegramArgs.builder()        \n            .botToken(\"Token\")\n            .chatId(\"ChatID01\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationTelegram\n    properties:\n      botToken: Token\n      chatId: ChatID01\n      includeHealthWarnings: false\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationTelegram:NotificationTelegram example 1\n```\n\n ",
            "properties": {
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n",
                    "secret": true
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationTelegram name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Send silently flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "botToken",
                "chatId",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "sendSilently",
                "tags"
            ],
            "inputProperties": {
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n",
                    "secret": true
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationTelegram name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Send silently flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "botToken",
                "chatId",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationTelegram resources.\n",
                "properties": {
                    "botToken": {
                        "type": "string",
                        "description": "Bot token.\n",
                        "secret": true
                    },
                    "chatId": {
                        "type": "string",
                        "description": "Chat ID.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationTelegram name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "sendSilently": {
                        "type": "boolean",
                        "description": "Send silently flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationTrakt:NotificationTrakt": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Trakt resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Trakt](https://wiki.servarr.com/radarr/supported#trakt).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationTrakt(\"example\", {\n    accessToken: \"AuthTOKEN\",\n    authUser: \"User\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onDownload: true,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationTrakt(\"example\",\n    access_token=\"AuthTOKEN\",\n    auth_user=\"User\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_download=True,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationTrakt(\"example\", new()\n    {\n        AccessToken = \"AuthTOKEN\",\n        AuthUser = \"User\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnDownload = true,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationTrakt(ctx, \"example\", \u0026Notifications.NotificationTraktArgs{\n\t\t\tAccessToken:                 pulumi.String(\"AuthTOKEN\"),\n\t\t\tAuthUser:                    pulumi.String(\"User\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationTrakt;\nimport com.pulumi.radarr.Notifications.NotificationTraktArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationTrakt(\"example\", NotificationTraktArgs.builder()        \n            .accessToken(\"AuthTOKEN\")\n            .authUser(\"User\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onDownload(true)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationTrakt\n    properties:\n      accessToken: AuthTOKEN\n      authUser: User\n      includeHealthWarnings: false\n      name: Example\n      onDownload: true\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationTrakt:NotificationTrakt example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access Token.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "expires": {
                    "type": "string",
                    "description": "expires.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationTrakt name.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Access Token.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "accessToken",
                "authUser",
                "expires",
                "includeHealthWarnings",
                "name",
                "onDownload",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "refreshToken",
                "tags"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access Token.\n",
                    "secret": true
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationTrakt name.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Access Token.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "authUser",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationTrakt resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access Token.\n",
                        "secret": true
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "expires": {
                        "type": "string",
                        "description": "expires.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationTrakt name.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Access Token.\n",
                        "secret": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationTwitter:NotificationTwitter": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Twitter resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Twitter](https://wiki.servarr.com/radarr/supported#twitter).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationTwitter(\"example\", {\n    accessToken: \"Token\",\n    accessTokenSecret: \"TokenSecret\",\n    consumerKey: \"Key\",\n    consumerSecret: \"Secret\",\n    includeHealthWarnings: false,\n    mention: \"someone\",\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onUpgrade: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationTwitter(\"example\",\n    access_token=\"Token\",\n    access_token_secret=\"TokenSecret\",\n    consumer_key=\"Key\",\n    consumer_secret=\"Secret\",\n    include_health_warnings=False,\n    mention=\"someone\",\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_upgrade=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationTwitter(\"example\", new()\n    {\n        AccessToken = \"Token\",\n        AccessTokenSecret = \"TokenSecret\",\n        ConsumerKey = \"Key\",\n        ConsumerSecret = \"Secret\",\n        IncludeHealthWarnings = false,\n        Mention = \"someone\",\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnUpgrade = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationTwitter(ctx, \"example\", \u0026Notifications.NotificationTwitterArgs{\n\t\t\tAccessToken:                 pulumi.String(\"Token\"),\n\t\t\tAccessTokenSecret:           pulumi.String(\"TokenSecret\"),\n\t\t\tConsumerKey:                 pulumi.String(\"Key\"),\n\t\t\tConsumerSecret:              pulumi.String(\"Secret\"),\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tMention:                     pulumi.String(\"someone\"),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationTwitter;\nimport com.pulumi.radarr.Notifications.NotificationTwitterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationTwitter(\"example\", NotificationTwitterArgs.builder()        \n            .accessToken(\"Token\")\n            .accessTokenSecret(\"TokenSecret\")\n            .consumerKey(\"Key\")\n            .consumerSecret(\"Secret\")\n            .includeHealthWarnings(false)\n            .mention(\"someone\")\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onUpgrade(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationTwitter\n    properties:\n      accessToken: Token\n      accessTokenSecret: TokenSecret\n      consumerKey: Key\n      consumerSecret: Secret\n      includeHealthWarnings: false\n      mention: someone\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onUpgrade: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationTwitter:NotificationTwitter example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer Key.\n",
                    "secret": true
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer Secret.\n",
                    "secret": true
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationTwitter name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenSecret",
                "consumerKey",
                "consumerSecret",
                "directMessage",
                "includeHealthWarnings",
                "mention",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onUpgrade",
                "tags"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer Key.\n",
                    "secret": true
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer Secret.\n",
                    "secret": true
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationTwitter name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "accessTokenSecret",
                "consumerKey",
                "consumerSecret",
                "mention",
                "name",
                "onMovieDelete"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationTwitter resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n",
                        "secret": true
                    },
                    "consumerKey": {
                        "type": "string",
                        "description": "Consumer Key.\n",
                        "secret": true
                    },
                    "consumerSecret": {
                        "type": "string",
                        "description": "Consumer Secret.\n",
                        "secret": true
                    },
                    "directMessage": {
                        "type": "boolean",
                        "description": "Direct message flag.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "mention": {
                        "type": "string",
                        "description": "Mention.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationTwitter name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Notifications/notificationWebhook:NotificationWebhook": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Webhook resource.\nFor more information refer to [Notification](https://wiki.servarr.com/radarr/settings#connect) and [Webhook](https://wiki.servarr.com/radarr/supported#webhook).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.notifications.NotificationWebhook(\"example\", {\n    includeHealthWarnings: false,\n    method: 1,\n    name: \"Example\",\n    onApplicationUpdate: false,\n    onDownload: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onMovieAdded: false,\n    onMovieDelete: false,\n    onMovieFileDelete: false,\n    onMovieFileDeleteForUpgrade: true,\n    onRename: false,\n    onUpgrade: true,\n    password: \"examplePass\",\n    url: \"https://example.webhook.com/example\",\n    username: \"exampleUser\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.notifications.NotificationWebhook(\"example\",\n    include_health_warnings=False,\n    method=1,\n    name=\"Example\",\n    on_application_update=False,\n    on_download=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_movie_added=False,\n    on_movie_delete=False,\n    on_movie_file_delete=False,\n    on_movie_file_delete_for_upgrade=True,\n    on_rename=False,\n    on_upgrade=True,\n    password=\"examplePass\",\n    url=\"https://example.webhook.com/example\",\n    username=\"exampleUser\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Notifications.NotificationWebhook(\"example\", new()\n    {\n        IncludeHealthWarnings = false,\n        Method = 1,\n        Name = \"Example\",\n        OnApplicationUpdate = false,\n        OnDownload = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnMovieAdded = false,\n        OnMovieDelete = false,\n        OnMovieFileDelete = false,\n        OnMovieFileDeleteForUpgrade = true,\n        OnRename = false,\n        OnUpgrade = true,\n        Password = \"examplePass\",\n        Url = \"https://example.webhook.com/example\",\n        Username = \"exampleUser\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationWebhook(ctx, \"example\", \u0026Notifications.NotificationWebhookArgs{\n\t\t\tIncludeHealthWarnings:       pulumi.Bool(false),\n\t\t\tMethod:                      pulumi.Int(1),\n\t\t\tName:                        pulumi.String(\"Example\"),\n\t\t\tOnApplicationUpdate:         pulumi.Bool(false),\n\t\t\tOnDownload:                  pulumi.Bool(true),\n\t\t\tOnGrab:                      pulumi.Bool(false),\n\t\t\tOnHealthIssue:               pulumi.Bool(false),\n\t\t\tOnMovieAdded:                pulumi.Bool(false),\n\t\t\tOnMovieDelete:               pulumi.Bool(false),\n\t\t\tOnMovieFileDelete:           pulumi.Bool(false),\n\t\t\tOnMovieFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnRename:                    pulumi.Bool(false),\n\t\t\tOnUpgrade:                   pulumi.Bool(true),\n\t\t\tPassword:                    pulumi.String(\"examplePass\"),\n\t\t\tUrl:                         pulumi.String(\"https://example.webhook.com/example\"),\n\t\t\tUsername:                    pulumi.String(\"exampleUser\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationWebhook;\nimport com.pulumi.radarr.Notifications.NotificationWebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationWebhook(\"example\", NotificationWebhookArgs.builder()        \n            .includeHealthWarnings(false)\n            .method(1)\n            .name(\"Example\")\n            .onApplicationUpdate(false)\n            .onDownload(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onMovieAdded(false)\n            .onMovieDelete(false)\n            .onMovieFileDelete(false)\n            .onMovieFileDeleteForUpgrade(true)\n            .onRename(false)\n            .onUpgrade(true)\n            .password(\"examplePass\")\n            .url(\"https://example.webhook.com/example\")\n            .username(\"exampleUser\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Notifications:NotificationWebhook\n    properties:\n      includeHealthWarnings: false\n      method: 1\n      name: Example\n      onApplicationUpdate: false\n      onDownload: true\n      onGrab: false\n      onHealthIssue: false\n      onMovieAdded: false\n      onMovieDelete: false\n      onMovieFileDelete: false\n      onMovieFileDeleteForUpgrade: true\n      onRename: false\n      onUpgrade: true\n      password: examplePass\n      url: https://example.webhook.com/example\n      username: exampleUser\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Notifications/notificationWebhook:NotificationWebhook example 1\n```\n\n ",
            "properties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationWebhook name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "password.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "includeHealthWarnings",
                "method",
                "name",
                "onApplicationUpdate",
                "onDownload",
                "onGrab",
                "onHealthIssue",
                "onMovieAdded",
                "onMovieDelete",
                "onMovieFileDelete",
                "onMovieFileDeleteForUpgrade",
                "onRename",
                "onUpgrade",
                "password",
                "tags",
                "url",
                "username"
            ],
            "inputProperties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "NotificationWebhook name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onDownload": {
                    "type": "boolean",
                    "description": "On download flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onMovieAdded": {
                    "type": "boolean",
                    "description": "On movie added flag.\n"
                },
                "onMovieDelete": {
                    "type": "boolean",
                    "description": "On movie delete flag.\n"
                },
                "onMovieFileDelete": {
                    "type": "boolean",
                    "description": "On movie file delete flag.\n"
                },
                "onMovieFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On movie file delete for upgrade flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "password.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "method",
                "name",
                "onMovieDelete",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationWebhook resources.\n",
                "properties": {
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "method": {
                        "type": "integer",
                        "description": "Method. `1` POST, `2` PUT.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "NotificationWebhook name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "password.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Profiles/customFormat:CustomFormat": {
            "description": "\u003c!-- subcategory:Profiles --\u003eCustom Format resource.\nFor more information refer to [Custom Format](https://wiki.servarr.com/radarr/settings#custom-formats).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.profiles.CustomFormat(\"example\", {\n    includeCustomFormatWhenRenaming: true,\n    name: \"Example\",\n    specifications: [\n        {\n            implementation: \"ReleaseTitleSpecification\",\n            name: \"Surround Sound\",\n            negate: false,\n            required: false,\n            value: \"DTS.?(HD|ES|X(?!\\\\D))|TRUEHD|ATMOS|DD(\\\\+|P).?([5-9])|EAC3.?([5-9])\",\n        },\n        {\n            implementation: \"LanguageSpecification\",\n            name: \"Arabic\",\n            negate: false,\n            required: false,\n            value: \"31\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.profiles.CustomFormat(\"example\",\n    include_custom_format_when_renaming=True,\n    name=\"Example\",\n    specifications=[\n        radarr.profiles.CustomFormatSpecificationArgs(\n            implementation=\"ReleaseTitleSpecification\",\n            name=\"Surround Sound\",\n            negate=False,\n            required=False,\n            value=\"DTS.?(HD|ES|X(?!\\\\D))|TRUEHD|ATMOS|DD(\\\\+|P).?([5-9])|EAC3.?([5-9])\",\n        ),\n        radarr.profiles.CustomFormatSpecificationArgs(\n            implementation=\"LanguageSpecification\",\n            name=\"Arabic\",\n            negate=False,\n            required=False,\n            value=\"31\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Profiles.CustomFormat(\"example\", new()\n    {\n        IncludeCustomFormatWhenRenaming = true,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            new Radarr.Profiles.Inputs.CustomFormatSpecificationArgs\n            {\n                Implementation = \"ReleaseTitleSpecification\",\n                Name = \"Surround Sound\",\n                Negate = false,\n                Required = false,\n                Value = \"DTS.?(HD|ES|X(?!\\\\D))|TRUEHD|ATMOS|DD(\\\\+|P).?([5-9])|EAC3.?([5-9])\",\n            },\n            new Radarr.Profiles.Inputs.CustomFormatSpecificationArgs\n            {\n                Implementation = \"LanguageSpecification\",\n                Name = \"Arabic\",\n                Negate = false,\n                Required = false,\n                Value = \"31\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.NewCustomFormat(ctx, \"example\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(true),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\t\u0026profiles.CustomFormatSpecificationArgs{\n\t\t\t\t\tImplementation: pulumi.String(\"ReleaseTitleSpecification\"),\n\t\t\t\t\tName:           pulumi.String(\"Surround Sound\"),\n\t\t\t\t\tNegate:         pulumi.Bool(false),\n\t\t\t\t\tRequired:       pulumi.Bool(false),\n\t\t\t\t\tValue:          pulumi.String(\"DTS.?(HD|ES|X(?!\\\\D))|TRUEHD|ATMOS|DD(\\\\+|P).?([5-9])|EAC3.?([5-9])\"),\n\t\t\t\t},\n\t\t\t\t\u0026profiles.CustomFormatSpecificationArgs{\n\t\t\t\t\tImplementation: pulumi.String(\"LanguageSpecification\"),\n\t\t\t\t\tName:           pulumi.String(\"Arabic\"),\n\t\t\t\t\tNegate:         pulumi.Bool(false),\n\t\t\t\t\tRequired:       pulumi.Bool(false),\n\t\t\t\t\tValue:          pulumi.String(\"31\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport com.pulumi.radarr.Profiles.inputs.CustomFormatSpecificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new CustomFormat(\"example\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(true)\n            .name(\"Example\")\n            .specifications(            \n                CustomFormatSpecificationArgs.builder()\n                    .implementation(\"ReleaseTitleSpecification\")\n                    .name(\"Surround Sound\")\n                    .negate(false)\n                    .required(false)\n                    .value(\"DTS.?(HD|ES|X(?!\\\\D))|TRUEHD|ATMOS|DD(\\\\+|P).?([5-9])|EAC3.?([5-9])\")\n                    .build(),\n                CustomFormatSpecificationArgs.builder()\n                    .implementation(\"LanguageSpecification\")\n                    .name(\"Arabic\")\n                    .negate(false)\n                    .required(false)\n                    .value(\"31\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: true\n      name: Example\n      specifications:\n        - implementation: ReleaseTitleSpecification\n          name: Surround Sound\n          negate: false\n          required: false\n          value: DTS.?(HD|ES|X(?!\\D))|TRUEHD|ATMOS|DD(\\+|P).?([5-9])|EAC3.?([5-9])\n        - implementation: LanguageSpecification\n          name: Arabic\n          negate: false\n          required: false\n          value: '31'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Profiles/customFormat:CustomFormat example 1\n```\n\n ",
            "properties": {
                "includeCustomFormatWhenRenaming": {
                    "type": "boolean",
                    "description": "Include custom format when renaming flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Custom Format name.\n"
                },
                "specifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/CustomFormatSpecification:CustomFormatSpecification"
                    },
                    "description": "Specifications.\n"
                }
            },
            "required": [
                "includeCustomFormatWhenRenaming",
                "name",
                "specifications"
            ],
            "inputProperties": {
                "includeCustomFormatWhenRenaming": {
                    "type": "boolean",
                    "description": "Include custom format when renaming flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Custom Format name.\n"
                },
                "specifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/CustomFormatSpecification:CustomFormatSpecification"
                    },
                    "description": "Specifications.\n"
                }
            },
            "requiredInputs": [
                "name",
                "specifications"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomFormat resources.\n",
                "properties": {
                    "includeCustomFormatWhenRenaming": {
                        "type": "boolean",
                        "description": "Include custom format when renaming flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Custom Format name.\n"
                    },
                    "specifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/CustomFormatSpecification:CustomFormatSpecification"
                        },
                        "description": "Specifications.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Profiles/delayProfile:DelayProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eDelay Profile resource.\nFor more information refer to [Delay Profiles](https://wiki.servarr.com/radarr/settings#delay-profiles) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.profiles.DelayProfile(\"example\", {\n    bypassIfHighestQuality: true,\n    enableTorrent: true,\n    enableUsenet: true,\n    preferredProtocol: \"torrent\",\n    tags: [\n        1,\n        2,\n    ],\n    torrentDelay: 0,\n    usenetDelay: 0,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.profiles.DelayProfile(\"example\",\n    bypass_if_highest_quality=True,\n    enable_torrent=True,\n    enable_usenet=True,\n    preferred_protocol=\"torrent\",\n    tags=[\n        1,\n        2,\n    ],\n    torrent_delay=0,\n    usenet_delay=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Profiles.DelayProfile(\"example\", new()\n    {\n        BypassIfHighestQuality = true,\n        EnableTorrent = true,\n        EnableUsenet = true,\n        PreferredProtocol = \"torrent\",\n        Tags = new[]\n        {\n            1,\n            2,\n        },\n        TorrentDelay = 0,\n        UsenetDelay = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.NewDelayProfile(ctx, \"example\", \u0026Profiles.DelayProfileArgs{\n\t\t\tBypassIfHighestQuality: pulumi.Bool(true),\n\t\t\tEnableTorrent:          pulumi.Bool(true),\n\t\t\tEnableUsenet:           pulumi.Bool(true),\n\t\t\tPreferredProtocol:      pulumi.String(\"torrent\"),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t\tTorrentDelay: pulumi.Int(0),\n\t\t\tUsenetDelay:  pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.DelayProfile;\nimport com.pulumi.radarr.Profiles.DelayProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DelayProfile(\"example\", DelayProfileArgs.builder()        \n            .bypassIfHighestQuality(true)\n            .enableTorrent(true)\n            .enableUsenet(true)\n            .preferredProtocol(\"torrent\")\n            .tags(            \n                1,\n                2)\n            .torrentDelay(0)\n            .usenetDelay(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Profiles:DelayProfile\n    properties:\n      bypassIfHighestQuality: true\n      enableTorrent: true\n      enableUsenet: true\n      preferredProtocol: torrent\n      tags:\n        - 1\n        - 2\n      torrentDelay: 0\n      usenetDelay: 0\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Profiles/delayProfile:DelayProfile example 10\n```\n\n ",
            "properties": {
                "bypassIfHighestQuality": {
                    "type": "boolean",
                    "description": "Bypass for highest quality flag.\n"
                },
                "enableTorrent": {
                    "type": "boolean",
                    "description": "Torrent allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                },
                "enableUsenet": {
                    "type": "boolean",
                    "description": "Usenet allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order.\n"
                },
                "preferredProtocol": {
                    "type": "string",
                    "description": "Preferred protocol.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentDelay": {
                    "type": "integer",
                    "description": "Torrent Delay.\n"
                },
                "usenetDelay": {
                    "type": "integer",
                    "description": "Usenet delay.\n"
                }
            },
            "required": [
                "bypassIfHighestQuality",
                "enableTorrent",
                "enableUsenet",
                "order",
                "preferredProtocol",
                "tags",
                "torrentDelay",
                "usenetDelay"
            ],
            "inputProperties": {
                "bypassIfHighestQuality": {
                    "type": "boolean",
                    "description": "Bypass for highest quality flag.\n"
                },
                "enableTorrent": {
                    "type": "boolean",
                    "description": "Torrent allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                },
                "enableUsenet": {
                    "type": "boolean",
                    "description": "Usenet allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order.\n"
                },
                "preferredProtocol": {
                    "type": "string",
                    "description": "Preferred protocol.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentDelay": {
                    "type": "integer",
                    "description": "Torrent Delay.\n"
                },
                "usenetDelay": {
                    "type": "integer",
                    "description": "Usenet delay.\n"
                }
            },
            "requiredInputs": [
                "tags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DelayProfile resources.\n",
                "properties": {
                    "bypassIfHighestQuality": {
                        "type": "boolean",
                        "description": "Bypass for highest quality flag.\n"
                    },
                    "enableTorrent": {
                        "type": "boolean",
                        "description": "Torrent allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                    },
                    "enableUsenet": {
                        "type": "boolean",
                        "description": "Usenet allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Order.\n"
                    },
                    "preferredProtocol": {
                        "type": "string",
                        "description": "Preferred protocol.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentDelay": {
                        "type": "integer",
                        "description": "Torrent Delay.\n"
                    },
                    "usenetDelay": {
                        "type": "integer",
                        "description": "Usenet delay.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Profiles/qualityDefinition:QualityDefinition": {
            "description": "\u003c!-- subcategory:Profiles --\u003eQuality Definition resource.\nFor more information refer to [Quality Definition](https://wiki.servarr.com/radarr/settings#quality-1) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.QualityDefinition;\nimport com.pulumi.radarr.Profiles.QualityDefinitionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new QualityDefinition(\"example\", QualityDefinitionArgs.builder()        \n            .id(21)\n            .maxSize(400)\n            .minSize(35)\n            .preferredSize(200)\n            .title(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Profiles:QualityDefinition\n    properties:\n      id: 21\n      maxSize: 400\n      minSize: 35\n      preferredSize: 200\n      title: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Profiles/qualityDefinition:QualityDefinition example 10\n```\n\n ",
            "properties": {
                "maxSize": {
                    "type": "number",
                    "description": "Maximum size MB/min.\n"
                },
                "minSize": {
                    "type": "number",
                    "description": "Minimum size MB/min.\n"
                },
                "preferredSize": {
                    "type": "number",
                    "description": "Preferred size MB/min.\n"
                },
                "qualityId": {
                    "type": "integer",
                    "description": "Quality ID.\n"
                },
                "qualityName": {
                    "type": "string",
                    "description": "Quality Name.\n"
                },
                "resolution": {
                    "type": "integer",
                    "description": "Quality Resolution.\n"
                },
                "source": {
                    "type": "string",
                    "description": "Quality source.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Quality Definition Title.\n"
                }
            },
            "required": [
                "maxSize",
                "minSize",
                "preferredSize",
                "qualityId",
                "qualityName",
                "resolution",
                "source",
                "title"
            ],
            "inputProperties": {
                "maxSize": {
                    "type": "number",
                    "description": "Maximum size MB/min.\n"
                },
                "minSize": {
                    "type": "number",
                    "description": "Minimum size MB/min.\n"
                },
                "preferredSize": {
                    "type": "number",
                    "description": "Preferred size MB/min.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Quality Definition Title.\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QualityDefinition resources.\n",
                "properties": {
                    "maxSize": {
                        "type": "number",
                        "description": "Maximum size MB/min.\n"
                    },
                    "minSize": {
                        "type": "number",
                        "description": "Minimum size MB/min.\n"
                    },
                    "preferredSize": {
                        "type": "number",
                        "description": "Preferred size MB/min.\n"
                    },
                    "qualityId": {
                        "type": "integer",
                        "description": "Quality ID.\n"
                    },
                    "qualityName": {
                        "type": "string",
                        "description": "Quality Name.\n"
                    },
                    "resolution": {
                        "type": "integer",
                        "description": "Quality Resolution.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Quality source.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Quality Definition Title.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Profiles/qualityProfile:QualityProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eQuality Profile resource.\nFor more information refer to [Quality Profile](https://wiki.servarr.com/radarr/settings#quality-profiles) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.profiles.QualityProfile(\"example\", {\n    cutoff: 1100,\n    language: {\n        id: 1,\n        name: \"English\",\n    },\n    name: \"example-4k\",\n    qualityGroups: [{\n        id: 1100,\n        name: \"4k\",\n        qualities: [\n            {\n                id: 18,\n                name: \"WEBDL-2160p\",\n                resolution: 2160,\n                source: \"web\",\n            },\n            {\n                id: 19,\n                name: \"Bluray-2160p\",\n                resolution: 2160,\n                source: \"bluray\",\n            },\n        ],\n    }],\n    upgradeAllowed: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.profiles.QualityProfile(\"example\",\n    cutoff=1100,\n    language=radarr.profiles.QualityProfileLanguageArgs(\n        id=1,\n        name=\"English\",\n    ),\n    name=\"example-4k\",\n    quality_groups=[radarr.profiles.QualityProfileQualityGroupArgs(\n        id=1100,\n        name=\"4k\",\n        qualities=[\n            radarr.profiles.QualityProfileQualityGroupQualityArgs(\n                id=18,\n                name=\"WEBDL-2160p\",\n                resolution=2160,\n                source=\"web\",\n            ),\n            radarr.profiles.QualityProfileQualityGroupQualityArgs(\n                id=19,\n                name=\"Bluray-2160p\",\n                resolution=2160,\n                source=\"bluray\",\n            ),\n        ],\n    )],\n    upgrade_allowed=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Profiles.QualityProfile(\"example\", new()\n    {\n        Cutoff = 1100,\n        Language = new Radarr.Profiles.Inputs.QualityProfileLanguageArgs\n        {\n            Id = 1,\n            Name = \"English\",\n        },\n        Name = \"example-4k\",\n        QualityGroups = new[]\n        {\n            new Radarr.Profiles.Inputs.QualityProfileQualityGroupArgs\n            {\n                Id = 1100,\n                Name = \"4k\",\n                Qualities = new[]\n                {\n                    new Radarr.Profiles.Inputs.QualityProfileQualityGroupQualityArgs\n                    {\n                        Id = 18,\n                        Name = \"WEBDL-2160p\",\n                        Resolution = 2160,\n                        Source = \"web\",\n                    },\n                    new Radarr.Profiles.Inputs.QualityProfileQualityGroupQualityArgs\n                    {\n                        Id = 19,\n                        Name = \"Bluray-2160p\",\n                        Resolution = 2160,\n                        Source = \"bluray\",\n                    },\n                },\n            },\n        },\n        UpgradeAllowed = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.NewQualityProfile(ctx, \"example\", \u0026Profiles.QualityProfileArgs{\n\t\t\tCutoff: pulumi.Int(1100),\n\t\t\tLanguage: \u0026profiles.QualityProfileLanguageArgs{\n\t\t\t\tId:   pulumi.Int(1),\n\t\t\t\tName: pulumi.String(\"English\"),\n\t\t\t},\n\t\t\tName: pulumi.String(\"example-4k\"),\n\t\t\tQualityGroups: profiles.QualityProfileQualityGroupArray{\n\t\t\t\t\u0026profiles.QualityProfileQualityGroupArgs{\n\t\t\t\t\tId:   pulumi.Int(1100),\n\t\t\t\t\tName: pulumi.String(\"4k\"),\n\t\t\t\t\tQualities: profiles.QualityProfileQualityGroupQualityArray{\n\t\t\t\t\t\t\u0026profiles.QualityProfileQualityGroupQualityArgs{\n\t\t\t\t\t\t\tId:         pulumi.Int(18),\n\t\t\t\t\t\t\tName:       pulumi.String(\"WEBDL-2160p\"),\n\t\t\t\t\t\t\tResolution: pulumi.Int(2160),\n\t\t\t\t\t\t\tSource:     pulumi.String(\"web\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026profiles.QualityProfileQualityGroupQualityArgs{\n\t\t\t\t\t\t\tId:         pulumi.Int(19),\n\t\t\t\t\t\t\tName:       pulumi.String(\"Bluray-2160p\"),\n\t\t\t\t\t\t\tResolution: pulumi.Int(2160),\n\t\t\t\t\t\t\tSource:     pulumi.String(\"bluray\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tUpgradeAllowed: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.QualityProfile;\nimport com.pulumi.radarr.Profiles.QualityProfileArgs;\nimport com.pulumi.radarr.Profiles.inputs.QualityProfileLanguageArgs;\nimport com.pulumi.radarr.Profiles.inputs.QualityProfileQualityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new QualityProfile(\"example\", QualityProfileArgs.builder()        \n            .cutoff(1100)\n            .language(QualityProfileLanguageArgs.builder()\n                .id(1)\n                .name(\"English\")\n                .build())\n            .name(\"example-4k\")\n            .qualityGroups(QualityProfileQualityGroupArgs.builder()\n                .id(1100)\n                .name(\"4k\")\n                .qualities(                \n                    QualityProfileQualityGroupQualityArgs.builder()\n                        .id(18)\n                        .name(\"WEBDL-2160p\")\n                        .resolution(2160)\n                        .source(\"web\")\n                        .build(),\n                    QualityProfileQualityGroupQualityArgs.builder()\n                        .id(19)\n                        .name(\"Bluray-2160p\")\n                        .resolution(2160)\n                        .source(\"bluray\")\n                        .build())\n                .build())\n            .upgradeAllowed(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Profiles:QualityProfile\n    properties:\n      cutoff: 1100\n      language:\n        id: 1\n        name: English\n      name: example-4k\n      qualityGroups:\n        - id: 1100\n          name: 4k\n          qualities:\n            - id: 18\n              name: WEBDL-2160p\n              resolution: 2160\n              source: web\n            - id: 19\n              name: Bluray-2160p\n              resolution: 2160\n              source: bluray\n      upgradeAllowed: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Profiles/qualityProfile:QualityProfile example 10\n```\n\n ",
            "properties": {
                "cutoff": {
                    "type": "integer",
                    "description": "Quality ID to which cutoff.\n"
                },
                "cutoffFormatScore": {
                    "type": "integer",
                    "description": "Cutoff format score.\n"
                },
                "formatItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/QualityProfileFormatItem:QualityProfileFormatItem"
                    },
                    "description": "Format items.\n"
                },
                "language": {
                    "$ref": "#/types/radarr:Profiles/QualityProfileLanguage:QualityProfileLanguage",
                    "description": "Language.\n"
                },
                "minFormatScore": {
                    "type": "integer",
                    "description": "Min format score.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                },
                "qualityGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/QualityProfileQualityGroup:QualityProfileQualityGroup"
                    },
                    "description": "Quality groups.\n"
                },
                "upgradeAllowed": {
                    "type": "boolean",
                    "description": "Upgrade allowed flag.\n"
                }
            },
            "required": [
                "cutoff",
                "cutoffFormatScore",
                "formatItems",
                "language",
                "minFormatScore",
                "name",
                "qualityGroups",
                "upgradeAllowed"
            ],
            "inputProperties": {
                "cutoff": {
                    "type": "integer",
                    "description": "Quality ID to which cutoff.\n"
                },
                "cutoffFormatScore": {
                    "type": "integer",
                    "description": "Cutoff format score.\n"
                },
                "formatItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/QualityProfileFormatItem:QualityProfileFormatItem"
                    },
                    "description": "Format items.\n"
                },
                "language": {
                    "$ref": "#/types/radarr:Profiles/QualityProfileLanguage:QualityProfileLanguage",
                    "description": "Language.\n"
                },
                "minFormatScore": {
                    "type": "integer",
                    "description": "Min format score.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                },
                "qualityGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/radarr:Profiles/QualityProfileQualityGroup:QualityProfileQualityGroup"
                    },
                    "description": "Quality groups.\n"
                },
                "upgradeAllowed": {
                    "type": "boolean",
                    "description": "Upgrade allowed flag.\n"
                }
            },
            "requiredInputs": [
                "language",
                "name",
                "qualityGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QualityProfile resources.\n",
                "properties": {
                    "cutoff": {
                        "type": "integer",
                        "description": "Quality ID to which cutoff.\n"
                    },
                    "cutoffFormatScore": {
                        "type": "integer",
                        "description": "Cutoff format score.\n"
                    },
                    "formatItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/QualityProfileFormatItem:QualityProfileFormatItem"
                        },
                        "description": "Format items.\n"
                    },
                    "language": {
                        "$ref": "#/types/radarr:Profiles/QualityProfileLanguage:QualityProfileLanguage",
                        "description": "Language.\n"
                    },
                    "minFormatScore": {
                        "type": "integer",
                        "description": "Min format score.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Quality Profile Name.\n"
                    },
                    "qualityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/QualityProfileQualityGroup:QualityProfileQualityGroup"
                        },
                        "description": "Quality groups.\n"
                    },
                    "upgradeAllowed": {
                        "type": "boolean",
                        "description": "Upgrade allowed flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "radarr:Tags/tag:Tag": {
            "description": "\u003c!-- subcategory:Tags --\u003eTag resource.\nFor more information refer to [Tags](https://wiki.servarr.com/radarr/settings#tags) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\n\nconst example = new radarr.tags.Tag(\"example\", {label: \"some-value\"});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.tags.Tag(\"example\", label=\"some-value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Radarr.Tags.Tag(\"example\", new()\n    {\n        Label = \"some-value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Tags\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Tags.NewTag(ctx, \"example\", \u0026Tags.TagArgs{\n\t\t\tLabel: pulumi.String(\"some-value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Tags.Tag;\nimport com.pulumi.radarr.Tags.TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Tag(\"example\", TagArgs.builder()        \n            .label(\"some-value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Tags:Tag\n    properties:\n      label: some-value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import radarr:Tags/tag:Tag example 10\n```\n\n ",
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Tag label. It must be lowercase.\n"
                }
            },
            "required": [
                "label"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "Tag label. It must be lowercase.\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Tag label. It must be lowercase.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "radarr:DownloadClient/getDownloadClient:getDownloadClient": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eSingle Download Client.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.DownloadClient.getDownloadClient({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.DownloadClient.get_download_client(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.DownloadClient.GetDownloadClient.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.GetDownloadClient(ctx, \u0026downloadclient.GetDownloadClientArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientFunctions;\nimport com.pulumi.radarr.DownloadClient.inputs.GetDownloadClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadClientFunctions.getDownloadClient(GetDownloadClientArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:DownloadClient:getDownloadClient\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDownloadClient.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDownloadClient.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "addStopped": {
                        "type": "boolean",
                        "description": "Add stopped flag.\n"
                    },
                    "additionalTags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "apiUrl": {
                        "type": "string",
                        "description": "API URL.\n"
                    },
                    "appId": {
                        "type": "string",
                        "description": "App ID.\n"
                    },
                    "appToken": {
                        "type": "string",
                        "description": "App Token.\n",
                        "secret": true
                    },
                    "category": {
                        "type": "string",
                        "description": "Category.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "DownloadClient configuration template.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Destination.\n"
                    },
                    "destinationDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Field tags.\n"
                    },
                    "firstAndLast": {
                        "type": "boolean",
                        "description": "First and last flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Download Client ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "DownloadClient implementation name.\n"
                    },
                    "initialState": {
                        "type": "integer",
                        "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                    },
                    "intialState": {
                        "type": "integer",
                        "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                    },
                    "magnetFileExtension": {
                        "type": "string",
                        "description": "Magnet file extension.\n"
                    },
                    "movieCategory": {
                        "type": "string",
                        "description": "Movie category.\n"
                    },
                    "movieDirectory": {
                        "type": "string",
                        "description": "Movie directory.\n"
                    },
                    "movieImportedCategory": {
                        "type": "string",
                        "description": "Movie imported category.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "nzbFolder": {
                        "type": "string",
                        "description": "NZB folder.\n"
                    },
                    "olderMoviePriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "olderPriority": {
                        "type": "integer",
                        "description": "Older Movie priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "postImportTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Post import tags.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read only flag.\n"
                    },
                    "recentMoviePriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "recentPriority": {
                        "type": "integer",
                        "description": "Recent Movie priority. `0` Last, `1` First.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    },
                    "rpcPath": {
                        "type": "string",
                        "description": "RPC path.\n"
                    },
                    "saveMagnetFiles": {
                        "type": "boolean",
                        "description": "Save magnet files flag.\n"
                    },
                    "secretToken": {
                        "type": "string",
                        "description": "Secret token.\n"
                    },
                    "sequentialOrder": {
                        "type": "boolean",
                        "description": "Sequential order flag.\n"
                    },
                    "startOnAdd": {
                        "type": "boolean",
                        "description": "Start on add flag.\n"
                    },
                    "strmFolder": {
                        "type": "string",
                        "description": "STRM folder.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentFolder": {
                        "type": "string",
                        "description": "Torrent folder.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "watchFolder": {
                        "type": "string",
                        "description": "Watch folder flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addPaused",
                    "addStopped",
                    "additionalTags",
                    "apiKey",
                    "apiUrl",
                    "appId",
                    "appToken",
                    "category",
                    "configContract",
                    "destination",
                    "destinationDirectory",
                    "enable",
                    "fieldTags",
                    "firstAndLast",
                    "host",
                    "id",
                    "implementation",
                    "initialState",
                    "intialState",
                    "magnetFileExtension",
                    "movieCategory",
                    "movieDirectory",
                    "movieImportedCategory",
                    "name",
                    "nzbFolder",
                    "olderMoviePriority",
                    "olderPriority",
                    "password",
                    "port",
                    "postImportTags",
                    "priority",
                    "protocol",
                    "readOnly",
                    "recentMoviePriority",
                    "recentPriority",
                    "removeCompletedDownloads",
                    "removeFailedDownloads",
                    "rpcPath",
                    "saveMagnetFiles",
                    "secretToken",
                    "sequentialOrder",
                    "startOnAdd",
                    "strmFolder",
                    "tags",
                    "torrentFolder",
                    "urlBase",
                    "useSsl",
                    "username",
                    "watchFolder"
                ]
            }
        },
        "radarr:DownloadClient/getDownloadClientConfig:getDownloadClientConfig": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Config.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.DownloadClient.getDownloadClientConfig({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.DownloadClient.get_download_client_config()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.DownloadClient.GetDownloadClientConfig.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.GetDownloadClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadClientFunctions.getDownloadClientConfig();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:DownloadClient:getDownloadClientConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDownloadClientConfig.\n",
                "properties": {
                    "autoRedownloadFailed": {
                        "type": "boolean",
                        "description": "Auto Redownload Failed flag.\n"
                    },
                    "checkForFinishedDownloadInterval": {
                        "type": "integer",
                        "description": "Check for finished download interval.\n"
                    },
                    "downloadClientWorkingFolders": {
                        "type": "string",
                        "description": "Download Client Working Folders.\n"
                    },
                    "enableCompletedDownloadHandling": {
                        "type": "boolean",
                        "description": "Enable Completed Download Handling flag.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Download Client Config ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "autoRedownloadFailed",
                    "checkForFinishedDownloadInterval",
                    "downloadClientWorkingFolders",
                    "enableCompletedDownloadHandling",
                    "id"
                ]
            }
        },
        "radarr:DownloadClient/getDownloadClients:getDownloadClients": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eList all available Download Clients.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.DownloadClient.getDownloadClients({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.DownloadClient.get_download_clients()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.DownloadClient.GetDownloadClients.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.GetDownloadClients(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadClientFunctions.getDownloadClients();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:DownloadClient:getDownloadClients\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDownloadClients.\n",
                "properties": {
                    "downloadClients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:DownloadClient/getDownloadClientsDownloadClient:getDownloadClientsDownloadClient"
                        },
                        "description": "Download Client list..\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "downloadClients",
                    "id"
                ]
            }
        },
        "radarr:DownloadClient/getRemotePathMapping:getRemotePathMapping": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eSingle Remote Path Mapping.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.DownloadClient.getRemotePathMapping({\n    id: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.DownloadClient.get_remote_path_mapping(id=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.DownloadClient.GetRemotePathMapping.Invoke(new()\n    {\n        Id = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.GetRemotePathMapping(ctx, \u0026downloadclient.GetRemotePathMappingArgs{\n\t\t\tId: 1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientFunctions;\nimport com.pulumi.radarr.DownloadClient.inputs.GetRemotePathMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadClientFunctions.getRemotePathMapping(GetRemotePathMappingArgs.builder()\n            .id(1)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:DownloadClient:getRemotePathMapping\n      Arguments:\n        id: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRemotePathMapping.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Remote Path Mapping ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRemotePathMapping.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "Download Client host.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Remote Path Mapping ID.\n"
                    },
                    "localPath": {
                        "type": "string",
                        "description": "Local path.\n"
                    },
                    "remotePath": {
                        "type": "string",
                        "description": "Download Client remote path.\n"
                    }
                },
                "type": "object",
                "required": [
                    "host",
                    "id",
                    "localPath",
                    "remotePath"
                ]
            }
        },
        "radarr:DownloadClient/getRemotePathMappings:getRemotePathMappings": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eList all available Remote Path Mappings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.DownloadClient.getRemotePathMappings({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.DownloadClient.get_remote_path_mappings()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.DownloadClient.GetRemotePathMappings.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/DownloadClient\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClient.GetRemotePathMappings(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.DownloadClient.DownloadClientFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadClientFunctions.getRemotePathMappings();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:DownloadClient:getRemotePathMappings\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getRemotePathMappings.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "remotePathMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:DownloadClient/getRemotePathMappingsRemotePathMapping:getRemotePathMappingsRemotePathMapping"
                        },
                        "description": "Remote Path Mapping list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "remotePathMappings"
                ]
            }
        },
        "radarr:ImportLists/getImportList:getImportList": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eSingle Import List.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.ImportLists.getImportList({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.ImportLists.get_import_list(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.ImportLists.GetImportList.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.GetImportList(ctx, \u0026importlists.GetImportListArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListsFunctions;\nimport com.pulumi.radarr.ImportLists.inputs.GetImportListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImportListsFunctions.getImportList(GetImportListArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:ImportLists:getImportList\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImportList.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImportList.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accountId": {
                        "type": "string",
                        "description": "Account ID.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "cast": {
                        "type": "boolean",
                        "description": "Include cast.\n"
                    },
                    "castDirector": {
                        "type": "boolean",
                        "description": "Include cast director.\n"
                    },
                    "castProducer": {
                        "type": "boolean",
                        "description": "Include cast producer.\n"
                    },
                    "castSound": {
                        "type": "boolean",
                        "description": "Include cast sound.\n"
                    },
                    "castWriting": {
                        "type": "boolean",
                        "description": "Include cast writing.\n"
                    },
                    "certification": {
                        "type": "string",
                        "description": "Certification.\n"
                    },
                    "companyId": {
                        "type": "string",
                        "description": "Company ID.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "ImportList configuration template.\n"
                    },
                    "enableAuto": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled flag.\n"
                    },
                    "excludeGenreIds": {
                        "type": "string",
                        "description": "Exclude genre IDs.\n"
                    },
                    "expires": {
                        "type": "string",
                        "description": "Expires.\n"
                    },
                    "genres": {
                        "type": "string",
                        "description": "Genres.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Import List ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "ImportList implementation name.\n"
                    },
                    "includeGenreIds": {
                        "type": "string",
                        "description": "Include genre IDs.\n"
                    },
                    "keywordId": {
                        "type": "string",
                        "description": "Keyword ID.\n"
                    },
                    "languageCode": {
                        "type": "integer",
                        "description": "Language code.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "limit.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "Link.\n"
                    },
                    "listId": {
                        "type": "string",
                        "description": "List ID.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "listType": {
                        "type": "string",
                        "description": "List type.\n"
                    },
                    "listname": {
                        "type": "string",
                        "description": "List name.\n"
                    },
                    "minScore": {
                        "type": "integer",
                        "description": "Min score.\n"
                    },
                    "minVoteAverage": {
                        "type": "string",
                        "description": "Min vote average.\n"
                    },
                    "minVotes": {
                        "type": "string",
                        "description": "Min votes.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\n"
                    },
                    "monitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "onlyActive": {
                        "type": "boolean",
                        "description": "Only active.\n"
                    },
                    "personId": {
                        "type": "string",
                        "description": "Person ID.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "profileIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Profile IDs.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rating": {
                        "type": "string",
                        "description": "Rating.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Refresh token.\n",
                        "secret": true
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "searchOnAdd": {
                        "type": "boolean",
                        "description": "Search on add flag.\n"
                    },
                    "source": {
                        "type": "integer",
                        "description": "Source.\n"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Tag IDs.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "tmdbCertification": {
                        "type": "string",
                        "description": "Certification.\n"
                    },
                    "tmdbListType": {
                        "type": "integer",
                        "description": "TMDB list type.\n"
                    },
                    "traktAdditionalParameters": {
                        "type": "string",
                        "description": "Trakt additional parameters.\n"
                    },
                    "traktListType": {
                        "type": "integer",
                        "description": "Trakt list type.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "userListType": {
                        "type": "integer",
                        "description": "User list type.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "years": {
                        "type": "string",
                        "description": "Years.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessToken",
                    "accountId",
                    "apiKey",
                    "authUser",
                    "baseUrl",
                    "cast",
                    "castDirector",
                    "castProducer",
                    "castSound",
                    "castWriting",
                    "certification",
                    "companyId",
                    "configContract",
                    "enableAuto",
                    "enabled",
                    "excludeGenreIds",
                    "expires",
                    "genres",
                    "id",
                    "implementation",
                    "includeGenreIds",
                    "keywordId",
                    "languageCode",
                    "limit",
                    "link",
                    "listId",
                    "listOrder",
                    "listType",
                    "listname",
                    "minScore",
                    "minVoteAverage",
                    "minVotes",
                    "minimumAvailability",
                    "monitor",
                    "name",
                    "onlyActive",
                    "personId",
                    "port",
                    "profileIds",
                    "qualityProfileId",
                    "rating",
                    "refreshToken",
                    "rootFolderPath",
                    "searchOnAdd",
                    "source",
                    "tagIds",
                    "tags",
                    "tmdbCertification",
                    "tmdbListType",
                    "traktAdditionalParameters",
                    "traktListType",
                    "url",
                    "urlBase",
                    "userListType",
                    "username",
                    "years"
                ]
            }
        },
        "radarr:ImportLists/getImportListConfig:getImportListConfig": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Config.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.ImportLists.getImportListConfig({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.ImportLists.get_import_list_config()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.ImportLists.GetImportListConfig.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.GetImportListConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImportListsFunctions.getImportListConfig();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:ImportLists:getImportListConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getImportListConfig.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Import List Config ID.\n"
                    },
                    "syncInterval": {
                        "type": "integer",
                        "description": "List Update Interval.\n"
                    },
                    "syncLevel": {
                        "type": "string",
                        "description": "Clean library level.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "syncInterval",
                    "syncLevel"
                ]
            }
        },
        "radarr:ImportLists/getImportListExclusion:getImportListExclusion": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eSingle ImportListExclusion.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.ImportLists.getImportListExclusion({\n    tmdbId: 987,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.ImportLists.get_import_list_exclusion(tmdb_id=987)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.ImportLists.GetImportListExclusion.Invoke(new()\n    {\n        TmdbId = 987,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.GetImportListExclusion(ctx, \u0026importlists.GetImportListExclusionArgs{\n\t\t\tTmdbId: 987,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListsFunctions;\nimport com.pulumi.radarr.ImportLists.inputs.GetImportListExclusionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImportListsFunctions.getImportListExclusion(GetImportListExclusionArgs.builder()\n            .tmdbId(987)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:ImportLists:getImportListExclusion\n      Arguments:\n        tmdbId: 987\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImportListExclusion.\n",
                "properties": {
                    "tmdbId": {
                        "type": "integer",
                        "description": "Movie TMDB ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tmdbId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImportListExclusion.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Import List Exclusion ID.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Movie to be excluded.\n"
                    },
                    "tmdbId": {
                        "type": "integer",
                        "description": "Movie TMDB ID.\n"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Year.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "title",
                    "tmdbId",
                    "year"
                ]
            }
        },
        "radarr:ImportLists/getImportListExclusions:getImportListExclusions": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eList all available ImportListExclusions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.ImportLists.getImportListExclusions({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.ImportLists.get_import_list_exclusions()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.ImportLists.GetImportListExclusions.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.GetImportListExclusions(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImportListsFunctions.getImportListExclusions();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:ImportLists:getImportListExclusions\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getImportListExclusions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "importListExclusions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:ImportLists/getImportListExclusionsImportListExclusion:getImportListExclusionsImportListExclusion"
                        },
                        "description": "ImportListExclusion list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "importListExclusions"
                ]
            }
        },
        "radarr:ImportLists/getImportLists:getImportLists": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eList all available Import Lists.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.ImportLists.getImportLists({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.ImportLists.get_import_lists()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.ImportLists.GetImportLists.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.GetImportLists(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.ImportLists.ImportListsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImportListsFunctions.getImportLists();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:ImportLists:getImportLists\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getImportLists.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "importLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:ImportLists/getImportListsImportList:getImportListsImportList"
                        },
                        "description": "Import List list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "importLists"
                ]
            }
        },
        "radarr:Indexers/getIndexer:getIndexer": {
            "description": "\u003c!-- subcategory:Indexers --\u003eSingle Indexer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Indexers.getIndexer({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Indexers.get_indexer(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Indexers.GetIndexer.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.GetIndexer(ctx, \u0026indexers.GetIndexerArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexersFunctions;\nimport com.pulumi.radarr.Indexers.inputs.GetIndexerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IndexersFunctions.getIndexer(GetIndexerArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Indexers:getIndexer\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIndexer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Indexer name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIndexer.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "allowZeroSize": {
                        "type": "boolean",
                        "description": "Allow zero size files.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "apiPath": {
                        "type": "string",
                        "description": "API path.\n"
                    },
                    "apiUser": {
                        "type": "string",
                        "description": "API User.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "captchaToken": {
                        "type": "string",
                        "description": "Captcha token.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Series list.\n"
                    },
                    "codecs": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Codecs.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Indexer configuration template.\n"
                    },
                    "cookie": {
                        "type": "string",
                        "description": "Cookie.\n"
                    },
                    "delay": {
                        "type": "integer",
                        "description": "Delay before grabbing.\n"
                    },
                    "downloadClientId": {
                        "type": "integer",
                        "description": "Download client ID.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Indexer ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Indexer implementation name.\n"
                    },
                    "mediums": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Mediumd.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "multiLanguages": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Language list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Indexer name.\n"
                    },
                    "passkey": {
                        "type": "string",
                        "description": "Passkey.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                    },
                    "rankedOnly": {
                        "type": "boolean",
                        "description": "Allow ranked only.\n"
                    },
                    "removeYear": {
                        "type": "boolean",
                        "description": "Remove year.\n"
                    },
                    "requiredFlags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Computed flags.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object",
                "required": [
                    "additionalParameters",
                    "allowZeroSize",
                    "apiKey",
                    "apiPath",
                    "apiUser",
                    "baseUrl",
                    "captchaToken",
                    "categories",
                    "codecs",
                    "configContract",
                    "cookie",
                    "delay",
                    "downloadClientId",
                    "enableAutomaticSearch",
                    "enableInteractiveSearch",
                    "enableRss",
                    "id",
                    "implementation",
                    "mediums",
                    "minimumSeeders",
                    "multiLanguages",
                    "name",
                    "passkey",
                    "priority",
                    "protocol",
                    "rankedOnly",
                    "removeYear",
                    "requiredFlags",
                    "seedRatio",
                    "seedTime",
                    "tags",
                    "user",
                    "username"
                ]
            }
        },
        "radarr:Indexers/getIndexerConfig:getIndexerConfig": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Config.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Indexers.getIndexerConfig({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Indexers.get_indexer_config()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Indexers.GetIndexerConfig.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.GetIndexerConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexersFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IndexersFunctions.getIndexerConfig();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Indexers:getIndexerConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIndexerConfig.\n",
                "properties": {
                    "allowHardcodedSubs": {
                        "type": "boolean",
                        "description": "Allow hardcoded subs.\n"
                    },
                    "availabilityDelay": {
                        "type": "integer",
                        "description": "Availability delay.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    },
                    "maximumSize": {
                        "type": "integer",
                        "description": "Maximum size.\n"
                    },
                    "minimumAge": {
                        "type": "integer",
                        "description": "Minimum age.\n"
                    },
                    "preferIndexerFlags": {
                        "type": "boolean",
                        "description": "Prefer indexer flags.\n"
                    },
                    "retention": {
                        "type": "integer",
                        "description": "Retention.\n"
                    },
                    "rssSyncInterval": {
                        "type": "integer",
                        "description": "RSS sync interval.\n"
                    },
                    "whitelistedHardcodedSubs": {
                        "type": "string",
                        "description": "Whitelisted hardconded subs.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowHardcodedSubs",
                    "availabilityDelay",
                    "id",
                    "maximumSize",
                    "minimumAge",
                    "preferIndexerFlags",
                    "retention",
                    "rssSyncInterval",
                    "whitelistedHardcodedSubs"
                ]
            }
        },
        "radarr:Indexers/getIndexers:getIndexers": {
            "description": "\u003c!-- subcategory:Indexers --\u003eList all available Indexers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Indexers.getIndexers({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Indexers.get_indexers()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Indexers.GetIndexers.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.GetIndexers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexersFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IndexersFunctions.getIndexers();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Indexers:getIndexers\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIndexers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "indexers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Indexers/getIndexersIndexer:getIndexersIndexer"
                        },
                        "description": "Indexer list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "indexers"
                ]
            }
        },
        "radarr:Indexers/getRestriction:getRestriction": {
            "description": "\u003c!-- subcategory:Indexers --\u003eSingle Restriction.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Indexers.getRestriction({\n    id: 3,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Indexers.get_restriction(id=3)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Indexers.GetRestriction.Invoke(new()\n    {\n        Id = 3,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.GetRestriction(ctx, \u0026indexers.GetRestrictionArgs{\n\t\t\tId: 3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexersFunctions;\nimport com.pulumi.radarr.Indexers.inputs.GetRestrictionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IndexersFunctions.getRestriction(GetRestrictionArgs.builder()\n            .id(3)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Indexers:getRestriction\n      Arguments:\n        id: 3\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRestriction.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Restriction ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRestriction.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Restriction ID.\n"
                    },
                    "ignored": {
                        "type": "string",
                        "description": "Ignored.\n"
                    },
                    "required": {
                        "type": "string",
                        "description": "Required.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ignored",
                    "required",
                    "tags"
                ]
            }
        },
        "radarr:Indexers/getRestrictions:getRestrictions": {
            "description": "\u003c!-- subcategory:Indexers --\u003eList all available Restrictions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Indexers.getRestrictions({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Indexers.get_restrictions()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Indexers.GetRestrictions.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.GetRestrictions(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Indexers.IndexersFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IndexersFunctions.getRestrictions();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Indexers:getRestrictions\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getRestrictions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "restrictions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Indexers/getRestrictionsRestriction:getRestrictionsRestriction"
                        },
                        "description": "Restriction list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "restrictions"
                ]
            }
        },
        "radarr:MediaManagement/getMediaManagement:getMediaManagement": {
            "description": "\u003c!-- subcategory:Media Management --\u003eMedia Management.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.MediaManagement.getMediaManagement({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.MediaManagement.get_media_management()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.MediaManagement.GetMediaManagement.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.GetMediaManagement(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.MediaManagement.MediaManagementFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MediaManagementFunctions.getMediaManagement();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:MediaManagement:getMediaManagement\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getMediaManagement.\n",
                "properties": {
                    "autoRenameFolders": {
                        "type": "boolean",
                        "description": "Auto rename folders.\n"
                    },
                    "autoUnmonitorPreviouslyDownloadedMovies": {
                        "type": "boolean",
                        "description": "Auto unmonitor previously downloaded movies.\n"
                    },
                    "chmodFolder": {
                        "type": "string",
                        "description": "Permission in linux format.\n"
                    },
                    "chownGroup": {
                        "type": "string",
                        "description": "Group used for permission.\n"
                    },
                    "copyUsingHardlinks": {
                        "type": "boolean",
                        "description": "Use hardlinks instead of copy.\n"
                    },
                    "createEmptyMovieFolders": {
                        "type": "boolean",
                        "description": "Create empty movies directories.\n"
                    },
                    "deleteEmptyFolders": {
                        "type": "boolean",
                        "description": "Delete empty movies directories.\n"
                    },
                    "downloadPropersAndRepacks": {
                        "type": "string",
                        "description": "Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.\n"
                    },
                    "enableMediaInfo": {
                        "type": "boolean",
                        "description": "Scan files details.\n"
                    },
                    "extraFileExtensions": {
                        "type": "string",
                        "description": "Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).\n"
                    },
                    "fileDate": {
                        "type": "string",
                        "description": "Define the file date modification. valid inputs are: 'none', 'localAirDate, and 'utcAirDate'.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    },
                    "importExtraFiles": {
                        "type": "boolean",
                        "description": "Import extra files. If enabled it will leverage 'extra*file*extensions'.\n"
                    },
                    "minimumFreeSpaceWhenImporting": {
                        "type": "integer",
                        "description": "Minimum free space in MB to allow import.\n"
                    },
                    "pathsDefaultStatic": {
                        "type": "boolean",
                        "description": "Path default static.\n"
                    },
                    "recycleBin": {
                        "type": "string",
                        "description": "Recycle bin absolute path.\n"
                    },
                    "recycleBinCleanupDays": {
                        "type": "integer",
                        "description": "Recyle bin days of retention.\n"
                    },
                    "rescanAfterRefresh": {
                        "type": "string",
                        "description": "Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.\n"
                    },
                    "setPermissionsLinux": {
                        "type": "boolean",
                        "description": "Set permission for imported files.\n"
                    },
                    "skipFreeSpaceCheckWhenImporting": {
                        "type": "boolean",
                        "description": "Skip free space check before importing.\n"
                    }
                },
                "type": "object",
                "required": [
                    "autoRenameFolders",
                    "autoUnmonitorPreviouslyDownloadedMovies",
                    "chmodFolder",
                    "chownGroup",
                    "copyUsingHardlinks",
                    "createEmptyMovieFolders",
                    "deleteEmptyFolders",
                    "downloadPropersAndRepacks",
                    "enableMediaInfo",
                    "extraFileExtensions",
                    "fileDate",
                    "id",
                    "importExtraFiles",
                    "minimumFreeSpaceWhenImporting",
                    "pathsDefaultStatic",
                    "recycleBin",
                    "recycleBinCleanupDays",
                    "rescanAfterRefresh",
                    "setPermissionsLinux",
                    "skipFreeSpaceCheckWhenImporting"
                ]
            }
        },
        "radarr:MediaManagement/getNaming:getNaming": {
            "description": "\u003c!-- subcategory:Media Management --\u003eNaming.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.MediaManagement.getNaming({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.MediaManagement.get_naming()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.MediaManagement.GetNaming.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.GetNaming(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.MediaManagement.MediaManagementFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MediaManagementFunctions.getNaming();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:MediaManagement:getNaming\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getNaming.\n",
                "properties": {
                    "colonReplacementFormat": {
                        "type": "string",
                        "description": "Change how Radarr handles colon replacement. Valid values are: 'delete', 'dash', 'spaceDash', and 'spaceDashSpace'.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    },
                    "includeQuality": {
                        "type": "boolean",
                        "description": "Include quality in file name.\n"
                    },
                    "movieFolderFormat": {
                        "type": "string",
                        "description": "Movie folder format.\n"
                    },
                    "renameMovies": {
                        "type": "boolean",
                        "description": "Radarr will use the existing file name if false.\n"
                    },
                    "replaceIllegalCharacters": {
                        "type": "boolean",
                        "description": "Replace illegal characters. They will be removed if false.\n"
                    },
                    "replaceSpaces": {
                        "type": "boolean",
                        "description": "Replace spaces.\n"
                    },
                    "standardMovieFormat": {
                        "type": "string",
                        "description": "Standard movie formatss.\n"
                    }
                },
                "type": "object",
                "required": [
                    "colonReplacementFormat",
                    "id",
                    "includeQuality",
                    "movieFolderFormat",
                    "renameMovies",
                    "replaceIllegalCharacters",
                    "replaceSpaces",
                    "standardMovieFormat"
                ]
            }
        },
        "radarr:MediaManagement/getRootFolder:getRootFolder": {
            "description": "\u003c!-- subcategory:Media Management --\u003eSingle Root Folder.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.MediaManagement.getRootFolder({\n    path: \"/example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.MediaManagement.get_root_folder(path=\"/example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.MediaManagement.GetRootFolder.Invoke(new()\n    {\n        Path = \"/example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.GetRootFolder(ctx, \u0026mediamanagement.GetRootFolderArgs{\n\t\t\tPath: \"/example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.MediaManagement.MediaManagementFunctions;\nimport com.pulumi.radarr.MediaManagement.inputs.GetRootFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MediaManagementFunctions.getRootFolder(GetRootFolderArgs.builder()\n            .path(\"/example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:MediaManagement:getRootFolder\n      Arguments:\n        path: /example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRootFolder.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "Root Folder absolute path.\n"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRootFolder.\n",
                "properties": {
                    "accessible": {
                        "type": "boolean",
                        "description": "Access flag.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Root Folder ID.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Root Folder absolute path.\n"
                    },
                    "unmappedFolders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:MediaManagement/getRootFolderUnmappedFolder:getRootFolderUnmappedFolder"
                        },
                        "description": "List of folders with no associated series.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessible",
                    "id",
                    "path",
                    "unmappedFolders"
                ]
            }
        },
        "radarr:MediaManagement/getRootFolders:getRootFolders": {
            "description": "\u003c!-- subcategory:Media Management --\u003eList all available Root Folders.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.MediaManagement.getRootFolders({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.MediaManagement.get_root_folders()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.MediaManagement.GetRootFolders.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.GetRootFolders(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.MediaManagement.MediaManagementFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MediaManagementFunctions.getRootFolders();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:MediaManagement:getRootFolders\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getRootFolders.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "rootFolders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:MediaManagement/getRootFoldersRootFolder:getRootFoldersRootFolder"
                        },
                        "description": "Root Folder list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "rootFolders"
                ]
            }
        },
        "radarr:Metadata/getMetadata:getMetadata": {
            "description": "\u003c!-- subcategory:Metadata --\u003eSingle Metadata.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Metadata.getMetadata({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Metadata.get_metadata(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Metadata.GetMetadata.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.GetMetadata(ctx, \u0026metadata.GetMetadataArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Metadata.MetadataFunctions;\nimport com.pulumi.radarr.Metadata.inputs.GetMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetadataFunctions.getMetadata(GetMetadataArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Metadata:getMetadata\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMetadata.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Metadata name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMetadata.\n",
                "properties": {
                    "addCollectionName": {
                        "type": "boolean",
                        "description": "Add collection name flag.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Metadata configuration template.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Metadata ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Metadata implementation name.\n"
                    },
                    "movieImages": {
                        "type": "boolean",
                        "description": "Movie images flag.\n"
                    },
                    "movieMetadata": {
                        "type": "boolean",
                        "description": "Movie metafata flag.\n"
                    },
                    "movieMetadataLanguage": {
                        "type": "integer",
                        "description": "Movie metadata language.\n"
                    },
                    "movieMetadataUrl": {
                        "type": "boolean",
                        "description": "Movie metadata URL flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Metadata name.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useMovieNfo": {
                        "type": "boolean",
                        "description": "Use movie nfo flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addCollectionName",
                    "configContract",
                    "enable",
                    "id",
                    "implementation",
                    "movieImages",
                    "movieMetadata",
                    "movieMetadataLanguage",
                    "movieMetadataUrl",
                    "name",
                    "tags",
                    "useMovieNfo"
                ]
            }
        },
        "radarr:Metadata/getMetadataConfig:getMetadataConfig": {
            "description": "\u003c!-- subcategory:Metadata --\u003eMetadata Config.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Metadata.getMetadataConfig({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Metadata.get_metadata_config()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Metadata.GetMetadataConfig.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.GetMetadataConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Metadata.MetadataFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetadataFunctions.getMetadataConfig();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Metadata:getMetadataConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getMetadataConfig.\n",
                "properties": {
                    "certificationCountry": {
                        "type": "string",
                        "description": "Certification Country.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "certificationCountry",
                    "id"
                ]
            }
        },
        "radarr:Metadata/getMetadataConsumers:getMetadataConsumers": {
            "description": "\u003c!-- subcategory:Metadata --\u003eList all available Metadata Consumers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Metadata.getMetadataConsumers({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Metadata.get_metadata_consumers()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Metadata.GetMetadataConsumers.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.GetMetadataConsumers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Metadata.MetadataFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetadataFunctions.getMetadataConsumers();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Metadata:getMetadataConsumers\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getMetadataConsumers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "metadataConsumers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Metadata/getMetadataConsumersMetadataConsumer:getMetadataConsumersMetadataConsumer"
                        },
                        "description": "MetadataConsumer list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "metadataConsumers"
                ]
            }
        },
        "radarr:Movies/getMovie:getMovie": {
            "description": "\u003c!-- subcategory:Movies --\u003eSingle Movie.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Movies.getMovie({\n    tmdbId: 123,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Movies.get_movie(tmdb_id=123)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Movies.GetMovie.Invoke(new()\n    {\n        TmdbId = 123,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Movies\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Movies.GetMovie(ctx, \u0026movies.GetMovieArgs{\n\t\t\tTmdbId: 123,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Movies.MoviesFunctions;\nimport com.pulumi.radarr.Movies.inputs.GetMovieArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MoviesFunctions.getMovie(GetMovieArgs.builder()\n            .tmdbId(123)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Movies:getMovie\n      Arguments:\n        tmdbId: 123\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMovie.\n",
                "properties": {
                    "tmdbId": {
                        "type": "integer",
                        "description": "TMDB ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "tmdbId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMovie.\n",
                "properties": {
                    "genres": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List genres.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Movie ID.\n"
                    },
                    "imdbId": {
                        "type": "string",
                        "description": "IMDB ID.\n"
                    },
                    "isAvailable": {
                        "type": "boolean",
                        "description": "Availability flag.\n"
                    },
                    "minimumAvailability": {
                        "type": "string",
                        "description": "Minimum availability.\nAllowed values: 'tba', 'announced', 'inCinemas', 'released', 'deleted'.\n"
                    },
                    "monitored": {
                        "type": "boolean",
                        "description": "Monitored flag.\n"
                    },
                    "originalLanguage": {
                        "$ref": "#/types/radarr:Movies/getMovieOriginalLanguage:getMovieOriginalLanguage",
                        "description": "Origina language.\n"
                    },
                    "originalTitle": {
                        "type": "string",
                        "description": "Movie original title.\n"
                    },
                    "overview": {
                        "type": "string",
                        "description": "Overview.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Full movie path.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Movie status.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Movie title.\n"
                    },
                    "tmdbId": {
                        "type": "integer",
                        "description": "TMDB ID.\n"
                    },
                    "website": {
                        "type": "string",
                        "description": "Website.\n"
                    },
                    "year": {
                        "type": "integer",
                        "description": "Year.\n"
                    },
                    "youtubeTrailerId": {
                        "type": "string",
                        "description": "Youtube trailer ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "genres",
                    "id",
                    "imdbId",
                    "isAvailable",
                    "minimumAvailability",
                    "monitored",
                    "originalLanguage",
                    "originalTitle",
                    "overview",
                    "path",
                    "qualityProfileId",
                    "status",
                    "tags",
                    "title",
                    "tmdbId",
                    "website",
                    "year",
                    "youtubeTrailerId"
                ]
            }
        },
        "radarr:Movies/getMovies:getMovies": {
            "description": "\u003c!-- subcategory:Movies --\u003eList all available Movies.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Movies.getMovies({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Movies.get_movies()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Movies.GetMovies.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Movies\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Movies.GetMovies(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Movies.MoviesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MoviesFunctions.getMovies();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Movies:getMovies\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getMovies.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "movies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Movies/getMoviesMovie:getMoviesMovie"
                        },
                        "description": "Movie list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "movies"
                ]
            }
        },
        "radarr:Notifications/getNotification:getNotification": {
            "description": "\u003c!-- subcategory:Notifications --\u003eSingle Notification.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Notifications.getNotification({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Notifications.get_notification(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Notifications.GetNotification.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.GetNotification(ctx, \u0026notifications.GetNotificationArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationsFunctions;\nimport com.pulumi.radarr.Notifications.inputs.GetNotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NotificationsFunctions.getNotification(GetNotificationArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Notifications:getNotification\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNotification.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNotification.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n"
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n"
                    },
                    "alwaysUpdate": {
                        "type": "boolean",
                        "description": "Always update flag.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "appToken": {
                        "type": "string",
                        "description": "App token.\n"
                    },
                    "arguments": {
                        "type": "string",
                        "description": "Arguments.\n"
                    },
                    "authToken": {
                        "type": "string",
                        "description": "Auth token.\n"
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Author.\n"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "Avatar.\n"
                    },
                    "bccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Bcc.\n"
                    },
                    "botToken": {
                        "type": "string",
                        "description": "Bot token.\n"
                    },
                    "ccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cc.\n"
                    },
                    "channel": {
                        "type": "string",
                        "description": "Channel.\n"
                    },
                    "channelTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Channel tags.\n"
                    },
                    "chatId": {
                        "type": "string",
                        "description": "Chat ID.\n"
                    },
                    "cleanLibrary": {
                        "type": "boolean",
                        "description": "Clean library flag.\n"
                    },
                    "clickUrl": {
                        "type": "string",
                        "description": "Click URL.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Notification configuration template.\n"
                    },
                    "consumerKey": {
                        "type": "string",
                        "description": "Consumer key.\n"
                    },
                    "consumerSecret": {
                        "type": "string",
                        "description": "Consumer secret.\n"
                    },
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Device IDs.\n"
                    },
                    "deviceNames": {
                        "type": "string",
                        "description": "Device names.\n"
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices.\n"
                    },
                    "directMessage": {
                        "type": "boolean",
                        "description": "Direct message flag.\n"
                    },
                    "displayTime": {
                        "type": "integer",
                        "description": "Display time.\n"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event.\n"
                    },
                    "expire": {
                        "type": "integer",
                        "description": "Expire.\n"
                    },
                    "expires": {
                        "type": "string",
                        "description": "Expires.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specific tags.\n"
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "grabFields": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Host.\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Notification ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Notification implementation name.\n"
                    },
                    "importFields": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key.\n"
                    },
                    "mapFrom": {
                        "type": "string",
                        "description": "Map From.\n"
                    },
                    "mapTo": {
                        "type": "string",
                        "description": "Map To.\n"
                    },
                    "mention": {
                        "type": "string",
                        "description": "Mention.\n"
                    },
                    "method": {
                        "type": "integer",
                        "description": "Method. `1` POST, `2` PUT.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "notify": {
                        "type": "boolean",
                        "description": "Notify flag.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onDownload": {
                        "type": "boolean",
                        "description": "On download flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onMovieAdded": {
                        "type": "boolean",
                        "description": "On movie added flag.\n"
                    },
                    "onMovieDelete": {
                        "type": "boolean",
                        "description": "On movie delete flag.\n"
                    },
                    "onMovieFileDelete": {
                        "type": "boolean",
                        "description": "On movie file delete flag.\n"
                    },
                    "onMovieFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On movie file delete for upgrade flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "password.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recipients.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Refresh token.\n"
                    },
                    "requireEncryption": {
                        "type": "boolean",
                        "description": "Require encryption flag.\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "Retry.\n"
                    },
                    "sendSilently": {
                        "type": "boolean",
                        "description": "Add silently flag.\n"
                    },
                    "senderDomain": {
                        "type": "string",
                        "description": "Sender domain.\n"
                    },
                    "senderId": {
                        "type": "string",
                        "description": "Sender ID.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "server.\n"
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "Server url.\n"
                    },
                    "signIn": {
                        "type": "string",
                        "description": "Sign in.\n"
                    },
                    "sound": {
                        "type": "string",
                        "description": "Sound.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Topics.\n"
                    },
                    "tos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "To.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL.\n"
                    },
                    "useEuEndpoint": {
                        "type": "boolean",
                        "description": "Use EU endpoint flag.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "userKey": {
                        "type": "string",
                        "description": "User key.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "webHookUrl": {
                        "type": "string",
                        "description": "Web hook url.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessToken",
                    "accessTokenSecret",
                    "alwaysUpdate",
                    "apiKey",
                    "appToken",
                    "arguments",
                    "authToken",
                    "authUser",
                    "author",
                    "avatar",
                    "bccs",
                    "botToken",
                    "ccs",
                    "channel",
                    "channelTags",
                    "chatId",
                    "cleanLibrary",
                    "clickUrl",
                    "configContract",
                    "consumerKey",
                    "consumerSecret",
                    "deviceIds",
                    "deviceNames",
                    "devices",
                    "directMessage",
                    "displayTime",
                    "event",
                    "expire",
                    "expires",
                    "fieldTags",
                    "from",
                    "grabFields",
                    "host",
                    "icon",
                    "id",
                    "implementation",
                    "importFields",
                    "includeHealthWarnings",
                    "instanceName",
                    "key",
                    "mapFrom",
                    "mapTo",
                    "mention",
                    "method",
                    "name",
                    "notify",
                    "onApplicationUpdate",
                    "onDownload",
                    "onGrab",
                    "onHealthIssue",
                    "onMovieAdded",
                    "onMovieDelete",
                    "onMovieFileDelete",
                    "onMovieFileDeleteForUpgrade",
                    "onRename",
                    "onUpgrade",
                    "password",
                    "path",
                    "port",
                    "priority",
                    "recipients",
                    "refreshToken",
                    "requireEncryption",
                    "retry",
                    "sendSilently",
                    "senderDomain",
                    "senderId",
                    "server",
                    "serverUrl",
                    "signIn",
                    "sound",
                    "tags",
                    "tos",
                    "token",
                    "topics",
                    "updateLibrary",
                    "url",
                    "useEuEndpoint",
                    "useSsl",
                    "userKey",
                    "username",
                    "webHookUrl"
                ]
            }
        },
        "radarr:Notifications/getNotifications:getNotifications": {
            "description": "\u003c!-- subcategory:Notifications --\u003eList all available Notifications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Notifications.getNotifications({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Notifications.get_notifications()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Notifications.GetNotifications.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.GetNotifications(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Notifications.NotificationsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NotificationsFunctions.getNotifications();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Notifications:getNotifications\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getNotifications.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Notifications/getNotificationsNotification:getNotificationsNotification"
                        },
                        "description": "Notification list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "notifications"
                ]
            }
        },
        "radarr:Profiles/getCustomFormat:getCustomFormat": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Custom Format.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getCustomFormat({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_custom_format(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetCustomFormat.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetCustomFormat(ctx, \u0026profiles.GetCustomFormatArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getCustomFormat(GetCustomFormatArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormat\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormat.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Custom Format name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormat.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom Format ID.\n"
                    },
                    "includeCustomFormatWhenRenaming": {
                        "type": "boolean",
                        "description": "Include custom format when renaming flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Custom Format name.\n"
                    },
                    "specifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/getCustomFormatSpecification:getCustomFormatSpecification"
                        },
                        "description": "Specifications.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "includeCustomFormatWhenRenaming",
                    "name",
                    "specifications"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatCondition:getCustomFormatCondition": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Generic Custom Format Condition data source. When possible use a specific data source instead.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions).\n To be used in conjunction with Custom Format.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatCondition = radarr.Profiles.getCustomFormatCondition({\n    name: \"Example\",\n    implementation: \"SizeSpecification\",\n    negate: false,\n    required: false,\n    min: 0,\n    max: 100,\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatCondition],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition = radarr.Profiles.get_custom_format_condition(name=\"Example\",\n    implementation=\"SizeSpecification\",\n    negate=False,\n    required=False,\n    min=0,\n    max=100)\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatCondition = Radarr.Profiles.GetCustomFormatCondition.Invoke(new()\n    {\n        Name = \"Example\",\n        Implementation = \"SizeSpecification\",\n        Negate = false,\n        Required = false,\n        Min = 0,\n        Max = 100,\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatCondition,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatCondition, err := Profiles.GetCustomFormatCondition(ctx, \u0026profiles.GetCustomFormatConditionArgs{\n\t\t\tName:           \"Example\",\n\t\t\tImplementation: \"SizeSpecification\",\n\t\t\tNegate:         false,\n\t\t\tRequired:       false,\n\t\t\tMin:            pulumi.IntRef(0),\n\t\t\tMax:            pulumi.IntRef(100),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionResult(exampleCustomFormatCondition),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatCondition = ProfilesFunctions.getCustomFormatCondition(GetCustomFormatConditionArgs.builder()\n            .name(\"Example\")\n            .implementation(\"SizeSpecification\")\n            .negate(false)\n            .required(false)\n            .min(0)\n            .max(100)\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatCondition.applyValue(getCustomFormatConditionResult -\u003e getCustomFormatConditionResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatCondition}\nvariables:\n  exampleCustomFormatCondition:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatCondition\n      Arguments:\n        name: Example\n        implementation: SizeSpecification\n        negate: false\n        required: false\n        min: 0\n        max: 100\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatCondition.\n",
                "properties": {
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "max": {
                        "type": "integer",
                        "description": "Max.\n"
                    },
                    "min": {
                        "type": "integer",
                        "description": "Min.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value.\n"
                    }
                },
                "type": "object",
                "required": [
                    "implementation",
                    "name",
                    "negate",
                    "required"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatCondition.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "max": {
                        "type": "integer",
                        "description": "Max.\n"
                    },
                    "min": {
                        "type": "integer",
                        "description": "Min.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "max",
                    "min",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatConditionEdition:getCustomFormatConditionEdition": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Edition data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatConditionEdition = radarr.Profiles.getCustomFormatConditionEdition({\n    name: \"Example\",\n    negate: false,\n    required: false,\n    value: \".*Extended.*\",\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionEdition],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition_edition = radarr.Profiles.get_custom_format_condition_edition(name=\"Example\",\n    negate=False,\n    required=False,\n    value=\".*Extended.*\")\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_edition])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionEdition = Radarr.Profiles.GetCustomFormatConditionEdition.Invoke(new()\n    {\n        Name = \"Example\",\n        Negate = false,\n        Required = false,\n        Value = \".*Extended.*\",\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionEdition,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionEdition, err := Profiles.GetCustomFormatConditionEdition(ctx, \u0026profiles.GetCustomFormatConditionEditionArgs{\n\t\t\tName:     \"Example\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \".*Extended.*\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionEditionResult(exampleCustomFormatConditionEdition),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionEditionArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionEdition = ProfilesFunctions.getCustomFormatConditionEdition(GetCustomFormatConditionEditionArgs.builder()\n            .name(\"Example\")\n            .negate(false)\n            .required(false)\n            .value(\".*Extended.*\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionEdition.applyValue(getCustomFormatConditionEditionResult -\u003e getCustomFormatConditionEditionResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionEdition}\nvariables:\n  exampleCustomFormatConditionEdition:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatConditionEdition\n      Arguments:\n        name: Example\n        negate: false\n        required: false\n        value: .*Extended.*\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionEdition.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Edition RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionEdition.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition edition ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Edition RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatConditionIndexerFlag:getCustomFormatConditionIndexerFlag": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Indexer Flag data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions) and [Indexer Flag](https://wiki.servarr.com/radarr/settings#indexer-flags).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatConditionIndexerFlag = radarr.Profiles.getCustomFormatConditionIndexerFlag({\n    name: \"AHD_UserRelease\",\n    negate: false,\n    required: false,\n    value: \"1024\",\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionIndexerFlag],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition_indexer_flag = radarr.Profiles.get_custom_format_condition_indexer_flag(name=\"AHD_UserRelease\",\n    negate=False,\n    required=False,\n    value=\"1024\")\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_indexer_flag])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionIndexerFlag = Radarr.Profiles.GetCustomFormatConditionIndexerFlag.Invoke(new()\n    {\n        Name = \"AHD_UserRelease\",\n        Negate = false,\n        Required = false,\n        Value = \"1024\",\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionIndexerFlag,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionIndexerFlag, err := Profiles.GetCustomFormatConditionIndexerFlag(ctx, \u0026profiles.GetCustomFormatConditionIndexerFlagArgs{\n\t\t\tName:     \"AHD_UserRelease\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \"1024\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionIndexerFlagResult(exampleCustomFormatConditionIndexerFlag),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionIndexerFlagArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionIndexerFlag = ProfilesFunctions.getCustomFormatConditionIndexerFlag(GetCustomFormatConditionIndexerFlagArgs.builder()\n            .name(\"AHD_UserRelease\")\n            .negate(false)\n            .required(false)\n            .value(\"1024\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionIndexerFlag.applyValue(getCustomFormatConditionIndexerFlagResult -\u003e getCustomFormatConditionIndexerFlagResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionIndexerFlag}\nvariables:\n  exampleCustomFormatConditionIndexerFlag:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatConditionIndexerFlag\n      Arguments:\n        name: AHD_UserRelease\n        negate: false\n        required: false\n        value: '1024'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionIndexerFlag.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Indexer flag ID. `1` G Freeleech, `2` G Halfleech, `4` G DoubleUpload, `8` PTP Golden, `16` PTP Approved, `32` HDB Internal, `64` AHD Internal, `128` G Scene, `256` G Freeleech75, `512` G Freeleech25, `1024` AHD UserRelease.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionIndexerFlag.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition indexer flag ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Indexer flag ID. `1` G Freeleech, `2` G Halfleech, `4` G DoubleUpload, `8` PTP Golden, `16` PTP Approved, `32` HDB Internal, `64` AHD Internal, `128` G Scene, `256` G Freeleech75, `512` G Freeleech25, `1024` AHD UserRelease.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatConditionLanguage:getCustomFormatConditionLanguage": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Language data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatConditionLanguage = radarr.Profiles.getCustomFormatConditionLanguage({\n    name: \"Example\",\n    negate: false,\n    required: false,\n    value: \"31\",\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionLanguage],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition_language = radarr.Profiles.get_custom_format_condition_language(name=\"Example\",\n    negate=False,\n    required=False,\n    value=\"31\")\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_language])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionLanguage = Radarr.Profiles.GetCustomFormatConditionLanguage.Invoke(new()\n    {\n        Name = \"Example\",\n        Negate = false,\n        Required = false,\n        Value = \"31\",\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionLanguage,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionLanguage, err := Profiles.GetCustomFormatConditionLanguage(ctx, \u0026profiles.GetCustomFormatConditionLanguageArgs{\n\t\t\tName:     \"Example\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \"31\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionLanguageResult(exampleCustomFormatConditionLanguage),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionLanguageArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionLanguage = ProfilesFunctions.getCustomFormatConditionLanguage(GetCustomFormatConditionLanguageArgs.builder()\n            .name(\"Example\")\n            .negate(false)\n            .required(false)\n            .value(\"31\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionLanguage.applyValue(getCustomFormatConditionLanguageResult -\u003e getCustomFormatConditionLanguageResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionLanguage}\nvariables:\n  exampleCustomFormatConditionLanguage:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatConditionLanguage\n      Arguments:\n        name: Example\n        negate: false\n        required: false\n        value: '31'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionLanguage.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Language ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionLanguage.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition language ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Language ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatConditionQualityModifier:getCustomFormatConditionQualityModifier": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Quality Modifier data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatConditionQualityModifier = radarr.Profiles.getCustomFormatConditionQualityModifier({\n    name: \"REMUX\",\n    negate: false,\n    required: false,\n    value: \"5\",\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionQualityModifier],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition_quality_modifier = radarr.Profiles.get_custom_format_condition_quality_modifier(name=\"REMUX\",\n    negate=False,\n    required=False,\n    value=\"5\")\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_quality_modifier])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionQualityModifier = Radarr.Profiles.GetCustomFormatConditionQualityModifier.Invoke(new()\n    {\n        Name = \"REMUX\",\n        Negate = false,\n        Required = false,\n        Value = \"5\",\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionQualityModifier,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionQualityModifier, err := Profiles.GetCustomFormatConditionQualityModifier(ctx, \u0026profiles.GetCustomFormatConditionQualityModifierArgs{\n\t\t\tName:     \"REMUX\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \"5\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionQualityModifierResult(exampleCustomFormatConditionQualityModifier),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionQualityModifierArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionQualityModifier = ProfilesFunctions.getCustomFormatConditionQualityModifier(GetCustomFormatConditionQualityModifierArgs.builder()\n            .name(\"REMUX\")\n            .negate(false)\n            .required(false)\n            .value(\"5\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionQualityModifier.applyValue(getCustomFormatConditionQualityModifierResult -\u003e getCustomFormatConditionQualityModifierResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionQualityModifier}\nvariables:\n  exampleCustomFormatConditionQualityModifier:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatConditionQualityModifier\n      Arguments:\n        name: REMUX\n        negate: false\n        required: false\n        value: '5'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionQualityModifier.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate modifier.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed modifier.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Quality modifier ID. `0` NONE, `1` REGIONAL, `2` SCREENER, `3` RAWHD, `4` BRDISK, `5` REMUX.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionQualityModifier.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition quality modifier ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate modifier.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed modifier.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Quality modifier ID. `0` NONE, `1` REGIONAL, `2` SCREENER, `3` RAWHD, `4` BRDISK, `5` REMUX.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatConditionReleaseGroup:getCustomFormatConditionReleaseGroup": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Release Group data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatConditionReleaseGroup = radarr.Profiles.getCustomFormatConditionReleaseGroup({\n    name: \"HDBits\",\n    negate: false,\n    required: false,\n    value: \".*HDBits.*\",\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionReleaseGroup],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition_release_group = radarr.Profiles.get_custom_format_condition_release_group(name=\"HDBits\",\n    negate=False,\n    required=False,\n    value=\".*HDBits.*\")\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_release_group])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionReleaseGroup = Radarr.Profiles.GetCustomFormatConditionReleaseGroup.Invoke(new()\n    {\n        Name = \"HDBits\",\n        Negate = false,\n        Required = false,\n        Value = \".*HDBits.*\",\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionReleaseGroup,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionReleaseGroup, err := Profiles.GetCustomFormatConditionReleaseGroup(ctx, \u0026profiles.GetCustomFormatConditionReleaseGroupArgs{\n\t\t\tName:     \"HDBits\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \".*HDBits.*\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionReleaseGroupResult(exampleCustomFormatConditionReleaseGroup),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionReleaseGroupArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionReleaseGroup = ProfilesFunctions.getCustomFormatConditionReleaseGroup(GetCustomFormatConditionReleaseGroupArgs.builder()\n            .name(\"HDBits\")\n            .negate(false)\n            .required(false)\n            .value(\".*HDBits.*\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionReleaseGroup.applyValue(getCustomFormatConditionReleaseGroupResult -\u003e getCustomFormatConditionReleaseGroupResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionReleaseGroup}\nvariables:\n  exampleCustomFormatConditionReleaseGroup:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatConditionReleaseGroup\n      Arguments:\n        name: HDBits\n        negate: false\n        required: false\n        value: .*HDBits.*\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionReleaseGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Release group RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionReleaseGroup.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition release group ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Release group RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatConditionReleaseTitle:getCustomFormatConditionReleaseTitle": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Release Title data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatConditionReleaseTitle = radarr.Profiles.getCustomFormatConditionReleaseTitle({\n    name: \"x265\",\n    negate: false,\n    required: false,\n    value: \"(((x|h)\\\\.?265)|(HEVC))\",\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionReleaseTitle],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition_release_title = radarr.Profiles.get_custom_format_condition_release_title(name=\"x265\",\n    negate=False,\n    required=False,\n    value=\"(((x|h)\\\\.?265)|(HEVC))\")\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_release_title])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionReleaseTitle = Radarr.Profiles.GetCustomFormatConditionReleaseTitle.Invoke(new()\n    {\n        Name = \"x265\",\n        Negate = false,\n        Required = false,\n        Value = \"(((x|h)\\\\.?265)|(HEVC))\",\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionReleaseTitle,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionReleaseTitle, err := Profiles.GetCustomFormatConditionReleaseTitle(ctx, \u0026profiles.GetCustomFormatConditionReleaseTitleArgs{\n\t\t\tName:     \"x265\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \"(((x|h)\\\\.?265)|(HEVC))\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionReleaseTitleResult(exampleCustomFormatConditionReleaseTitle),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionReleaseTitleArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionReleaseTitle = ProfilesFunctions.getCustomFormatConditionReleaseTitle(GetCustomFormatConditionReleaseTitleArgs.builder()\n            .name(\"x265\")\n            .negate(false)\n            .required(false)\n            .value(\"(((x|h)\\\\.?265)|(HEVC))\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionReleaseTitle.applyValue(getCustomFormatConditionReleaseTitleResult -\u003e getCustomFormatConditionReleaseTitleResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionReleaseTitle}\nvariables:\n  exampleCustomFormatConditionReleaseTitle:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatConditionReleaseTitle\n      Arguments:\n        name: x265\n        negate: false\n        required: false\n        value: (((x|h)\\.?265)|(HEVC))\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionReleaseTitle.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Release title RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionReleaseTitle.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition release title ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Release title RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatConditionResolution:getCustomFormatConditionResolution": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Resolution data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatConditionResolution = radarr.Profiles.getCustomFormatConditionResolution({\n    name: \"Example\",\n    negate: false,\n    required: false,\n    value: \"1080\",\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionResolution],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition_resolution = radarr.Profiles.get_custom_format_condition_resolution(name=\"Example\",\n    negate=False,\n    required=False,\n    value=\"1080\")\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_resolution])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionResolution = Radarr.Profiles.GetCustomFormatConditionResolution.Invoke(new()\n    {\n        Name = \"Example\",\n        Negate = false,\n        Required = false,\n        Value = \"1080\",\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionResolution,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionResolution, err := Profiles.GetCustomFormatConditionResolution(ctx, \u0026profiles.GetCustomFormatConditionResolutionArgs{\n\t\t\tName:     \"Example\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \"1080\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionResolutionResult(exampleCustomFormatConditionResolution),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionResolutionArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionResolution = ProfilesFunctions.getCustomFormatConditionResolution(GetCustomFormatConditionResolutionArgs.builder()\n            .name(\"Example\")\n            .negate(false)\n            .required(false)\n            .value(\"1080\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionResolution.applyValue(getCustomFormatConditionResolutionResult -\u003e getCustomFormatConditionResolutionResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionResolution}\nvariables:\n  exampleCustomFormatConditionResolution:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatConditionResolution\n      Arguments:\n        name: Example\n        negate: false\n        required: false\n        value: '1080'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionResolution.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Resolution ID. `0` Unknown, `1` R360p, `2` R480p, `3` R540p, `4` R576p, `5` R720p, `6` R1080p, `7` R2160p.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionResolution.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition resolution ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Resolution ID. `0` Unknown, `1` R360p, `2` R480p, `3` R540p, `4` R576p, `5` R720p, `6` R1080p, `7` R2160p.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatConditionSize:getCustomFormatConditionSize": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Size data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatConditionSize = radarr.Profiles.getCustomFormatConditionSize({\n    name: \"Example\",\n    negate: false,\n    required: false,\n    min: 5,\n    max: 50,\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionSize],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition_size = radarr.Profiles.get_custom_format_condition_size(name=\"Example\",\n    negate=False,\n    required=False,\n    min=5,\n    max=50)\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_size])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionSize = Radarr.Profiles.GetCustomFormatConditionSize.Invoke(new()\n    {\n        Name = \"Example\",\n        Negate = false,\n        Required = false,\n        Min = 5,\n        Max = 50,\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionSize,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionSize, err := Profiles.GetCustomFormatConditionSize(ctx, \u0026profiles.GetCustomFormatConditionSizeArgs{\n\t\t\tName:     \"Example\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tMin:      5,\n\t\t\tMax:      50,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionSizeResult(exampleCustomFormatConditionSize),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionSizeArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionSize = ProfilesFunctions.getCustomFormatConditionSize(GetCustomFormatConditionSizeArgs.builder()\n            .name(\"Example\")\n            .negate(false)\n            .required(false)\n            .min(5)\n            .max(50)\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionSize.applyValue(getCustomFormatConditionSizeResult -\u003e getCustomFormatConditionSizeResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionSize}\nvariables:\n  exampleCustomFormatConditionSize:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatConditionSize\n      Arguments:\n        name: Example\n        negate: false\n        required: false\n        min: 5\n        max: 50\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionSize.\n",
                "properties": {
                    "max": {
                        "type": "integer",
                        "description": "Max size in GB.\n"
                    },
                    "min": {
                        "type": "integer",
                        "description": "Min size in GB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "max",
                    "min",
                    "name",
                    "negate",
                    "required"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionSize.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition size ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "max": {
                        "type": "integer",
                        "description": "Max size in GB.\n"
                    },
                    "min": {
                        "type": "integer",
                        "description": "Min size in GB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "max",
                    "min",
                    "name",
                    "negate",
                    "required"
                ]
            }
        },
        "radarr:Profiles/getCustomFormatConditionSource:getCustomFormatConditionSource": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Source data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/radarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst exampleCustomFormatConditionSource = radarr.Profiles.getCustomFormatConditionSource({\n    name: \"Example\",\n    negate: false,\n    required: false,\n    value: \"7\",\n});\nconst exampleCustomFormat = new radarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionSource],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample_custom_format_condition_source = radarr.Profiles.get_custom_format_condition_source(name=\"Example\",\n    negate=False,\n    required=False,\n    value=\"7\")\nexample_custom_format = radarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_source])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionSource = Radarr.Profiles.GetCustomFormatConditionSource.Invoke(new()\n    {\n        Name = \"Example\",\n        Negate = false,\n        Required = false,\n        Value = \"7\",\n    });\n\n    var exampleCustomFormat = new Radarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionSource,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionSource, err := Profiles.GetCustomFormatConditionSource(ctx, \u0026profiles.GetCustomFormatConditionSourceArgs{\n\t\t\tName:     \"Example\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \"7\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionSourceResult(exampleCustomFormatConditionSource),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetCustomFormatConditionSourceArgs;\nimport com.pulumi.radarr.Profiles.CustomFormat;\nimport com.pulumi.radarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionSource = ProfilesFunctions.getCustomFormatConditionSource(GetCustomFormatConditionSourceArgs.builder()\n            .name(\"Example\")\n            .negate(false)\n            .required(false)\n            .value(\"7\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionSource.applyValue(getCustomFormatConditionSourceResult -\u003e getCustomFormatConditionSourceResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: radarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionSource}\nvariables:\n  exampleCustomFormatConditionSource:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormatConditionSource\n      Arguments:\n        name: Example\n        negate: false\n        required: false\n        value: '7'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionSource.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Source ID. `0` unknown, `1` cam, `2` telesync, `3` telecine, `4` workprint, `5` dvd, `6` tv, `7` webdl, `8` webrip, `9` bluray.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionSource.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition source ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Source ID. `0` unknown, `1` cam, `2` telesync, `3` telecine, `4` workprint, `5` dvd, `6` tv, `7` webdl, `8` webrip, `9` bluray.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "radarr:Profiles/getCustomFormats:getCustomFormats": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Custom Formats.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getCustomFormats({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_custom_formats()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetCustomFormats.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetCustomFormats(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getCustomFormats();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getCustomFormats\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCustomFormats.\n",
                "properties": {
                    "customFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/getCustomFormatsCustomFormat:getCustomFormatsCustomFormat"
                        },
                        "description": "Download Client list..\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "customFormats",
                    "id"
                ]
            }
        },
        "radarr:Profiles/getDelayProfile:getDelayProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Delay Profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getDelayProfile({\n    id: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_delay_profile(id=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetDelayProfile.Invoke(new()\n    {\n        Id = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetDelayProfile(ctx, \u0026profiles.GetDelayProfileArgs{\n\t\t\tId: 1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetDelayProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getDelayProfile(GetDelayProfileArgs.builder()\n            .id(1)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getDelayProfile\n      Arguments:\n        id: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDelayProfile.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDelayProfile.\n",
                "properties": {
                    "bypassIfHighestQuality": {
                        "type": "boolean",
                        "description": "Bypass for highest quality Flag.\n"
                    },
                    "enableTorrent": {
                        "type": "boolean",
                        "description": "Torrent allowed Flag.\n"
                    },
                    "enableUsenet": {
                        "type": "boolean",
                        "description": "Usenet allowed Flag.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Order.\n"
                    },
                    "preferredProtocol": {
                        "type": "string",
                        "description": "Preferred protocol.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentDelay": {
                        "type": "integer",
                        "description": "Torrent Delay.\n"
                    },
                    "usenetDelay": {
                        "type": "integer",
                        "description": "Usenet delay.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bypassIfHighestQuality",
                    "enableTorrent",
                    "enableUsenet",
                    "id",
                    "order",
                    "preferredProtocol",
                    "tags",
                    "torrentDelay",
                    "usenetDelay"
                ]
            }
        },
        "radarr:Profiles/getDelayProfiles:getDelayProfiles": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Delay Profiles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getDelayProfiles({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_delay_profiles()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetDelayProfiles.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetDelayProfiles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getDelayProfiles();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getDelayProfiles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDelayProfiles.\n",
                "properties": {
                    "delayProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/getDelayProfilesDelayProfile:getDelayProfilesDelayProfile"
                        },
                        "description": "Delay Profile list.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "delayProfiles",
                    "id"
                ]
            }
        },
        "radarr:Profiles/getLanguage:getLanguage": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle available Language.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getLanguage({\n    name: \"English\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_language(name=\"English\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetLanguage.Invoke(new()\n    {\n        Name = \"English\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetLanguage(ctx, \u0026profiles.GetLanguageArgs{\n\t\t\tName: \"English\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetLanguageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getLanguage(GetLanguageArgs.builder()\n            .name(\"English\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getLanguage\n      Arguments:\n        name: English\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLanguage.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Language.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLanguage.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Language ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Language.\n"
                    },
                    "nameLower": {
                        "type": "string",
                        "description": "Language in lowercase.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "nameLower"
                ]
            }
        },
        "radarr:Profiles/getLanguages:getLanguages": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Languages.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getLanguages({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_languages()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetLanguages.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetLanguages(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getLanguages();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getLanguages\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getLanguages.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "languages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/getLanguagesLanguage:getLanguagesLanguage"
                        },
                        "description": "Language list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "languages"
                ]
            }
        },
        "radarr:Profiles/getQuality:getQuality": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Quality.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@maienm/pulumi-radarr\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst bluray = radarr.Profiles.getQuality({\n    name: \"Bluray-2160p\",\n});\nconst webdl = radarr.Profiles.getQuality({\n    name: \"WEBDL-2160p\",\n});\nconst webrip = radarr.Profiles.getQuality({\n    name: \"WEBRip-2160p\",\n});\nconst example = new radarr.profiles.QualityProfile(\"example\", {\n    name: \"Example\",\n    upgradeAllowed: true,\n    cutoff: 2000,\n    language: data.radarr_language.test,\n    qualityGroups: [\n        {\n            id: 2000,\n            name: \"WEB 2160p\",\n            qualities: [\n                webdl,\n                webrip,\n            ],\n        },\n        {\n            qualities: [bluray],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nbluray = radarr.Profiles.get_quality(name=\"Bluray-2160p\")\nwebdl = radarr.Profiles.get_quality(name=\"WEBDL-2160p\")\nwebrip = radarr.Profiles.get_quality(name=\"WEBRip-2160p\")\nexample = radarr.profiles.QualityProfile(\"example\",\n    name=\"Example\",\n    upgrade_allowed=True,\n    cutoff=2000,\n    language=data[\"radarr_language\"][\"test\"],\n    quality_groups=[\n        radarr.profiles.QualityProfileQualityGroupArgs(\n            id=2000,\n            name=\"WEB 2160p\",\n            qualities=[\n                webdl,\n                webrip,\n            ],\n        ),\n        radarr.profiles.QualityProfileQualityGroupArgs(\n            qualities=[bluray],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = MaienM.Radarr;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bluray = Radarr.Profiles.GetQuality.Invoke(new()\n    {\n        Name = \"Bluray-2160p\",\n    });\n\n    var webdl = Radarr.Profiles.GetQuality.Invoke(new()\n    {\n        Name = \"WEBDL-2160p\",\n    });\n\n    var webrip = Radarr.Profiles.GetQuality.Invoke(new()\n    {\n        Name = \"WEBRip-2160p\",\n    });\n\n    var example = new Radarr.Profiles.QualityProfile(\"example\", new()\n    {\n        Name = \"Example\",\n        UpgradeAllowed = true,\n        Cutoff = 2000,\n        Language = data.Radarr_language.Test,\n        QualityGroups = new[]\n        {\n            new Radarr.Profiles.Inputs.QualityProfileQualityGroupArgs\n            {\n                Id = 2000,\n                Name = \"WEB 2160p\",\n                Qualities = new[]\n                {\n                    webdl,\n                    webrip,\n                },\n            },\n            new Radarr.Profiles.Inputs.QualityProfileQualityGroupArgs\n            {\n                Qualities = new[]\n                {\n                    bluray,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbluray, err := Profiles.GetQuality(ctx, \u0026profiles.GetQualityArgs{\n\t\t\tName: \"Bluray-2160p\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twebdl, err := Profiles.GetQuality(ctx, \u0026profiles.GetQualityArgs{\n\t\t\tName: \"WEBDL-2160p\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\twebrip, err := Profiles.GetQuality(ctx, \u0026profiles.GetQualityArgs{\n\t\t\tName: \"WEBRip-2160p\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewQualityProfile(ctx, \"example\", \u0026Profiles.QualityProfileArgs{\n\t\t\tName:           pulumi.String(\"Example\"),\n\t\t\tUpgradeAllowed: pulumi.Bool(true),\n\t\t\tCutoff:         pulumi.Int(2000),\n\t\t\tLanguage:       pulumi.Any(data.Radarr_language.Test),\n\t\t\tQualityGroups: profiles.QualityProfileQualityGroupArray{\n\t\t\t\t\u0026profiles.QualityProfileQualityGroupArgs{\n\t\t\t\t\tId:   pulumi.Int(2000),\n\t\t\t\t\tName: pulumi.String(\"WEB 2160p\"),\n\t\t\t\t\tQualities: profiles.QualityProfileQualityGroupQualityArray{\n\t\t\t\t\t\tprofiles.GetQualityResult(webdl),\n\t\t\t\t\t\tprofiles.GetQualityResult(webrip),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026profiles.QualityProfileQualityGroupArgs{\n\t\t\t\t\tQualities: profiles.QualityProfileQualityGroupQualityArray{\n\t\t\t\t\t\tprofiles.GetQualityResult(bluray),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetQualityArgs;\nimport com.pulumi.radarr.Profiles.QualityProfile;\nimport com.pulumi.radarr.Profiles.QualityProfileArgs;\nimport com.pulumi.radarr.Profiles.inputs.QualityProfileQualityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var bluray = ProfilesFunctions.getQuality(GetQualityArgs.builder()\n            .name(\"Bluray-2160p\")\n            .build());\n\n        final var webdl = ProfilesFunctions.getQuality(GetQualityArgs.builder()\n            .name(\"WEBDL-2160p\")\n            .build());\n\n        final var webrip = ProfilesFunctions.getQuality(GetQualityArgs.builder()\n            .name(\"WEBRip-2160p\")\n            .build());\n\n        var example = new QualityProfile(\"example\", QualityProfileArgs.builder()        \n            .name(\"Example\")\n            .upgradeAllowed(true)\n            .cutoff(2000)\n            .language(data.radarr_language().test())\n            .qualityGroups(            \n                QualityProfileQualityGroupArgs.builder()\n                    .id(2000)\n                    .name(\"WEB 2160p\")\n                    .qualities(                    \n                        webdl.applyValue(getQualityResult -\u003e getQualityResult),\n                        webrip.applyValue(getQualityResult -\u003e getQualityResult))\n                    .build(),\n                QualityProfileQualityGroupArgs.builder()\n                    .qualities(bluray.applyValue(getQualityResult -\u003e getQualityResult))\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: radarr:Profiles:QualityProfile\n    properties:\n      name: Example\n      upgradeAllowed: true\n      cutoff: 2000\n      language: ${data.radarr_language.test}\n      qualityGroups:\n        - id: 2000\n          name: WEB 2160p\n          qualities:\n            - ${webdl}\n            - ${webrip}\n        - qualities:\n            - ${bluray}\nvariables:\n  bluray:\n    fn::invoke:\n      Function: radarr:Profiles:getQuality\n      Arguments:\n        name: Bluray-2160p\n  webdl:\n    fn::invoke:\n      Function: radarr:Profiles:getQuality\n      Arguments:\n        name: WEBDL-2160p\n  webrip:\n    fn::invoke:\n      Function: radarr:Profiles:getQuality\n      Arguments:\n        name: WEBRip-2160p\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getQuality.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Quality Name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getQuality.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Quality  ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Quality Name.\n"
                    },
                    "resolution": {
                        "type": "integer",
                        "description": "Quality Resolution.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Quality source.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "resolution",
                    "source"
                ]
            }
        },
        "radarr:Profiles/getQualityDefinition:getQualityDefinition": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Quality Definition.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getQualityDefinition({\n    id: 21,\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_quality_definition(id=21)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetQualityDefinition.Invoke(new()\n    {\n        Id = 21,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetQualityDefinition(ctx, \u0026profiles.GetQualityDefinitionArgs{\n\t\t\tId: 21,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetQualityDefinitionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getQualityDefinition(GetQualityDefinitionArgs.builder()\n            .id(21)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getQualityDefinition\n      Arguments:\n        id: 21\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getQualityDefinition.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Quality Definition ID.\n"
                    },
                    "minSize": {
                        "type": "number",
                        "description": "Minimum size MB/min.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getQualityDefinition.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Quality Definition ID.\n"
                    },
                    "maxSize": {
                        "type": "number",
                        "description": "Maximum size MB/min.\n"
                    },
                    "minSize": {
                        "type": "number",
                        "description": "Minimum size MB/min.\n"
                    },
                    "preferredSize": {
                        "type": "number",
                        "description": "Preferred size MB/min.\n"
                    },
                    "qualityId": {
                        "type": "integer",
                        "description": "Quality ID.\n"
                    },
                    "qualityName": {
                        "type": "string",
                        "description": "Quality Name.\n"
                    },
                    "resolution": {
                        "type": "integer",
                        "description": "Quality Resolution.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Quality source.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Quality Definition Title.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "maxSize",
                    "minSize",
                    "preferredSize",
                    "qualityId",
                    "qualityName",
                    "resolution",
                    "source",
                    "title"
                ]
            }
        },
        "radarr:Profiles/getQualityDefinitions:getQualityDefinitions": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Quality Definitions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getQualityDefinitions({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_quality_definitions()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetQualityDefinitions.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetQualityDefinitions(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getQualityDefinitions();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getQualityDefinitions\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getQualityDefinitions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "qualityDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/getQualityDefinitionsQualityDefinition:getQualityDefinitionsQualityDefinition"
                        },
                        "description": "Quality Definition list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "qualityDefinitions"
                ]
            }
        },
        "radarr:Profiles/getQualityProfile:getQualityProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Quality Profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getQualityProfile({\n    name: \"HD\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_quality_profile(name=\"HD\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetQualityProfile.Invoke(new()\n    {\n        Name = \"HD\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetQualityProfile(ctx, \u0026profiles.GetQualityProfileArgs{\n\t\t\tName: \"HD\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport com.pulumi.radarr.Profiles.inputs.GetQualityProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getQualityProfile(GetQualityProfileArgs.builder()\n            .name(\"HD\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getQualityProfile\n      Arguments:\n        name: HD\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getQualityProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Quality Profile Name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getQualityProfile.\n",
                "properties": {
                    "cutoff": {
                        "type": "integer",
                        "description": "Quality ID to which cutoff.\n"
                    },
                    "cutoffFormatScore": {
                        "type": "integer",
                        "description": "Cutoff format score.\n"
                    },
                    "formatItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/getQualityProfileFormatItem:getQualityProfileFormatItem"
                        },
                        "description": "Format items.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Quality Profile ID.\n"
                    },
                    "language": {
                        "$ref": "#/types/radarr:Profiles/getQualityProfileLanguage:getQualityProfileLanguage",
                        "description": "Language.\n"
                    },
                    "minFormatScore": {
                        "type": "integer",
                        "description": "Min format score.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Quality Profile Name.\n"
                    },
                    "qualityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/getQualityProfileQualityGroup:getQualityProfileQualityGroup"
                        },
                        "description": "Quality groups.\n"
                    },
                    "upgradeAllowed": {
                        "type": "boolean",
                        "description": "Upgrade allowed flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cutoff",
                    "cutoffFormatScore",
                    "formatItems",
                    "id",
                    "language",
                    "minFormatScore",
                    "name",
                    "qualityGroups",
                    "upgradeAllowed"
                ]
            }
        },
        "radarr:Profiles/getQualityProfiles:getQualityProfiles": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Quality Profiles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Profiles.getQualityProfiles({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Profiles.get_quality_profiles()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Profiles.GetQualityProfiles.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetQualityProfiles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getQualityProfiles();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Profiles:getQualityProfiles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getQualityProfiles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "qualityProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Profiles/getQualityProfilesQualityProfile:getQualityProfilesQualityProfile"
                        },
                        "description": "Quality Profile list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "qualityProfiles"
                ]
            }
        },
        "radarr:Status/getSystemStatus:getSystemStatus": {
            "description": "\u003c!-- subcategory:Status --\u003eSystem Status resource. User must have rights to read `config.xml`.\nFor more information refer to [System Status](https://wiki.servarr.com/radarr/system#status) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Status.getSystemStatus({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Status.get_system_status()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Status.GetSystemStatus.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Status\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Status.GetSystemStatus(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Status.StatusFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = StatusFunctions.getSystemStatus();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Status:getSystemStatus\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getSystemStatus.\n",
                "properties": {
                    "appData": {
                        "type": "string",
                        "description": "App data folder.\n"
                    },
                    "appName": {
                        "type": "string",
                        "description": "Application name.\n"
                    },
                    "authentication": {
                        "type": "string",
                        "description": "Authentication.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Branch.\n"
                    },
                    "buildTime": {
                        "type": "string",
                        "description": "Build time.\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "Database type.\n"
                    },
                    "databaseVersion": {
                        "type": "string",
                        "description": "Database version.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Status ID.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Is admin flag.\n"
                    },
                    "isDebug": {
                        "type": "boolean",
                        "description": "Is debug flag.\n"
                    },
                    "isDocker": {
                        "type": "boolean",
                        "description": "Is docker flag.\n"
                    },
                    "isLinux": {
                        "type": "boolean",
                        "description": "Is linux flag.\n"
                    },
                    "isNetCore": {
                        "type": "boolean",
                        "description": "Is net core flag.\n"
                    },
                    "isOsx": {
                        "type": "boolean",
                        "description": "Is osx flag.\n"
                    },
                    "isProduction": {
                        "type": "boolean",
                        "description": "Is production flag.\n"
                    },
                    "isUserInteractive": {
                        "type": "boolean",
                        "description": "Is user interactive flag.\n"
                    },
                    "isWindows": {
                        "type": "boolean",
                        "description": "Is windows flag.\n"
                    },
                    "migrationVersion": {
                        "type": "integer",
                        "description": "Is windows flag.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode.\n"
                    },
                    "osName": {
                        "type": "string",
                        "description": "OS name.\n"
                    },
                    "packageAuthor": {
                        "type": "string",
                        "description": "Package author.\n"
                    },
                    "packageUpdateMechanism": {
                        "type": "string",
                        "description": "Package update mechanism.\n"
                    },
                    "packageVersion": {
                        "type": "string",
                        "description": "Package version.\n"
                    },
                    "runtimeName": {
                        "type": "string",
                        "description": "Runtime name.\n"
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Runtime version.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Start time.\n"
                    },
                    "startupPath": {
                        "type": "string",
                        "description": "Startup path.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appData",
                    "appName",
                    "authentication",
                    "branch",
                    "buildTime",
                    "databaseType",
                    "databaseVersion",
                    "id",
                    "instanceName",
                    "isAdmin",
                    "isDebug",
                    "isDocker",
                    "isLinux",
                    "isNetCore",
                    "isOsx",
                    "isProduction",
                    "isUserInteractive",
                    "isWindows",
                    "migrationVersion",
                    "mode",
                    "osName",
                    "packageAuthor",
                    "packageUpdateMechanism",
                    "packageVersion",
                    "runtimeName",
                    "runtimeVersion",
                    "startTime",
                    "startupPath",
                    "urlBase",
                    "version"
                ]
            }
        },
        "radarr:Tags/getTag:getTag": {
            "description": "\u003c!-- subcategory:Tags --\u003eSingle Tag.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Tags.getTag({\n    label: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Tags.get_tag(label=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Tags.GetTag.Invoke(new()\n    {\n        Label = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Tags\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Tags.GetTag(ctx, \u0026tags.GetTagArgs{\n\t\t\tLabel: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Tags.TagsFunctions;\nimport com.pulumi.radarr.Tags.inputs.GetTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TagsFunctions.getTag(GetTagArgs.builder()\n            .label(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Tags:getTag\n      Arguments:\n        label: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTag.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Tag label.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTag.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Tag ID.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Tag label.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "label"
                ]
            }
        },
        "radarr:Tags/getTags:getTags": {
            "description": "\u003c!-- subcategory:Tags --\u003eList all available Tags.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as radarr from \"@pulumi/radarr\";\n\nconst example = radarr.Tags.getTags({});\n```\n```python\nimport pulumi\nimport pulumi_radarr as radarr\n\nexample = radarr.Tags.get_tags()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Radarr = Pulumi.Radarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Radarr.Tags.GetTags.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-radarr/sdk/go/radarr/Tags\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Tags.GetTags(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.radarr.Tags.TagsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TagsFunctions.getTags();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: radarr:Tags:getTags\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getTags.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/radarr:Tags/getTagsTag:getTagsTag"
                        },
                        "description": "Tag list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "tags"
                ]
            }
        }
    }
}